
logger.info(s"WALLET-KERNEL-BOOTSTRAP")

val keyName = "participant1NameSpaceKey"

participant1.keys.secret.upload_from("keypair.key", Some(keyName))

val key = participant1.keys.secret.list(filterName = keyName).headOption.get


val namespaceKey = key.publicKey match { case s: SigningPublicKey => s }


val namespace = Namespace(namespaceKey.id)

participant1.topology.init_id_from_uid(UniqueIdentifier.tryCreate(participant1.name, namespace))

participant1.topology.namespace_delegations.propose_delegation(namespace, namespaceKey, CanSignAllMappings)

participant1.health.wait_for_ready_for_node_topology()

val sequencerAuthKey = participant1.keys.secret.generate_signing_key(s"participant1-${SigningKeyUsage.SequencerAuthentication.identifier}", SigningKeyUsage.SequencerAuthenticationOnly)

val signingKey = participant1.keys.secret.generate_signing_key(s"participant1-${SigningKeyUsage.Protocol.identifier}", SigningKeyUsage.ProtocolOnly)
val encryptionKey = participant1.keys.secret.generate_encryption_key("participant1-encryption")

participant1.topology.owner_to_key_mappings.propose(
      OwnerToKeyMapping(
        participant1.id.member,
        com.daml.nonempty.NonEmpty(Seq, sequencerAuthKey, signingKey, encryptionKey),
      ),
      signedBy = Seq(namespaceKey.fingerprint, sequencerAuthKey.fingerprint, signingKey.fingerprint),
    )
participant1.health.wait_for_initialized()

// start all local instances defined in the configuration file
nodes.local.start()

// Bootstrap the synchronizer
bootstrap.synchronizer(
  synchronizerName = "wallet",
  sequencers = Seq(sequencer1),
  mediators = Seq(mediator1),
  synchronizerOwners = Seq(sequencer1, mediator1),
  synchronizerThreshold = PositiveInt.two,
  staticSynchronizerParameters = StaticSynchronizerParameters.defaultsWithoutKMS(ProtocolVersion.forSynchronizer),
)

// Connect participant1 to wallet using the connect macro.
// The connect macro will inspect the synchronizer configuration to find the correct URL and Port.
// The macro is convenient for local testing, but obviously doesn't work in a distributed setup.
participant1.synchronizers.connect_local(sequencer1, alias = "wallet")

utils.retry_until_true {
    participant1.synchronizers.active("wallet")
}