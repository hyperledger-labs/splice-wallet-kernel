name: CI on PRs
run-name: ${{ github.actor }} is perfoming a Pull Request

on:
    pull_request:
        types: [opened, reopened, synchronize, edited]
permissions:
    contents: read

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Enable Corepack
              run: corepack enable

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 'v22.16.0'
                  cache: 'yarn'

            - name: Install dependencies
              run: yarn install --immutable

            - name: Validate current PR title with commitlint
              run: echo "$TITLE" | yarn commitlint --verbose
              env:
                  TITLE: ${{ github.event.pull_request.title }}

            - name: prettier code
              run: yarn run prettier . --check

            - name: eslint code
              run: yarn workspaces foreach -A run eslint

            - name: run codegen
              run: yarn generate:all

            - name: Build project
              run: yarn build:all

            - name: check package.json names
              run: yarn script:cleancoding

            - name: check open-rpc specs titles
              run: yarn script:openrpc:titles

            - name: Run unit tests
              run: yarn test:all

            - name: Validate wallet SDK package build
              run: yarn script:validate:package

            - name: Download Canton
              run: yarn script:fetch:canton

            - name: Start Canton
              run: yarn start:canton &

            - run: yarn workspace @canton-network/clients-remote run start &

            - run: yarn workspace @canton-network/example run dev &

            - run: yarn workspace @canton-network/mock-oauth2 start &

            # Figures out the version of playwright that's installed.
            # 1. Because we don't know what version yarn will resolve it to, we have
            #    to use `yarn why` to get the actually installed version.
            # 2. Because we're in a workspace, we need to make sure we get the version
            #    for the root and not any children, hence the `grep`. If not using
            #    workspaces, this can be skipped.
            # 3. jq comes pre-installed in the Ubuntu runner, so we use that to get
            #    the correct version string.
            # 4. Finally, we use sed to extract just the version number (eg; '1.22.0')
            # The result is stored in steps.playwright-version.outputs.version
            - name: Get installed Playwright version
              id: playwright-version
              run: echo "::set-output name=version::$(yarn why --json @playwright/test | grep -h 'workspace:.' | jq --raw-output '.children[].locator' | sed -e 's/@playwright\/test@.*://')"

            # Attempt to restore the correct Playwright browser binaries based on the
            # currently installed version of Playwright (The browser binary versions
            # may change with Playwright versions).
            # Note: Playwright's cache directory is hard coded because that's what it
            # says to do in the docs. There doesn't appear to be a command that prints
            # it out for us.
            - name: Load Playwright browser cache
              uses: actions/cache@v4
              id: playwright-cache
              with:
                  path: '~/.cache/ms-playwright'
                  key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
                  # As a fallback, if the Playwright version has changed, try use the
                  # most recently cached version. There's a good chance that at least one
                  # of the browser binary versions haven't been updated, so Playwright can
                  # skip installing that in the next step.
                  # Note: When falling back to an old cache, `cache-hit` (used below)
                  # will be `false`. This allows us to restore the potentially out of
                  # date cache, but still let Playwright decide if it needs to download
                  # new binaries or not.
                  restore-keys: |
                      ${{ runner.os }}-playwright-

            # If the Playwright browser binaries weren't able to be restored, we tell
            # playwright to install everything for us.
            - name: Install Playwright's dependencies
              if: steps.playwright-cache.outputs.cache-hit != 'true'
              run: yarn workspace @canton-network/example run playwright install --with-deps

            - name: Run example e2e
              run: yarn workspace @canton-network/example run playwright test

            - uses: actions/upload-artifact@v4
              if: ${{ !cancelled() }}
              with:
                  name: playwright-report
                  path: example/playwright-report/
                  retention-days: 30

    build-docs:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version-file: .python-version

            - name: Install and configure Poetry
              uses: snok/install-poetry@v1
              with:
                  version: 2.1.3

            # load cached venv if cache exists
            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v4
              with:
                  path: docs/wallet-integration-guide/.venv
                  key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('docs/wallet-integration-guide/poetry.lock') }}

            # install dependencies if cache does not exist
            - name: Install dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              working-directory: docs/wallet-integration-guide
              run: poetry install --no-interaction --no-root

            - name: Build docs
              working-directory: docs/wallet-integration-guide
              run: poetry run sphinx-build -c . src build --fail-on-warning
