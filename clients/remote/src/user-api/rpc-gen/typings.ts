// Code generated by rpc-generator DO NOT EDIT!!
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 *
 * Set as primary wallet for dApp usage.
 *
 */
export type Primary = boolean
/**
 *
 * The party hint and name of the wallet.
 *
 */
export type PartyHint = string
/**
 *
 * The network ID the wallet corresponds to.
 *
 */
export type NetworkId = string
/**
 *
 * The signing provider ID the wallet corresponds to.
 *
 */
export type SigningProviderId = string
/**
 *
 * The party id of the wallet to be removed.
 *
 */
export type PartyId = string
export type StringDoaGddGA = string
/**
 *
 * Filter wallets by network IDs.
 *
 */
export type UnorderedSetOfStringDoaGddGAfeCfclIX = StringDoaGddGA[]
/**
 *
 * Filter wallets by signing provider IDs.
 *
 */
export type UnorderedSetOfStringDoaGddGAbA7Suovp = StringDoaGddGA[]
/**
 *
 * Filter for the wallets to be returned.
 *
 */
export interface WalletFilter {
    networkIds?: UnorderedSetOfStringDoaGddGAfeCfclIX
    signingProviderIds?: UnorderedSetOfStringDoaGddGAbA7Suovp
    [k: string]: any
}
/**
 *
 * The public key of the party.
 *
 */
export type PublicKey = string
/**
 *
 * The namespace of the party.
 *
 */
export type Namespace = string
/**
 *
 * Structure representing a wallet
 *
 */
export interface Wallet {
    primary: Primary
    partyHint: PartyHint
    publicKey: PublicKey
    namespace: Namespace
    networkId: NetworkId
    signingProviderId: SigningProviderId
    [k: string]: any
}
/**
 *
 * Name of network
 *
 */
export type StringWupREggx = string
/**
 *
 * Description of network
 *
 */
export type StringM72S2Xxb = string
/**
 *
 * Structure representing the connected Networks
 *
 */
export type Network = any[]
export interface AddNetworkParams {
    [key: string]: any
}
export interface CreateWalletParams {
    primary?: Primary
    partyHint: PartyHint
    networkId: NetworkId
    signingProviderId: SigningProviderId
    [k: string]: any
}
export interface RemovePartyParams {
    partyId: PartyId
    [k: string]: any
}
export interface ListWalletsParams {
    filter?: WalletFilter
    [k: string]: any
}
export interface SignParams {
    data: StringDoaGddGA
    party?: StringDoaGddGA
    [k: string]: any
}
export interface ExecuteParams {
    signature: StringDoaGddGA
    party: StringDoaGddGA
    signedBy: StringDoaGddGA
    [k: string]: any
}
/**
 *
 * Represents a null value, used in responses where no data is returned.
 *
 */
export type Null = any
export interface CreateWalletResult {
    wallet: Wallet
    [k: string]: any
}
export interface RemovePartyResult {
    [key: string]: any
}
/**
 *
 * An array of wallets that match the filter criteria.
 *
 */
export type ListWalletsResult = Wallet[]
export interface SignResult {
    signature: StringDoaGddGA
    party: StringDoaGddGA
    signedBy: StringDoaGddGA
    [k: string]: any
}
export interface ExecuteResult {
    correlationId: StringDoaGddGA
    traceId: StringDoaGddGA
    [k: string]: any
}
export interface ListNetworksResult {
    networks: Network
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfAddNetworkParamsCreateWalletParamsRemovePartyParamsListWalletsParamsSignParamsExecuteParamsNullCreateWalletResultRemovePartyResultListWalletsResultSignResultExecuteResultListNetworksResult =

        | AddNetworkParams
        | CreateWalletParams
        | RemovePartyParams
        | ListWalletsParams
        | SignParams
        | ExecuteParams
        | Null
        | CreateWalletResult
        | RemovePartyResult
        | ListWalletsResult
        | SignResult
        | ExecuteResult
        | ListNetworksResult
export type AddNetwork = (network: AddNetworkParams) => Promise<Null>
export type CreateWallet = (
    params: CreateWalletParams
) => Promise<CreateWalletResult>
export type RemoveWallet = (
    params: RemovePartyParams
) => Promise<RemovePartyResult>
export type ListWallets = (
    params: ListWalletsParams
) => Promise<ListWalletsResult>
export type Sign = (params: SignParams) => Promise<SignResult>
export type Execute = (params: ExecuteParams) => Promise<ExecuteResult>
export type ListNetworks = () => Promise<ListNetworksResult>
