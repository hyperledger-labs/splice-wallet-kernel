// Code generated by rpc-generator DO NOT EDIT!!
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 *
 * Name of network
 *
 */
export type Name = string
/**
 *
 * Description of network
 *
 */
export type Description = string
/**
 *
 * Network Id
 *
 */
export type NetworkId = string
/**
 *
 * network
 *
 */
export interface Network {
    name: Name
    description: Description
    networkId: NetworkId
    [k: string]: any
}
export type Type = string
export type TokenUrl = string
export type GrantType = string
export type Scope = string
export type ClientId = string
export type Domain = string
export type Audience = string
/**
 *
 * auth
 *
 */
export interface Auth {
    type: Type
    tokenUrl?: TokenUrl
    grantType?: GrantType
    scope?: Scope
    clientId?: ClientId
    domain?: Domain
    audience?: Audience
    [k: string]: any
}
/**
 *
 * Ledger api url
 *
 */
export type LedgerApiUrl = string
/**
 *
 * Ledger api url
 *
 */
export type NetworkName = string
/**
 *
 * Set as primary wallet for dApp usage.
 *
 */
export type Primary = boolean
/**
 *
 * The party hint and name of the wallet.
 *
 */
export type PartyHint = string
/**
 *
 * The signing provider ID the wallet corresponds to.
 *
 */
export type SigningProviderId = string
export type PartyId = string
/**
 *
 * Filter wallets by network IDs.
 *
 */
export type NetworkIds = NetworkId[]
/**
 *
 * Filter wallets by signing provider IDs.
 *
 */
export type SigningProviderIds = SigningProviderId[]
/**
 *
 * Filter for the wallets to be returned.
 *
 */
export interface WalletFilter {
    networkIds?: NetworkIds
    signingProviderIds?: SigningProviderIds
    [k: string]: any
}
export type Data = string
export type Signature = string
export type SignedBy = string
/**
 *
 * The party hint and name of the wallet.
 *
 */
export type Hint = string
/**
 *
 * The public key of the party.
 *
 */
export type PublicKey = string
/**
 *
 * The namespace of the party.
 *
 */
export type Namespace = string
/**
 *
 * Structure representing a wallet
 *
 */
export interface Wallet {
    primary: Primary
    partyId: PartyId
    hint: Hint
    publicKey: PublicKey
    namespace: Namespace
    networkId: NetworkId
    signingProviderId: SigningProviderId
    [k: string]: any
}
export type CorrelationId = string
export type TraceId = string
/**
 *
 * Structure representing the connected Networks
 *
 */
export type Networks = any[]
export interface AddNetworkParams {
    network: Network
    auth: Auth
    ledgerApiUrl: LedgerApiUrl
    [k: string]: any
}
export interface RemoveNetworkParams {
    networkName: NetworkName
    [k: string]: any
}
export interface CreateWalletParams {
    primary?: Primary
    partyHint: PartyHint
    networkId: NetworkId
    signingProviderId: SigningProviderId
    [k: string]: any
}
export interface RemoveWalletParams {
    partyId: PartyId
    [k: string]: any
}
export interface ListWalletsParams {
    filter?: WalletFilter
    [k: string]: any
}
export interface SignParams {
    data: Data
    partyId?: PartyId
    [k: string]: any
}
export interface ExecuteParams {
    signature: Signature
    partyId: PartyId
    signedBy: SignedBy
    [k: string]: any
}
/**
 *
 * Represents a null value, used in responses where no data is returned.
 *
 */
export type Null = any
export interface CreateWalletResult {
    wallet: Wallet
    [k: string]: any
}
export interface RemovePartyResult {
    [key: string]: any
}
/**
 *
 * An array of wallets that match the filter criteria.
 *
 */
export type ListWalletsResult = Wallet[]
export interface SignResult {
    signature: Signature
    partyId: PartyId
    signedBy: SignedBy
    [k: string]: any
}
export interface ExecuteResult {
    correlationId: CorrelationId
    traceId: TraceId
    [k: string]: any
}
export interface ListNetworksResult {
    networks: Networks
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfAddNetworkParamsRemoveNetworkParamsCreateWalletParamsRemoveWalletParamsListWalletsParamsSignParamsExecuteParamsNullNullCreateWalletResultRemovePartyResultListWalletsResultSignResultExecuteResultListNetworksResult =

        | AddNetworkParams
        | RemoveNetworkParams
        | CreateWalletParams
        | RemoveWalletParams
        | ListWalletsParams
        | SignParams
        | ExecuteParams
        | Null
        | CreateWalletResult
        | RemovePartyResult
        | ListWalletsResult
        | SignResult
        | ExecuteResult
        | ListNetworksResult
export type AddNetwork = (params: AddNetworkParams) => Promise<Null>
export type RemoveNetwork = (params: RemoveNetworkParams) => Promise<Null>
export type CreateWallet = (
    params: CreateWalletParams
) => Promise<CreateWalletResult>
export type RemoveWallet = (
    params: RemoveWalletParams
) => Promise<RemovePartyResult>
export type ListWallets = (
    params: ListWalletsParams
) => Promise<ListWalletsResult>
export type Sign = (params: SignParams) => Promise<SignResult>
export type Execute = (params: ExecuteParams) => Promise<ExecuteResult>
export type ListNetworks = () => Promise<ListNetworksResult>
