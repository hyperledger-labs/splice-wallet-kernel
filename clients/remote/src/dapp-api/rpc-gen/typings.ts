// Code generated by rpc-generator DO NOT EDIT!!
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 *
 * Structure representing JS commands for transaction execution
 *
 */
export interface JsCommands {
    [key: string]: any
}
export type StringMo3KZIJp = 'GET' | 'POST' | 'PUT' | 'DELETE'
export type StringDoaGddGA = string
/**
 *
 * The unique identifier of the wallet kernel.
 *
 */
export type StringFRWQxn2U = string
/**
 *
 * browser|desktop|mobile|remote
 *
 */
export type StringGFIfvhK0 = string
/**
 *
 * The URL of the wallet kernel.
 *
 */
export type String3T7JhIFf = string
/**
 *
 * Represents a wallet kernel.
 *
 */
export interface Kernel {
    id: StringFRWQxn2U
    clientType: StringGFIfvhK0
    url?: String3T7JhIFf
    [k: string]: any
}
/**
 *
 * Whether or not a connection to a network is esablished.
 *
 */
export type BooleanIJuPLvlB = boolean
/**
 *
 * A CAIP-2 compliant chain ID, e.g. 'canton:da-mainnet'.
 *
 */
export type StringIUsSEQ9O = string
/**
 *
 * A URL that points to a user interface.
 *
 */
export type UserUrl = string
export type UnorderedSetOfStringDoaGddGADvj0XlFa = StringDoaGddGA[]
/**
 *
 * The prepared transaction data.
 *
 */
export type StringVxX3QAKl = string
/**
 *
 * The hash of the prepared transaction.
 *
 */
export type StringZK0Xb1WV = string
/**
 *
 * Structure representing the result of a prepareReturn call
 *
 */
export interface JsPrepareSubmissionResponse {
    preparedTransaction?: StringVxX3QAKl
    preparedTransactionHash?: StringZK0Xb1WV
    [k: string]: any
}
/**
 *
 * JWT authentication token (if applicable).
 *
 */
export type String8FT98W8N = string
export interface PrepareReturnParams {
    commands: JsCommands
    [k: string]: any
}
export interface PrepareExecuteParams {
    commands: JsCommands
    [k: string]: any
}
export interface LedgerApiParams {
    requestMethod: StringMo3KZIJp
    resource: StringDoaGddGA
    body?: StringDoaGddGA
    [k: string]: any
}
export interface StatusResult {
    kernel: Kernel
    isConnected: BooleanIJuPLvlB
    chainId?: StringIUsSEQ9O
    [k: string]: any
}
export interface ConnectResult {
    kernel: Kernel
    isConnected: BooleanIJuPLvlB
    chainId?: StringIUsSEQ9O
    userUrl?: UserUrl
    [k: string]: any
}
export interface DarsAvailableResult {
    dars: UnorderedSetOfStringDoaGddGADvj0XlFa
    [k: string]: any
}
export type PrepareReturnResult = any
export type PrepareExecuteResult = any
/**
 *
 * Ledger Api configuration options
 *
 */
export interface LedgerApiResult {
    response: StringDoaGddGA
    [k: string]: any
}
export interface OnConnectedEvent {
    kernel: Kernel
    chainId: StringIUsSEQ9O
    sessionToken?: String8FT98W8N
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfPrepareReturnParamsPrepareExecuteParamsLedgerApiParamsStatusResultConnectResultDarsAvailableResultPrepareReturnResultPrepareExecuteResultLedgerApiResultOnConnectedEvent =

        | PrepareReturnParams
        | PrepareExecuteParams
        | LedgerApiParams
        | StatusResult
        | ConnectResult
        | DarsAvailableResult
        | PrepareReturnResult
        | PrepareExecuteResult
        | LedgerApiResult
        | OnConnectedEvent
export type Status = () => Promise<StatusResult>
export type Connect = () => Promise<ConnectResult>
export type DarsAvailable = () => Promise<DarsAvailableResult>
export type PrepareReturn = (
    params: PrepareReturnParams
) => Promise<PrepareReturnResult>
export type PrepareExecute = (
    params: PrepareExecuteParams
) => Promise<PrepareExecuteResult>
export type LedgerApi = (params: LedgerApiParams) => Promise<LedgerApiResult>
export type OnConnected = () => Promise<OnConnectedEvent>
