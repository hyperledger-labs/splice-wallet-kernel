// Code generated by rpc-generator DO NOT EDIT!!
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 *
 * Structure representing JS commands for transaction execution
 *
 */
export interface JsCommands {
    [key: string]: any
}
export type RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'
export type Resource = string
export type Body = string
/**
 *
 * The unique identifier of the wallet kernel.
 *
 */
export type Id = string
/**
 *
 * The type of client that implements the wallet kernel.
 *
 */
export type ClientType = 'browser' | 'desktop' | 'mobile' | 'remote'
/**
 *
 * The URL of the wallet kernel.
 *
 */
export type Url = string
/**
 *
 * Represents a wallet kernel.
 *
 */
export interface KernelInfo {
    id: Id
    clientType: ClientType
    url?: Url
    [k: string]: any
}
/**
 *
 * Whether or not a connection to a network is esablished.
 *
 */
export type IsConnected = boolean
/**
 *
 * A CAIP-2 compliant chain ID, e.g. 'canton:da-mainnet'.
 *
 */
export type ChainId = string
/**
 *
 * A URL that points to a user interface.
 *
 */
export type UserUrl = string
export type Dar = string
export type Dars = Dar[]
/**
 *
 * The prepared transaction data.
 *
 */
export type PreparedTransaction = string
/**
 *
 * The hash of the prepared transaction.
 *
 */
export type PreparedTransactionHash = string
/**
 *
 * Structure representing the result of a prepareReturn call
 *
 */
export interface JsPrepareSubmissionResponse {
    preparedTransaction?: PreparedTransaction
    preparedTransactionHash?: PreparedTransactionHash
    [k: string]: any
}
export type Response = string
/**
 *
 * JWT authentication token (if applicable).
 *
 */
export type SessionToken = string
export interface PrepareReturnParams {
    commands: JsCommands
    [k: string]: any
}
export interface PrepareExecuteParams {
    commands: JsCommands
    [k: string]: any
}
export interface LedgerApiParams {
    requestMethod: RequestMethod
    resource: Resource
    body?: Body
    [k: string]: any
}
export interface StatusResult {
    kernel: KernelInfo
    isConnected: IsConnected
    chainId?: ChainId
    [k: string]: any
}
export interface ConnectResult {
    kernel: KernelInfo
    isConnected: IsConnected
    chainId?: ChainId
    userUrl: UserUrl
    [k: string]: any
}
export interface DarsAvailableResult {
    dars: Dars
    [k: string]: any
}
export type PrepareReturnResult = any
export interface PrepareExecuteResult {
    userUrl: UserUrl
    [k: string]: any
}
/**
 *
 * Ledger Api configuration options
 *
 */
export interface LedgerApiResult {
    response: Response
    [k: string]: any
}
export interface OnConnectedEvent {
    kernel: KernelInfo
    chainId: ChainId
    sessionToken?: SessionToken
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfPrepareReturnParamsPrepareExecuteParamsLedgerApiParamsStatusResultConnectResultDarsAvailableResultPrepareReturnResultPrepareExecuteResultLedgerApiResultOnConnectedEvent =

        | PrepareReturnParams
        | PrepareExecuteParams
        | LedgerApiParams
        | StatusResult
        | ConnectResult
        | DarsAvailableResult
        | PrepareReturnResult
        | PrepareExecuteResult
        | LedgerApiResult
        | OnConnectedEvent
export type Status = () => Promise<StatusResult>
export type Connect = () => Promise<ConnectResult>
export type DarsAvailable = () => Promise<DarsAvailableResult>
export type PrepareReturn = (
    params: PrepareReturnParams
) => Promise<PrepareReturnResult>
export type PrepareExecute = (
    params: PrepareExecuteParams
) => Promise<PrepareExecuteResult>
export type LedgerApi = (params: LedgerApiParams) => Promise<LedgerApiResult>
export type OnConnected = () => Promise<OnConnectedEvent>
