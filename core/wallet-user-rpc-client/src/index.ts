// Code generated by @open-rpc/generator DO NOT EDIT.
import {
    RequestManager,
    PostMessageWindowTransport,
    PostMessageIframeTransport,
    WebSocketTransport,
    HTTPTransport,
    Client,
    JSONRPCError,
} from '@open-rpc/client-js'
import _ from 'lodash'
import { OpenrpcDocument as OpenRPC, MethodObject } from '@open-rpc/meta-schema'
import {
    MethodCallValidator,
    MethodNotFoundError,
    parseOpenRPCDocument,
} from '@open-rpc/schema-utils-js'

/**
 *
 * Set as primary wallet for dApp usage.
 *
 */
export type Primary = boolean
/**
 *
 * The party hint and name of the wallet.
 *
 */
export type PartyHint = string
/**
 *
 * The network ID the wallet corresponds to.
 *
 */
export type NetworkId = string
/**
 *
 * The signing provider ID the wallet corresponds to.
 *
 */
export type SigningProviderId = string
/**
 *
 * The party id of the wallet to be removed.
 *
 */
export type PartyId = string
export type StringDoaGddGA = string
/**
 *
 * Filter wallets by network IDs.
 *
 */
export type UnorderedSetOfStringDoaGddGAfeCfclIX = StringDoaGddGA[]
/**
 *
 * Filter wallets by signing provider IDs.
 *
 */
export type UnorderedSetOfStringDoaGddGAbA7Suovp = StringDoaGddGA[]
/**
 *
 * Filter for the wallets to be returned.
 *
 */
export interface WalletFilter {
    networkIds?: UnorderedSetOfStringDoaGddGAfeCfclIX
    signingProviderIds?: UnorderedSetOfStringDoaGddGAbA7Suovp
    [k: string]: any
}
/**
 *
 * The public key of the party.
 *
 */
export type PublicKey = string
/**
 *
 * The namespace of the party.
 *
 */
export type Namespace = string
/**
 *
 * Structure representing a wallet
 *
 */
export interface Wallet {
    primary: Primary
    partyHint: PartyHint
    publicKey: PublicKey
    namespace: Namespace
    networkId: NetworkId
    signingProviderId: SigningProviderId
    [k: string]: any
}
/**
 *
 * Name of network
 *
 */
export type StringWupREggx = string
/**
 *
 * Description of network
 *
 */
export type StringM72S2Xxb = string
/**
 *
 * Structure representing the connected Networks
 *
 */
export type Network = any[]
export interface AddNetworkParams {
    [key: string]: any
}
export interface CreateWalletParams {
    primary?: Primary
    partyHint: PartyHint
    networkId: NetworkId
    signingProviderId: SigningProviderId
    [k: string]: any
}
export interface RemovePartyParams {
    partyId: PartyId
    [k: string]: any
}
export interface ListWalletsParams {
    filter?: WalletFilter
    [k: string]: any
}
export interface SignParams {
    data: StringDoaGddGA
    party?: StringDoaGddGA
    [k: string]: any
}
export interface ExecuteParams {
    signature: StringDoaGddGA
    party: StringDoaGddGA
    signedBy: StringDoaGddGA
    [k: string]: any
}
/**
 *
 * Represents a null value, used in responses where no data is returned.
 *
 */
export type Null = any
export interface CreateWalletResult {
    wallet: Wallet
    [k: string]: any
}
export interface RemovePartyResult {
    [key: string]: any
}
/**
 *
 * An array of wallets that match the filter criteria.
 *
 */
export type ListWalletsResult = Wallet[]
export interface SignResult {
    signature: StringDoaGddGA
    party: StringDoaGddGA
    signedBy: StringDoaGddGA
    [k: string]: any
}
export interface ExecuteResult {
    correlationId: StringDoaGddGA
    traceId: StringDoaGddGA
    [k: string]: any
}
export interface ListNetworksResult {
    networks: Network
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfAddNetworkParamsCreateWalletParamsRemovePartyParamsListWalletsParamsSignParamsExecuteParamsNullCreateWalletResultRemovePartyResultListWalletsResultSignResultExecuteResultListNetworksResult =

        | AddNetworkParams
        | CreateWalletParams
        | RemovePartyParams
        | ListWalletsParams
        | SignParams
        | ExecuteParams
        | Null
        | CreateWalletResult
        | RemovePartyResult
        | ListWalletsResult
        | SignResult
        | ExecuteResult
        | ListNetworksResult
export type AddNetwork = (network: AddNetworkParams) => Promise<Null>
export type CreateWallet = (
    params: CreateWalletParams
) => Promise<CreateWalletResult>
export type RemoveWallet = (
    params: RemovePartyParams
) => Promise<RemovePartyResult>
export type ListWallets = (
    params: ListWalletsParams
) => Promise<ListWalletsResult>
export type Sign = (params: SignParams) => Promise<SignResult>
export type Execute = (params: ExecuteParams) => Promise<ExecuteResult>
export type ListNetworks = () => Promise<ListNetworksResult>

export interface Options {
    transport: {
        type:
            | 'websocket'
            | 'http'
            | 'https'
            | 'postmessagewindow'
            | 'postmessageiframe'
        host: string
        port: number
        path?: string
        protocol?: string
    }
}

export class SpliceWalletJSONRPCUserAPI {
    public rpc: Client
    public static openrpcDocument: OpenRPC = {
        openrpc: '1.2.6',
        info: {
            title: 'Splice Wallet JSON-RPC User API',
            version: '1.0.0',
            description:
                'An OpenRPC specification for the user to interact with the wallet kernel.',
        },
        methods: [
            {
                name: 'addNetwork',
                params: [
                    {
                        name: 'network',
                        schema: { title: 'AddNetworkParams', type: 'object' },
                    },
                ],
                result: {
                    name: 'result',
                    schema: {
                        title: 'Null',
                        schema: { $ref: '#/components/schemas/Null' },
                        description:
                            'Represents a null value, used in responses where no data is returned.',
                    },
                },
                description:
                    'Adds a new network configuration (similar to EIP-3085).',
            },
            {
                name: 'createWallet',
                params: [
                    {
                        name: 'params',
                        schema: {
                            title: 'CreateWalletParams',
                            type: 'object',
                            properties: {
                                primary: {
                                    title: 'primary',
                                    type: 'boolean',
                                    description:
                                        'Set as primary wallet for dApp usage.',
                                },
                                partyHint: {
                                    title: 'partyHint',
                                    type: 'string',
                                    description:
                                        'The party hint and name of the wallet.',
                                },
                                networkId: {
                                    title: 'networkId',
                                    type: 'string',
                                    description:
                                        'The network ID the wallet corresponds to.',
                                },
                                signingProviderId: {
                                    title: 'signingProviderId',
                                    type: 'string',
                                    description:
                                        'The signing provider ID the wallet corresponds to.',
                                },
                            },
                            required: [
                                'partyHint',
                                'networkId',
                                'signingProviderId',
                            ],
                        },
                    },
                ],
                result: {
                    name: 'result',
                    schema: {
                        title: 'CreateWalletResult',
                        type: 'object',
                        properties: {
                            wallet: {
                                type: 'object',
                                description: 'The newly created wallet.',
                                $ref: '#/components/schemas/Wallet',
                            },
                        },
                        required: ['wallet'],
                    },
                },
                description:
                    'Allocates a new wallet and party with the given hint.',
            },
            {
                name: 'removeWallet',
                params: [
                    {
                        name: 'params',
                        schema: {
                            title: 'RemovePartyParams',
                            type: 'object',
                            properties: {
                                partyId: {
                                    title: 'partyId',
                                    type: 'string',
                                    description:
                                        'The party id of the wallet to be removed.',
                                },
                            },
                            required: ['partyId'],
                        },
                    },
                ],
                result: {
                    name: 'result',
                    schema: { title: 'RemovePartyResult', type: 'object' },
                },
                description: 'Removes a party with the given hint.',
            },
            {
                name: 'listWallets',
                params: [
                    {
                        name: 'params',
                        schema: {
                            title: 'ListWalletsParams',
                            type: 'object',
                            properties: {
                                filter: {
                                    title: 'WalletFilter',
                                    type: 'object',
                                    description:
                                        'Filter for the wallets to be returned.',
                                    $ref: '#/components/schemas/WalletFilter',
                                },
                            },
                            required: [],
                        },
                    },
                ],
                result: {
                    name: 'result',
                    schema: {
                        title: 'ListWalletsResult',
                        type: 'array',
                        items: { $ref: '#/components/schemas/Wallet' },
                        description:
                            'An array of wallets that match the filter criteria.',
                    },
                },
                description: 'Lists wallets.',
            },
            {
                name: 'sign',
                params: [
                    {
                        name: 'params',
                        schema: {
                            title: 'SignParams',
                            type: 'object',
                            properties: {
                                data: { type: 'string' },
                                party: { type: 'string' },
                            },
                            required: ['data'],
                        },
                    },
                ],
                result: {
                    name: 'result',
                    schema: {
                        title: 'SignResult',
                        type: 'object',
                        properties: {
                            signature: { type: 'string' },
                            party: { type: 'string' },
                            signedBy: { type: 'string' },
                        },
                        required: ['signature', 'party', 'signedBy'],
                    },
                },
                description:
                    'Signs the provided data with the private key of the specified or active party.',
            },
            {
                name: 'execute',
                params: [
                    {
                        name: 'params',
                        schema: {
                            title: 'ExecuteParams',
                            type: 'object',
                            properties: {
                                signature: { type: 'string' },
                                party: { type: 'string' },
                                signedBy: { type: 'string' },
                            },
                            required: ['signature', 'party', 'signedBy'],
                        },
                    },
                ],
                result: {
                    name: 'result',
                    schema: {
                        title: 'ExecuteResult',
                        type: 'object',
                        properties: {
                            correlationId: { type: 'string' },
                            traceId: { type: 'string' },
                        },
                        required: ['correlationId', 'traceId'],
                    },
                },
                description: 'Executes a signed transaction.',
            },
            {
                name: 'listNetworks',
                params: [],
                result: {
                    name: 'result',
                    schema: {
                        title: 'ListNetworksResult',
                        type: 'object',
                        properties: {
                            networks: {
                                type: 'array',
                                $ref: '#/components/schemas/Network',
                            },
                        },
                        required: ['networks'],
                    },
                },
            },
        ],
        components: {
            schemas: {
                Null: {
                    title: 'Null',
                    type: 'null',
                    description:
                        'Represents a null value, used in responses where no data is returned.',
                },
                Network: {
                    title: 'Network',
                    type: 'object',
                    description:
                        'Structure representing the connected Networks',
                    properties: {
                        name: {
                            type: 'string',
                            description: 'Name of network',
                        },
                        description: {
                            type: 'string',
                            description: 'Description of network',
                        },
                    },
                },
                Auth: {
                    title: 'type',
                    type: 'object',
                    description:
                        'Represents the type of auth (implicit or password) for a specified network',
                    properties: {
                        type: { type: 'string' },
                        tokenUrl: { type: 'string' },
                        scope: { type: 'string' },
                        clientId: { type: 'string' },
                        domain: { type: 'string' },
                        audience: { type: 'string' },
                    },
                },
                Wallet: {
                    title: 'Wallet',
                    type: 'object',
                    description: 'Structure representing a wallet',
                    properties: {
                        primary: {
                            title: 'primary',
                            type: 'boolean',
                            description:
                                'Set as primary wallet for dApp usage.',
                        },
                        partyHint: {
                            title: 'partyHint',
                            type: 'string',
                            description:
                                'The party hint and name of the wallet.',
                        },
                        publicKey: {
                            title: 'publicKey',
                            type: 'string',
                            description: 'The public key of the party.',
                        },
                        namespace: {
                            title: 'namespace',
                            type: 'string',
                            description: 'The namespace of the party.',
                        },
                        networkId: {
                            title: 'networkId',
                            type: 'string',
                            description:
                                'The network ID the wallet corresponds to.',
                        },
                        signingProviderId: {
                            title: 'signingProviderId',
                            type: 'string',
                            description:
                                'The signing provider ID the wallet corresponds to.',
                        },
                    },
                    required: [
                        'primary',
                        'partyHint',
                        'publicKey',
                        'namespace',
                        'networkId',
                        'signingProviderId',
                    ],
                },
                WalletFilter: {
                    title: 'WalletFilter',
                    type: 'object',
                    description: 'Filter for wallets',
                    properties: {
                        networkIds: {
                            type: 'array',
                            description: 'Filter wallets by network IDs.',
                            items: { type: 'string' },
                        },
                        signingProviderIds: {
                            type: 'array',
                            description:
                                'Filter wallets by signing provider IDs.',
                            items: { type: 'string' },
                        },
                    },
                    required: [],
                },
            },
        },
    }
    public dereffedDocument: OpenRPC | undefined
    public transport:
        | HTTPTransport
        | WebSocketTransport
        | PostMessageWindowTransport
        | PostMessageIframeTransport
    private validator: MethodCallValidator | undefined
    private timeout: number | undefined

    constructor(options: Options) {
        if (
            options.transport === undefined ||
            options.transport.type === undefined
        ) {
            throw new Error('Invalid constructor params')
        }
        const { type, host, port, protocol } = options.transport
        let path = options.transport.path || ''
        if (path && path[0] !== '/') {
            path = '/' + path
        }
        switch (type) {
            case 'http':
            case 'https':
                this.transport = new HTTPTransport(
                    (protocol || type) + '://' + host + ':' + port + path
                )
                break
            case 'websocket':
                this.transport = new WebSocketTransport(
                    (protocol || 'ws://') + host + ':' + port + path
                )
                break
            case 'postmessageiframe':
                this.transport = new PostMessageIframeTransport(
                    protocol + '://' + host + ':' + port + path
                )
                break
            case 'postmessagewindow':
                this.transport = new PostMessageWindowTransport(
                    protocol + '://' + host + ':' + port + path
                )
                break
            default:
                throw new Error('unsupported transport')
        }
        this.rpc = new Client(new RequestManager([this.transport]))
    }

    /**
     * Adds a JSONRPC notification handler to handle receiving notifications.
     * @example
     * myClient.onNotification((data)=>console.log(data));
     */
    private async initialize() {
        if (this.validator) {
            return
        }
        this.dereffedDocument = await parseOpenRPCDocument(
            SpliceWalletJSONRPCUserAPI.openrpcDocument
        )
        this.validator = new MethodCallValidator(this.dereffedDocument)
    }

    /**
     * Adds a JSONRPC notification handler to handle receiving notifications.
     * @example
     * myClient.onNotification((data)=>console.log(data));
     */
    public onNotification(callback: (data: any) => void) {
        this.rpc.onNotification(callback)
    }

    /**
     * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
     * @example
     * myClient.onError((err: JSONRPCError)=>console.log(err.message));
     */
    public onError(callback: (data: JSONRPCError) => void) {
        this.rpc.onError(callback)
    }

    /**
     * Sets a default timeout in ms for all requests excluding notifications.
     * @example
     * // 20s timeout
     * myClient.setDefaultTimeout(20000);
     * // Removes timeout from request
     * myClient.setDefaultTimeout(undefined);
     */
    public setDefaultTimeout(ms?: number) {
        this.timeout = ms
    }

    /**
     * Initiates [[SpliceWalletJSONRPCUserAPI.startBatch]] in order to build a batch call.
     *
     * Subsequent calls to [[SpliceWalletJSONRPCUserAPI.request]] will be added to the batch.
     * Once [[SpliceWalletJSONRPCUserAPI.stopBatch]] is called, the promises for the [[SpliceWalletJSONRPCUserAPI.request]]
     * will then be resolved.  If there is already a batch in progress this method is a noop.
     *
     * @example
     * myClient.startBatch();
     * myClient.foo().then(() => console.log("foobar"))
     * myClient.bar().then(() => console.log("foobarbaz"))
     * myClient.stopBatch();
     */
    public startBatch(): void {
        return this.rpc.startBatch()
    }

    /**
     * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
     *
     * stopBatch will send the [[SpliceWalletJSONRPCUserAPI]] calls made since the last [[SpliceWalletJSONRPCUserAPI.startBatch]] call. For
     * that reason, [[SpliceWalletJSONRPCUserAPI.startBatch]] MUST be called before [[SpliceWalletJSONRPCUserAPI.stopBatch]].
     *
     * @example
     * myClient.startBatch();
     * myClient.foo().then(() => console.log("foobar"))
     * myClient.bar().then(() => console.log("foobarbaz"))
     * myClient.stopBatch();
     */
    public stopBatch(): void {
        return this.rpc.stopBatch()
    }

    private async request(methodName: string, params: any[]): Promise<any> {
        await this.initialize()
        if (this.validator === undefined) {
            throw new Error('internal error')
        }
        const methodObject = _.find(
            SpliceWalletJSONRPCUserAPI.openrpcDocument
                .methods as MethodObject[],
            ({ name }) => name === methodName
        ) as MethodObject
        const notification = methodObject.result ? false : true
        const openRpcMethodValidationErrors = this.validator.validate(
            methodName,
            params
        )
        if (
            openRpcMethodValidationErrors instanceof MethodNotFoundError ||
            openRpcMethodValidationErrors.length > 0
        ) {
            return Promise.reject(openRpcMethodValidationErrors)
        }

        let rpcParams
        if (
            methodObject.paramStructure &&
            methodObject.paramStructure === 'by-name'
        ) {
            rpcParams = _.zipObject(_.map(methodObject.params, 'name'), params)
        } else {
            rpcParams = params
        }
        if (notification) {
            return this.rpc.notify({ method: methodName, params: rpcParams })
        }
        return this.rpc.request(
            { method: methodName, params: rpcParams },
            this.timeout
        )
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public addNetwork: AddNetwork = (...params) => {
        return this.request('addNetwork', params)
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public createWallet: CreateWallet = (...params) => {
        return this.request('createWallet', params)
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public removeWallet: RemoveWallet = (...params) => {
        return this.request('removeWallet', params)
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public listWallets: ListWallets = (...params) => {
        return this.request('listWallets', params)
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public sign: Sign = (...params) => {
        return this.request('sign', params)
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public execute: Execute = (...params) => {
        return this.request('execute', params)
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public listNetworks: ListNetworks = (...params) => {
        return this.request('listNetworks', params)
    }
}
export default SpliceWalletJSONRPCUserAPI
