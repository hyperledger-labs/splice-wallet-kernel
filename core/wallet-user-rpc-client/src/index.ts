// Code generated by @open-rpc/generator DO NOT EDIT.
import _ from 'lodash'

import { RequestPayload, RpcTransport } from 'core-types'

export type StringDoaGddGA = string
/**
 *
 * Name of network
 *
 */
export type StringWupREggx = string
/**
 *
 * Description of network
 *
 */
export type StringM72S2Xxb = string
/**
 *
 * Structure representing the connected Networks
 *
 */
export type Network = any[]
export interface AddNetworkParams {
    [key: string]: any
}
export interface AllocatePartyParams {
    hint: StringDoaGddGA
    [k: string]: any
}
export interface RemovePartyParams {
    hint: StringDoaGddGA
    [k: string]: any
}
export interface SignParams {
    data: StringDoaGddGA
    party?: StringDoaGddGA
    [k: string]: any
}
export interface ExecuteParams {
    signature: StringDoaGddGA
    party: StringDoaGddGA
    signedBy: StringDoaGddGA
    [k: string]: any
}
/**
 *
 * Represents a null value, used in responses where no data is returned.
 *
 */
export type Null = any
export interface AllocatePartyResult {
    [key: string]: any
}
export interface RemovePartyResult {
    [key: string]: any
}
export interface SignResult {
    signature: StringDoaGddGA
    party: StringDoaGddGA
    signedBy: StringDoaGddGA
    [k: string]: any
}
export interface ExecuteResult {
    correlationId: StringDoaGddGA
    traceId: StringDoaGddGA
    [k: string]: any
}
export interface ListNetworksResult {
    networks: Network
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfAddNetworkParamsAllocatePartyParamsRemovePartyParamsSignParamsExecuteParamsNullAllocatePartyResultRemovePartyResultSignResultExecuteResultListNetworksResult =

        | AddNetworkParams
        | AllocatePartyParams
        | RemovePartyParams
        | SignParams
        | ExecuteParams
        | Null
        | AllocatePartyResult
        | RemovePartyResult
        | SignResult
        | ExecuteResult
        | ListNetworksResult
export type AddNetwork = (network: AddNetworkParams) => Promise<Null>
export type AllocateParty = (
    params: AllocatePartyParams
) => Promise<AllocatePartyResult>
export type RemoveParty = (
    params: RemovePartyParams
) => Promise<RemovePartyResult>
export type Sign = (params: SignParams) => Promise<SignResult>
export type Execute = (params: ExecuteParams) => Promise<ExecuteResult>
export type ListNetworks = () => Promise<ListNetworksResult>

export class SpliceWalletJSONRPCUserAPI {
    public transport: RpcTransport

    constructor(transport: RpcTransport) {
        this.transport = transport
    }

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public async request(
        method: 'addNetwork',
        ...params: Parameters<AddNetwork>
    ): ReturnType<AddNetwork>

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public async request(
        method: 'allocateParty',
        ...params: Parameters<AllocateParty>
    ): ReturnType<AllocateParty>

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public async request(
        method: 'removeParty',
        ...params: Parameters<RemoveParty>
    ): ReturnType<RemoveParty>

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public async request(
        method: 'sign',
        ...params: Parameters<Sign>
    ): ReturnType<Sign>

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public async request(
        method: 'execute',
        ...params: Parameters<Execute>
    ): ReturnType<Execute>

    /**
     *
     */
    // tslint:disable-next-line:max-line-length
    public async request(
        method: 'listNetworks',
        ...params: Parameters<ListNetworks>
    ): ReturnType<ListNetworks>

    public async request(
        method: string,
        params?: RequestPayload['params']
    ): Promise<unknown> {
        return this.transport.submit({ method, params })
    }
}
export default SpliceWalletJSONRPCUserAPI
