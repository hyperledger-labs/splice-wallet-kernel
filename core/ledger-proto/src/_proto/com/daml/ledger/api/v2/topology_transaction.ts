// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/topology_transaction.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { ParticipantPermission } from './state_service.js'
import { TraceContext } from './trace_context.js'
import { Timestamp } from '../../../../../google/protobuf/timestamp.js'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.TopologyTransaction
 */
export interface TopologyTransaction {
    /**
     * Assigned by the server. Useful for correlating logs.
     * Must be a valid LedgerString (as described in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: string update_id = 1
     */
    updateId: string
    /**
     * The absolute offset. The details of this field are described in ``community/ledger-api/README.md``.
     * Required, it is a valid absolute offset (positive integer).
     *
     * @generated from protobuf field: int64 offset = 2
     */
    offset: bigint
    /**
     * A valid synchronizer id.
     * Identifies the synchronizer that synchronized the topology transaction.
     * Required
     *
     * @generated from protobuf field: string synchronizer_id = 3
     */
    synchronizerId: string
    /**
     * The time at which the changes in the topology transaction become effective. There is a small delay between a
     * topology transaction being sequenced and the changes it contains becoming effective. Topology transactions appear
     * in order relative to a synchronizer based on their effective time rather than their sequencing time.
     * Required
     *
     * @generated from protobuf field: google.protobuf.Timestamp record_time = 4
     */
    recordTime?: Timestamp
    /**
     * A non-empty list of topology events.
     * Required
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.TopologyEvent events = 5
     */
    events: TopologyEvent[]
    /**
     * Optional; ledger API trace context
     *
     * The trace context transported in this message corresponds to the trace context supplied
     * by the client application in a HTTP2 header of the original command submission.
     * We typically use a header to transfer this type of information. Here we use message
     * body, because it is used in gRPC streams which do not support per message headers.
     * This field will be populated with the trace context contained in the original submission.
     * If that was not provided, a unique ledger-api-server generated trace context will be used
     * instead.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.TraceContext trace_context = 6
     */
    traceContext?: TraceContext
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.TopologyEvent
 */
export interface TopologyEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event:
        | {
              oneofKind: 'participantAuthorizationChanged'
              /**
               * @generated from protobuf field: com.daml.ledger.api.v2.ParticipantAuthorizationChanged participant_authorization_changed = 1
               */
              participantAuthorizationChanged: ParticipantAuthorizationChanged
          }
        | {
              oneofKind: 'participantAuthorizationRevoked'
              /**
               * @generated from protobuf field: com.daml.ledger.api.v2.ParticipantAuthorizationRevoked participant_authorization_revoked = 2
               */
              participantAuthorizationRevoked: ParticipantAuthorizationRevoked
          }
        | {
              oneofKind: 'participantAuthorizationAdded'
              /**
               * @generated from protobuf field: com.daml.ledger.api.v2.ParticipantAuthorizationAdded participant_authorization_added = 3
               */
              participantAuthorizationAdded: ParticipantAuthorizationAdded
          }
        | {
              oneofKind: undefined
          }
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.ParticipantAuthorizationAdded
 */
export interface ParticipantAuthorizationAdded {
    /**
     * Required
     *
     * @generated from protobuf field: string party_id = 1
     */
    partyId: string
    /**
     * Required
     *
     * @generated from protobuf field: string participant_id = 2
     */
    participantId: string
    /**
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.ParticipantPermission participant_permission = 3
     */
    participantPermission: ParticipantPermission
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.ParticipantAuthorizationChanged
 */
export interface ParticipantAuthorizationChanged {
    /**
     * Required
     *
     * @generated from protobuf field: string party_id = 1
     */
    partyId: string
    /**
     * Required
     *
     * @generated from protobuf field: string participant_id = 2
     */
    participantId: string
    /**
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.ParticipantPermission participant_permission = 3
     */
    participantPermission: ParticipantPermission
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.ParticipantAuthorizationRevoked
 */
export interface ParticipantAuthorizationRevoked {
    /**
     * Required
     *
     * @generated from protobuf field: string party_id = 1
     */
    partyId: string
    /**
     * Required
     *
     * @generated from protobuf field: string participant_id = 2
     */
    participantId: string
}
// @generated message type with reflection information, may provide speed optimized methods
class TopologyTransaction$Type extends MessageType<TopologyTransaction> {
    constructor() {
        super('com.daml.ledger.api.v2.TopologyTransaction', [
            {
                no: 1,
                name: 'update_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'offset',
                kind: 'scalar',
                T: 3 /*ScalarType.INT64*/,
                L: 0 /*LongType.BIGINT*/,
            },
            {
                no: 3,
                name: 'synchronizer_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            { no: 4, name: 'record_time', kind: 'message', T: () => Timestamp },
            {
                no: 5,
                name: 'events',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => TopologyEvent,
            },
            {
                no: 6,
                name: 'trace_context',
                kind: 'message',
                T: () => TraceContext,
            },
        ])
    }
    create(value?: PartialMessage<TopologyTransaction>): TopologyTransaction {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.updateId = ''
        message.offset = 0n
        message.synchronizerId = ''
        message.events = []
        if (value !== undefined)
            reflectionMergePartial<TopologyTransaction>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: TopologyTransaction
    ): TopologyTransaction {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string update_id */ 1:
                    message.updateId = reader.string()
                    break
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toBigInt()
                    break
                case /* string synchronizer_id */ 3:
                    message.synchronizerId = reader.string()
                    break
                case /* google.protobuf.Timestamp record_time */ 4:
                    message.recordTime = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.recordTime
                    )
                    break
                case /* repeated com.daml.ledger.api.v2.TopologyEvent events */ 5:
                    message.events.push(
                        TopologyEvent.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                case /* com.daml.ledger.api.v2.TraceContext trace_context */ 6:
                    message.traceContext = TraceContext.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.traceContext
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: TopologyTransaction,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string update_id = 1; */
        if (message.updateId !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.updateId)
        /* int64 offset = 2; */
        if (message.offset !== 0n)
            writer.tag(2, WireType.Varint).int64(message.offset)
        /* string synchronizer_id = 3; */
        if (message.synchronizerId !== '')
            writer
                .tag(3, WireType.LengthDelimited)
                .string(message.synchronizerId)
        /* google.protobuf.Timestamp record_time = 4; */
        if (message.recordTime)
            Timestamp.internalBinaryWrite(
                message.recordTime,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated com.daml.ledger.api.v2.TopologyEvent events = 5; */
        for (let i = 0; i < message.events.length; i++)
            TopologyEvent.internalBinaryWrite(
                message.events[i],
                writer.tag(5, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.TraceContext trace_context = 6; */
        if (message.traceContext)
            TraceContext.internalBinaryWrite(
                message.traceContext,
                writer.tag(6, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.TopologyTransaction
 */
export const TopologyTransaction = new TopologyTransaction$Type()
// @generated message type with reflection information, may provide speed optimized methods
class TopologyEvent$Type extends MessageType<TopologyEvent> {
    constructor() {
        super('com.daml.ledger.api.v2.TopologyEvent', [
            {
                no: 1,
                name: 'participant_authorization_changed',
                kind: 'message',
                oneof: 'event',
                T: () => ParticipantAuthorizationChanged,
            },
            {
                no: 2,
                name: 'participant_authorization_revoked',
                kind: 'message',
                oneof: 'event',
                T: () => ParticipantAuthorizationRevoked,
            },
            {
                no: 3,
                name: 'participant_authorization_added',
                kind: 'message',
                oneof: 'event',
                T: () => ParticipantAuthorizationAdded,
            },
        ])
    }
    create(value?: PartialMessage<TopologyEvent>): TopologyEvent {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.event = { oneofKind: undefined }
        if (value !== undefined)
            reflectionMergePartial<TopologyEvent>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: TopologyEvent
    ): TopologyEvent {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.ParticipantAuthorizationChanged participant_authorization_changed */ 1:
                    message.event = {
                        oneofKind: 'participantAuthorizationChanged',
                        participantAuthorizationChanged:
                            ParticipantAuthorizationChanged.internalBinaryRead(
                                reader,
                                reader.uint32(),
                                options,
                                (message.event as any)
                                    .participantAuthorizationChanged
                            ),
                    }
                    break
                case /* com.daml.ledger.api.v2.ParticipantAuthorizationRevoked participant_authorization_revoked */ 2:
                    message.event = {
                        oneofKind: 'participantAuthorizationRevoked',
                        participantAuthorizationRevoked:
                            ParticipantAuthorizationRevoked.internalBinaryRead(
                                reader,
                                reader.uint32(),
                                options,
                                (message.event as any)
                                    .participantAuthorizationRevoked
                            ),
                    }
                    break
                case /* com.daml.ledger.api.v2.ParticipantAuthorizationAdded participant_authorization_added */ 3:
                    message.event = {
                        oneofKind: 'participantAuthorizationAdded',
                        participantAuthorizationAdded:
                            ParticipantAuthorizationAdded.internalBinaryRead(
                                reader,
                                reader.uint32(),
                                options,
                                (message.event as any)
                                    .participantAuthorizationAdded
                            ),
                    }
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: TopologyEvent,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.ParticipantAuthorizationChanged participant_authorization_changed = 1; */
        if (message.event.oneofKind === 'participantAuthorizationChanged')
            ParticipantAuthorizationChanged.internalBinaryWrite(
                message.event.participantAuthorizationChanged,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.ParticipantAuthorizationRevoked participant_authorization_revoked = 2; */
        if (message.event.oneofKind === 'participantAuthorizationRevoked')
            ParticipantAuthorizationRevoked.internalBinaryWrite(
                message.event.participantAuthorizationRevoked,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.ParticipantAuthorizationAdded participant_authorization_added = 3; */
        if (message.event.oneofKind === 'participantAuthorizationAdded')
            ParticipantAuthorizationAdded.internalBinaryWrite(
                message.event.participantAuthorizationAdded,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.TopologyEvent
 */
export const TopologyEvent = new TopologyEvent$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantAuthorizationAdded$Type extends MessageType<ParticipantAuthorizationAdded> {
    constructor() {
        super('com.daml.ledger.api.v2.ParticipantAuthorizationAdded', [
            {
                no: 1,
                name: 'party_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'participant_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 3,
                name: 'participant_permission',
                kind: 'enum',
                T: () => [
                    'com.daml.ledger.api.v2.ParticipantPermission',
                    ParticipantPermission,
                    'PARTICIPANT_PERMISSION_',
                ],
            },
        ])
    }
    create(
        value?: PartialMessage<ParticipantAuthorizationAdded>
    ): ParticipantAuthorizationAdded {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.partyId = ''
        message.participantId = ''
        message.participantPermission = 0
        if (value !== undefined)
            reflectionMergePartial<ParticipantAuthorizationAdded>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ParticipantAuthorizationAdded
    ): ParticipantAuthorizationAdded {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string party_id */ 1:
                    message.partyId = reader.string()
                    break
                case /* string participant_id */ 2:
                    message.participantId = reader.string()
                    break
                case /* com.daml.ledger.api.v2.ParticipantPermission participant_permission */ 3:
                    message.participantPermission = reader.int32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ParticipantAuthorizationAdded,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string party_id = 1; */
        if (message.partyId !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.partyId)
        /* string participant_id = 2; */
        if (message.participantId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.participantId)
        /* com.daml.ledger.api.v2.ParticipantPermission participant_permission = 3; */
        if (message.participantPermission !== 0)
            writer.tag(3, WireType.Varint).int32(message.participantPermission)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ParticipantAuthorizationAdded
 */
export const ParticipantAuthorizationAdded =
    new ParticipantAuthorizationAdded$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantAuthorizationChanged$Type extends MessageType<ParticipantAuthorizationChanged> {
    constructor() {
        super('com.daml.ledger.api.v2.ParticipantAuthorizationChanged', [
            {
                no: 1,
                name: 'party_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'participant_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 3,
                name: 'participant_permission',
                kind: 'enum',
                T: () => [
                    'com.daml.ledger.api.v2.ParticipantPermission',
                    ParticipantPermission,
                    'PARTICIPANT_PERMISSION_',
                ],
            },
        ])
    }
    create(
        value?: PartialMessage<ParticipantAuthorizationChanged>
    ): ParticipantAuthorizationChanged {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.partyId = ''
        message.participantId = ''
        message.participantPermission = 0
        if (value !== undefined)
            reflectionMergePartial<ParticipantAuthorizationChanged>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ParticipantAuthorizationChanged
    ): ParticipantAuthorizationChanged {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string party_id */ 1:
                    message.partyId = reader.string()
                    break
                case /* string participant_id */ 2:
                    message.participantId = reader.string()
                    break
                case /* com.daml.ledger.api.v2.ParticipantPermission participant_permission */ 3:
                    message.participantPermission = reader.int32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ParticipantAuthorizationChanged,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string party_id = 1; */
        if (message.partyId !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.partyId)
        /* string participant_id = 2; */
        if (message.participantId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.participantId)
        /* com.daml.ledger.api.v2.ParticipantPermission participant_permission = 3; */
        if (message.participantPermission !== 0)
            writer.tag(3, WireType.Varint).int32(message.participantPermission)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ParticipantAuthorizationChanged
 */
export const ParticipantAuthorizationChanged =
    new ParticipantAuthorizationChanged$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantAuthorizationRevoked$Type extends MessageType<ParticipantAuthorizationRevoked> {
    constructor() {
        super('com.daml.ledger.api.v2.ParticipantAuthorizationRevoked', [
            {
                no: 1,
                name: 'party_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'participant_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(
        value?: PartialMessage<ParticipantAuthorizationRevoked>
    ): ParticipantAuthorizationRevoked {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.partyId = ''
        message.participantId = ''
        if (value !== undefined)
            reflectionMergePartial<ParticipantAuthorizationRevoked>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ParticipantAuthorizationRevoked
    ): ParticipantAuthorizationRevoked {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string party_id */ 1:
                    message.partyId = reader.string()
                    break
                case /* string participant_id */ 2:
                    message.participantId = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ParticipantAuthorizationRevoked,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string party_id = 1; */
        if (message.partyId !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.partyId)
        /* string participant_id = 2; */
        if (message.participantId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.participantId)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ParticipantAuthorizationRevoked
 */
export const ParticipantAuthorizationRevoked =
    new ParticipantAuthorizationRevoked$Type()
