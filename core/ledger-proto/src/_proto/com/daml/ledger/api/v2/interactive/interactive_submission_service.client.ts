// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/interactive/interactive_submission_service.proto" (package "com.daml.ledger.api.v2.interactive", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { InteractiveSubmissionService } from './interactive_submission_service.js'
import type { GetPreferredPackageVersionResponse } from './interactive_submission_service.js'
import type { GetPreferredPackageVersionRequest } from './interactive_submission_service.js'
import type { ExecuteSubmissionResponse } from './interactive_submission_service.js'
import type { ExecuteSubmissionRequest } from './interactive_submission_service.js'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { PrepareSubmissionResponse } from './interactive_submission_service.js'
import type { PrepareSubmissionRequest } from './interactive_submission_service.js'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * Service allowing interactive construction of command submissions
 *
 * The prepare and execute endpoints allow to submit commands in 2-steps:
 *
 * 1. prepare transaction from commands,
 * 2. submit the prepared transaction
 *
 * This gives callers the ability to sign the daml transaction with their own signing keys
 *
 * @generated from protobuf service com.daml.ledger.api.v2.interactive.InteractiveSubmissionService
 */
export interface IInteractiveSubmissionServiceClient {
    /**
     * Requires `readAs` scope for the submitting party when LAPI User authorization is enabled
     *
     * @generated from protobuf rpc: PrepareSubmission
     */
    prepareSubmission(
        input: PrepareSubmissionRequest,
        options?: RpcOptions
    ): UnaryCall<PrepareSubmissionRequest, PrepareSubmissionResponse>
    /**
     * @generated from protobuf rpc: ExecuteSubmission
     */
    executeSubmission(
        input: ExecuteSubmissionRequest,
        options?: RpcOptions
    ): UnaryCall<ExecuteSubmissionRequest, ExecuteSubmissionResponse>
    /**
     * A preferred package is the highest-versioned package for a provided package-name
     * that is vetted by all the participants hosting the provided parties.
     *
     * Ledger API clients should use this endpoint for constructing command submissions
     * that are compatible with the provided preferred package, by making informed decisions on:
     * - which are the compatible packages that can be used to create contracts
     * - which contract or exercise choice argument version can be used in the command
     * - which choices can be executed on a template or interface of a contract
     *
     * Can be accessed by any Ledger API client with a valid token when Ledger API authorization is enabled.
     *
     * Experimental API: this endpoint is not guaranteed to provide backwards compatibility in future releases
     *
     * @generated from protobuf rpc: GetPreferredPackageVersion
     */
    getPreferredPackageVersion(
        input: GetPreferredPackageVersionRequest,
        options?: RpcOptions
    ): UnaryCall<
        GetPreferredPackageVersionRequest,
        GetPreferredPackageVersionResponse
    >
}
/**
 * Service allowing interactive construction of command submissions
 *
 * The prepare and execute endpoints allow to submit commands in 2-steps:
 *
 * 1. prepare transaction from commands,
 * 2. submit the prepared transaction
 *
 * This gives callers the ability to sign the daml transaction with their own signing keys
 *
 * @generated from protobuf service com.daml.ledger.api.v2.interactive.InteractiveSubmissionService
 */
export class InteractiveSubmissionServiceClient
    implements IInteractiveSubmissionServiceClient, ServiceInfo
{
    typeName = InteractiveSubmissionService.typeName
    methods = InteractiveSubmissionService.methods
    options = InteractiveSubmissionService.options
    constructor(private readonly _transport: RpcTransport) {}
    /**
     * Requires `readAs` scope for the submitting party when LAPI User authorization is enabled
     *
     * @generated from protobuf rpc: PrepareSubmission
     */
    prepareSubmission(
        input: PrepareSubmissionRequest,
        options?: RpcOptions
    ): UnaryCall<PrepareSubmissionRequest, PrepareSubmissionResponse> {
        const method = this.methods[0],
            opt = this._transport.mergeOptions(options)
        return stackIntercept<
            PrepareSubmissionRequest,
            PrepareSubmissionResponse
        >('unary', this._transport, method, opt, input)
    }
    /**
     * @generated from protobuf rpc: ExecuteSubmission
     */
    executeSubmission(
        input: ExecuteSubmissionRequest,
        options?: RpcOptions
    ): UnaryCall<ExecuteSubmissionRequest, ExecuteSubmissionResponse> {
        const method = this.methods[1],
            opt = this._transport.mergeOptions(options)
        return stackIntercept<
            ExecuteSubmissionRequest,
            ExecuteSubmissionResponse
        >('unary', this._transport, method, opt, input)
    }
    /**
     * A preferred package is the highest-versioned package for a provided package-name
     * that is vetted by all the participants hosting the provided parties.
     *
     * Ledger API clients should use this endpoint for constructing command submissions
     * that are compatible with the provided preferred package, by making informed decisions on:
     * - which are the compatible packages that can be used to create contracts
     * - which contract or exercise choice argument version can be used in the command
     * - which choices can be executed on a template or interface of a contract
     *
     * Can be accessed by any Ledger API client with a valid token when Ledger API authorization is enabled.
     *
     * Experimental API: this endpoint is not guaranteed to provide backwards compatibility in future releases
     *
     * @generated from protobuf rpc: GetPreferredPackageVersion
     */
    getPreferredPackageVersion(
        input: GetPreferredPackageVersionRequest,
        options?: RpcOptions
    ): UnaryCall<
        GetPreferredPackageVersionRequest,
        GetPreferredPackageVersionResponse
    > {
        const method = this.methods[2],
            opt = this._transport.mergeOptions(options)
        return stackIntercept<
            GetPreferredPackageVersionRequest,
            GetPreferredPackageVersionResponse
        >('unary', this._transport, method, opt, input)
    }
}
