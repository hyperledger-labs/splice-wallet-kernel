// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/admin/identity_provider_config_service.proto" (package "com.daml.ledger.api.v2.admin", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { FieldMask } from '../../../../../../google/protobuf/field_mask.js'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.IdentityProviderConfig
 */
export interface IdentityProviderConfig {
    /**
     * The identity provider identifier
     * Must be a valid LedgerString (as describe in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: string identity_provider_id = 1
     */
    identityProviderId: string
    /**
     * When set, the callers using JWT tokens issued by this identity provider are denied all access
     * to the Ledger API.
     * Optional,
     * Modifiable
     *
     * @generated from protobuf field: bool is_deactivated = 2
     */
    isDeactivated: boolean
    /**
     * Specifies the issuer of the JWT token.
     * The issuer value is a case sensitive URL using the https scheme that contains scheme, host,
     * and optionally, port number and path components and no query or fragment components.
     * Required
     * Modifiable
     *
     * @generated from protobuf field: string issuer = 3
     */
    issuer: string
    /**
     * The JWKS (JSON Web Key Set) URL.
     * The Ledger API uses JWKs (JSON Web Keys) from the provided URL to verify that the JWT has been
     * signed with the loaded JWK. Only RS256 (RSA Signature with SHA-256) signing algorithm is supported.
     * Required
     * Modifiable
     *
     * @generated from protobuf field: string jwks_url = 4
     */
    jwksUrl: string
    /**
     * Specifies the audience of the JWT token.
     * When set, the callers using JWT tokens issued by this identity provider are allowed to get an access
     * only if the "aud" claim includes the string specified here
     * Optional,
     * Modifiable
     *
     * @generated from protobuf field: string audience = 5
     */
    audience: string
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.CreateIdentityProviderConfigRequest
 */
export interface CreateIdentityProviderConfigRequest {
    /**
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1
     */
    identityProviderConfig?: IdentityProviderConfig
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.CreateIdentityProviderConfigResponse
 */
export interface CreateIdentityProviderConfigResponse {
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1
     */
    identityProviderConfig?: IdentityProviderConfig
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GetIdentityProviderConfigRequest
 */
export interface GetIdentityProviderConfigRequest {
    /**
     * Required
     *
     * @generated from protobuf field: string identity_provider_id = 1
     */
    identityProviderId: string
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GetIdentityProviderConfigResponse
 */
export interface GetIdentityProviderConfigResponse {
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1
     */
    identityProviderConfig?: IdentityProviderConfig
}
/**
 * Pagination is not required as the resulting data set is small enough to be returned in a single call
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListIdentityProviderConfigsRequest
 */
export interface ListIdentityProviderConfigsRequest {}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListIdentityProviderConfigsResponse
 */
export interface ListIdentityProviderConfigsResponse {
    /**
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_configs = 1
     */
    identityProviderConfigs: IdentityProviderConfig[]
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UpdateIdentityProviderConfigRequest
 */
export interface UpdateIdentityProviderConfigRequest {
    /**
     * The identity provider config to update.
     * Required,
     * Modifiable
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1
     */
    identityProviderConfig?: IdentityProviderConfig
    /**
     * An update mask specifies how and which properties of the ``IdentityProviderConfig`` message are to be updated.
     * An update mask consists of a set of update paths.
     * A valid update path points to a field or a subfield relative to the ``IdentityProviderConfig`` message.
     * A valid update mask must:
     *
     * 1. contain at least one update path,
     * 2. contain only valid update paths.
     *
     * Fields that can be updated are marked as ``Modifiable``.
     * For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
     * Required
     *
     * @generated from protobuf field: google.protobuf.FieldMask update_mask = 2
     */
    updateMask?: FieldMask
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UpdateIdentityProviderConfigResponse
 */
export interface UpdateIdentityProviderConfigResponse {
    /**
     * Updated identity provider config
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1
     */
    identityProviderConfig?: IdentityProviderConfig
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.DeleteIdentityProviderConfigRequest
 */
export interface DeleteIdentityProviderConfigRequest {
    /**
     * The identity provider config to delete.
     * Required
     *
     * @generated from protobuf field: string identity_provider_id = 1
     */
    identityProviderId: string
}
/**
 * Does not (yet) contain any data.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.DeleteIdentityProviderConfigResponse
 */
export interface DeleteIdentityProviderConfigResponse {}
// @generated message type with reflection information, may provide speed optimized methods
class IdentityProviderConfig$Type extends MessageType<IdentityProviderConfig> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.IdentityProviderConfig', [
            {
                no: 1,
                name: 'identity_provider_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'is_deactivated',
                kind: 'scalar',
                T: 8 /*ScalarType.BOOL*/,
            },
            {
                no: 3,
                name: 'issuer',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 4,
                name: 'jwks_url',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 5,
                name: 'audience',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(
        value?: PartialMessage<IdentityProviderConfig>
    ): IdentityProviderConfig {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.identityProviderId = ''
        message.isDeactivated = false
        message.issuer = ''
        message.jwksUrl = ''
        message.audience = ''
        if (value !== undefined)
            reflectionMergePartial<IdentityProviderConfig>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: IdentityProviderConfig
    ): IdentityProviderConfig {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string identity_provider_id */ 1:
                    message.identityProviderId = reader.string()
                    break
                case /* bool is_deactivated */ 2:
                    message.isDeactivated = reader.bool()
                    break
                case /* string issuer */ 3:
                    message.issuer = reader.string()
                    break
                case /* string jwks_url */ 4:
                    message.jwksUrl = reader.string()
                    break
                case /* string audience */ 5:
                    message.audience = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: IdentityProviderConfig,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string identity_provider_id = 1; */
        if (message.identityProviderId !== '')
            writer
                .tag(1, WireType.LengthDelimited)
                .string(message.identityProviderId)
        /* bool is_deactivated = 2; */
        if (message.isDeactivated !== false)
            writer.tag(2, WireType.Varint).bool(message.isDeactivated)
        /* string issuer = 3; */
        if (message.issuer !== '')
            writer.tag(3, WireType.LengthDelimited).string(message.issuer)
        /* string jwks_url = 4; */
        if (message.jwksUrl !== '')
            writer.tag(4, WireType.LengthDelimited).string(message.jwksUrl)
        /* string audience = 5; */
        if (message.audience !== '')
            writer.tag(5, WireType.LengthDelimited).string(message.audience)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.IdentityProviderConfig
 */
export const IdentityProviderConfig = new IdentityProviderConfig$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CreateIdentityProviderConfigRequest$Type extends MessageType<CreateIdentityProviderConfigRequest> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.CreateIdentityProviderConfigRequest',
            [
                {
                    no: 1,
                    name: 'identity_provider_config',
                    kind: 'message',
                    T: () => IdentityProviderConfig,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<CreateIdentityProviderConfigRequest>
    ): CreateIdentityProviderConfigRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<CreateIdentityProviderConfigRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: CreateIdentityProviderConfigRequest
    ): CreateIdentityProviderConfigRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config */ 1:
                    message.identityProviderConfig =
                        IdentityProviderConfig.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.identityProviderConfig
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: CreateIdentityProviderConfigRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1; */
        if (message.identityProviderConfig)
            IdentityProviderConfig.internalBinaryWrite(
                message.identityProviderConfig,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.CreateIdentityProviderConfigRequest
 */
export const CreateIdentityProviderConfigRequest =
    new CreateIdentityProviderConfigRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CreateIdentityProviderConfigResponse$Type extends MessageType<CreateIdentityProviderConfigResponse> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.CreateIdentityProviderConfigResponse',
            [
                {
                    no: 1,
                    name: 'identity_provider_config',
                    kind: 'message',
                    T: () => IdentityProviderConfig,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<CreateIdentityProviderConfigResponse>
    ): CreateIdentityProviderConfigResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<CreateIdentityProviderConfigResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: CreateIdentityProviderConfigResponse
    ): CreateIdentityProviderConfigResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config */ 1:
                    message.identityProviderConfig =
                        IdentityProviderConfig.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.identityProviderConfig
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: CreateIdentityProviderConfigResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1; */
        if (message.identityProviderConfig)
            IdentityProviderConfig.internalBinaryWrite(
                message.identityProviderConfig,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.CreateIdentityProviderConfigResponse
 */
export const CreateIdentityProviderConfigResponse =
    new CreateIdentityProviderConfigResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GetIdentityProviderConfigRequest$Type extends MessageType<GetIdentityProviderConfigRequest> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.GetIdentityProviderConfigRequest', [
            {
                no: 1,
                name: 'identity_provider_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(
        value?: PartialMessage<GetIdentityProviderConfigRequest>
    ): GetIdentityProviderConfigRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.identityProviderId = ''
        if (value !== undefined)
            reflectionMergePartial<GetIdentityProviderConfigRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GetIdentityProviderConfigRequest
    ): GetIdentityProviderConfigRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string identity_provider_id */ 1:
                    message.identityProviderId = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GetIdentityProviderConfigRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string identity_provider_id = 1; */
        if (message.identityProviderId !== '')
            writer
                .tag(1, WireType.LengthDelimited)
                .string(message.identityProviderId)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GetIdentityProviderConfigRequest
 */
export const GetIdentityProviderConfigRequest =
    new GetIdentityProviderConfigRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GetIdentityProviderConfigResponse$Type extends MessageType<GetIdentityProviderConfigResponse> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.GetIdentityProviderConfigResponse',
            [
                {
                    no: 1,
                    name: 'identity_provider_config',
                    kind: 'message',
                    T: () => IdentityProviderConfig,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<GetIdentityProviderConfigResponse>
    ): GetIdentityProviderConfigResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<GetIdentityProviderConfigResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GetIdentityProviderConfigResponse
    ): GetIdentityProviderConfigResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config */ 1:
                    message.identityProviderConfig =
                        IdentityProviderConfig.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.identityProviderConfig
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GetIdentityProviderConfigResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1; */
        if (message.identityProviderConfig)
            IdentityProviderConfig.internalBinaryWrite(
                message.identityProviderConfig,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GetIdentityProviderConfigResponse
 */
export const GetIdentityProviderConfigResponse =
    new GetIdentityProviderConfigResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListIdentityProviderConfigsRequest$Type extends MessageType<ListIdentityProviderConfigsRequest> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.ListIdentityProviderConfigsRequest',
            []
        )
    }
    create(
        value?: PartialMessage<ListIdentityProviderConfigsRequest>
    ): ListIdentityProviderConfigsRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListIdentityProviderConfigsRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListIdentityProviderConfigsRequest
    ): ListIdentityProviderConfigsRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListIdentityProviderConfigsRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListIdentityProviderConfigsRequest
 */
export const ListIdentityProviderConfigsRequest =
    new ListIdentityProviderConfigsRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListIdentityProviderConfigsResponse$Type extends MessageType<ListIdentityProviderConfigsResponse> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.ListIdentityProviderConfigsResponse',
            [
                {
                    no: 1,
                    name: 'identity_provider_configs',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => IdentityProviderConfig,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListIdentityProviderConfigsResponse>
    ): ListIdentityProviderConfigsResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.identityProviderConfigs = []
        if (value !== undefined)
            reflectionMergePartial<ListIdentityProviderConfigsResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListIdentityProviderConfigsResponse
    ): ListIdentityProviderConfigsResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_configs */ 1:
                    message.identityProviderConfigs.push(
                        IdentityProviderConfig.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListIdentityProviderConfigsResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_configs = 1; */
        for (let i = 0; i < message.identityProviderConfigs.length; i++)
            IdentityProviderConfig.internalBinaryWrite(
                message.identityProviderConfigs[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListIdentityProviderConfigsResponse
 */
export const ListIdentityProviderConfigsResponse =
    new ListIdentityProviderConfigsResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIdentityProviderConfigRequest$Type extends MessageType<UpdateIdentityProviderConfigRequest> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.UpdateIdentityProviderConfigRequest',
            [
                {
                    no: 1,
                    name: 'identity_provider_config',
                    kind: 'message',
                    T: () => IdentityProviderConfig,
                },
                {
                    no: 2,
                    name: 'update_mask',
                    kind: 'message',
                    T: () => FieldMask,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<UpdateIdentityProviderConfigRequest>
    ): UpdateIdentityProviderConfigRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<UpdateIdentityProviderConfigRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: UpdateIdentityProviderConfigRequest
    ): UpdateIdentityProviderConfigRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config */ 1:
                    message.identityProviderConfig =
                        IdentityProviderConfig.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.identityProviderConfig
                        )
                    break
                case /* google.protobuf.FieldMask update_mask */ 2:
                    message.updateMask = FieldMask.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.updateMask
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: UpdateIdentityProviderConfigRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1; */
        if (message.identityProviderConfig)
            IdentityProviderConfig.internalBinaryWrite(
                message.identityProviderConfig,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.FieldMask update_mask = 2; */
        if (message.updateMask)
            FieldMask.internalBinaryWrite(
                message.updateMask,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UpdateIdentityProviderConfigRequest
 */
export const UpdateIdentityProviderConfigRequest =
    new UpdateIdentityProviderConfigRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIdentityProviderConfigResponse$Type extends MessageType<UpdateIdentityProviderConfigResponse> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.UpdateIdentityProviderConfigResponse',
            [
                {
                    no: 1,
                    name: 'identity_provider_config',
                    kind: 'message',
                    T: () => IdentityProviderConfig,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<UpdateIdentityProviderConfigResponse>
    ): UpdateIdentityProviderConfigResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<UpdateIdentityProviderConfigResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: UpdateIdentityProviderConfigResponse
    ): UpdateIdentityProviderConfigResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config */ 1:
                    message.identityProviderConfig =
                        IdentityProviderConfig.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.identityProviderConfig
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: UpdateIdentityProviderConfigResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.IdentityProviderConfig identity_provider_config = 1; */
        if (message.identityProviderConfig)
            IdentityProviderConfig.internalBinaryWrite(
                message.identityProviderConfig,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UpdateIdentityProviderConfigResponse
 */
export const UpdateIdentityProviderConfigResponse =
    new UpdateIdentityProviderConfigResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class DeleteIdentityProviderConfigRequest$Type extends MessageType<DeleteIdentityProviderConfigRequest> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.DeleteIdentityProviderConfigRequest',
            [
                {
                    no: 1,
                    name: 'identity_provider_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<DeleteIdentityProviderConfigRequest>
    ): DeleteIdentityProviderConfigRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.identityProviderId = ''
        if (value !== undefined)
            reflectionMergePartial<DeleteIdentityProviderConfigRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: DeleteIdentityProviderConfigRequest
    ): DeleteIdentityProviderConfigRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string identity_provider_id */ 1:
                    message.identityProviderId = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: DeleteIdentityProviderConfigRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string identity_provider_id = 1; */
        if (message.identityProviderId !== '')
            writer
                .tag(1, WireType.LengthDelimited)
                .string(message.identityProviderId)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.DeleteIdentityProviderConfigRequest
 */
export const DeleteIdentityProviderConfigRequest =
    new DeleteIdentityProviderConfigRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class DeleteIdentityProviderConfigResponse$Type extends MessageType<DeleteIdentityProviderConfigResponse> {
    constructor() {
        super(
            'com.daml.ledger.api.v2.admin.DeleteIdentityProviderConfigResponse',
            []
        )
    }
    create(
        value?: PartialMessage<DeleteIdentityProviderConfigResponse>
    ): DeleteIdentityProviderConfigResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<DeleteIdentityProviderConfigResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: DeleteIdentityProviderConfigResponse
    ): DeleteIdentityProviderConfigResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: DeleteIdentityProviderConfigResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.DeleteIdentityProviderConfigResponse
 */
export const DeleteIdentityProviderConfigResponse =
    new DeleteIdentityProviderConfigResponse$Type()
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.admin.IdentityProviderConfigService
 */
export const IdentityProviderConfigService = new ServiceType(
    'com.daml.ledger.api.v2.admin.IdentityProviderConfigService',
    [
        {
            name: 'CreateIdentityProviderConfig',
            options: {},
            I: CreateIdentityProviderConfigRequest,
            O: CreateIdentityProviderConfigResponse,
        },
        {
            name: 'GetIdentityProviderConfig',
            options: {},
            I: GetIdentityProviderConfigRequest,
            O: GetIdentityProviderConfigResponse,
        },
        {
            name: 'UpdateIdentityProviderConfig',
            options: {},
            I: UpdateIdentityProviderConfigRequest,
            O: UpdateIdentityProviderConfigResponse,
        },
        {
            name: 'ListIdentityProviderConfigs',
            options: {},
            I: ListIdentityProviderConfigsRequest,
            O: ListIdentityProviderConfigsResponse,
        },
        {
            name: 'DeleteIdentityProviderConfig',
            options: {},
            I: DeleteIdentityProviderConfigRequest,
            O: DeleteIdentityProviderConfigResponse,
        },
    ]
)
