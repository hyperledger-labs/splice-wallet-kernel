// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/crypto.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.SigningPublicKey
 */
export interface SigningPublicKey {
    /**
     * The serialization format of the public key
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.CryptoKeyFormat format = 1
     */
    format: CryptoKeyFormat
    /**
     * Serialized public key in the format specified above
     *
     * @generated from protobuf field: bytes key_data = 2
     */
    keyData: Uint8Array
    /**
     * The key specification
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.SigningKeySpec key_spec = 3
     */
    keySpec: SigningKeySpec
}
// Note: these crypto data types are a subset of the ones used internally by Canton.
// They have been forked from the respective com.digitalasset.canton.crypto.v30 package.

/**
 * @generated from protobuf enum com.daml.ledger.api.v2.SigningKeySpec
 */
export enum SigningKeySpec {
    /**
     * @generated from protobuf enum value: SIGNING_KEY_SPEC_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Elliptic Curve Key from Curve25519
     * as defined in http://ed25519.cr.yp.to/
     *
     * @generated from protobuf enum value: SIGNING_KEY_SPEC_EC_CURVE25519 = 1;
     */
    EC_CURVE25519 = 1,
    /**
     * Elliptic Curve Key from the NIST P-256 curve (aka secp256r1)
     * as defined in https://doi.org/10.6028/NIST.FIPS.186-4
     *
     * @generated from protobuf enum value: SIGNING_KEY_SPEC_EC_P256 = 2;
     */
    EC_P256 = 2,
    /**
     * Elliptic Curve Key from the NIST P-384 curve (aka secp384r1)
     * as defined in https://doi.org/10.6028/NIST.FIPS.186-4
     *
     * @generated from protobuf enum value: SIGNING_KEY_SPEC_EC_P384 = 3;
     */
    EC_P384 = 3,
    /**
     * Elliptic Curve Key from SECG P256k1 curve (aka secp256k1)
     * commonly used in bitcoin and ethereum
     * as defined in https://www.secg.org/sec2-v2.pdf
     *
     * @generated from protobuf enum value: SIGNING_KEY_SPEC_EC_SECP256K1 = 4;
     */
    EC_SECP256K1 = 4,
}
/**
 * Serialization format for crypto keys and signatures
 *
 * @generated from protobuf enum com.daml.ledger.api.v2.CryptoKeyFormat
 */
export enum CryptoKeyFormat {
    /**
     * @generated from protobuf enum value: CRYPTO_KEY_FORMAT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * ASN.1 + DER encoding
     * Legacy format no longer used, except for migrations
     *
     * @generated from protobuf enum value: CRYPTO_KEY_FORMAT_DER = 1;
     */
    DER = 1,
    /**
     * Raw encoding of a key
     *
     * @generated from protobuf enum value: CRYPTO_KEY_FORMAT_RAW = 2;
     */
    RAW = 2,
    /**
     * ASN.1 + DER-encoding of X.509 SubjectPublicKeyInfo structure: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1
     *
     * @generated from protobuf enum value: CRYPTO_KEY_FORMAT_DER_X509_SUBJECT_PUBLIC_KEY_INFO = 3;
     */
    DER_X509_SUBJECT_PUBLIC_KEY_INFO = 3,
}
// @generated message type with reflection information, may provide speed optimized methods
class SigningPublicKey$Type extends MessageType<SigningPublicKey> {
    constructor() {
        super('com.daml.ledger.api.v2.SigningPublicKey', [
            {
                no: 1,
                name: 'format',
                kind: 'enum',
                T: () => [
                    'com.daml.ledger.api.v2.CryptoKeyFormat',
                    CryptoKeyFormat,
                    'CRYPTO_KEY_FORMAT_',
                ],
            },
            {
                no: 2,
                name: 'key_data',
                kind: 'scalar',
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 3,
                name: 'key_spec',
                kind: 'enum',
                T: () => [
                    'com.daml.ledger.api.v2.SigningKeySpec',
                    SigningKeySpec,
                    'SIGNING_KEY_SPEC_',
                ],
            },
        ])
    }
    create(value?: PartialMessage<SigningPublicKey>): SigningPublicKey {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.format = 0
        message.keyData = new Uint8Array(0)
        message.keySpec = 0
        if (value !== undefined)
            reflectionMergePartial<SigningPublicKey>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: SigningPublicKey
    ): SigningPublicKey {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.CryptoKeyFormat format */ 1:
                    message.format = reader.int32()
                    break
                case /* bytes key_data */ 2:
                    message.keyData = reader.bytes()
                    break
                case /* com.daml.ledger.api.v2.SigningKeySpec key_spec */ 3:
                    message.keySpec = reader.int32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: SigningPublicKey,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.CryptoKeyFormat format = 1; */
        if (message.format !== 0)
            writer.tag(1, WireType.Varint).int32(message.format)
        /* bytes key_data = 2; */
        if (message.keyData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.keyData)
        /* com.daml.ledger.api.v2.SigningKeySpec key_spec = 3; */
        if (message.keySpec !== 0)
            writer.tag(3, WireType.Varint).int32(message.keySpec)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.SigningPublicKey
 */
export const SigningPublicKey = new SigningPublicKey$Type()
