// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/trace_context.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.TraceContext
 */
export interface TraceContext {
    /**
     * https://www.w3.org/TR/trace-context/
     *
     * @generated from protobuf field: optional string traceparent = 1
     */
    traceparent?: string
    /**
     * @generated from protobuf field: optional string tracestate = 2
     */
    tracestate?: string
}
// @generated message type with reflection information, may provide speed optimized methods
class TraceContext$Type extends MessageType<TraceContext> {
    constructor() {
        super('com.daml.ledger.api.v2.TraceContext', [
            {
                no: 1,
                name: 'traceparent',
                kind: 'scalar',
                opt: true,
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'tracestate',
                kind: 'scalar',
                opt: true,
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(value?: PartialMessage<TraceContext>): TraceContext {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<TraceContext>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: TraceContext
    ): TraceContext {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* optional string traceparent */ 1:
                    message.traceparent = reader.string()
                    break
                case /* optional string tracestate */ 2:
                    message.tracestate = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: TraceContext,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* optional string traceparent = 1; */
        if (message.traceparent !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.traceparent)
        /* optional string tracestate = 2; */
        if (message.tracestate !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.tracestate)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.TraceContext
 */
export const TraceContext = new TraceContext$Type()
