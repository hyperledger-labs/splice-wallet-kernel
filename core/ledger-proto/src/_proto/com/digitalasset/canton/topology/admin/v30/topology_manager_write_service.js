// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/digitalasset/canton/topology/admin/v30/topology_manager_write_service.proto" (package "com.digitalasset.canton.topology.admin.v30", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import { WireType } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { StoreId_Temporary } from './common.js'
import { SignedTopologyTransaction } from '../../../protocol/v30/topology.js'
import { Duration } from '../../../../../../google/protobuf/duration.js'
import { StoreId } from './common.js'
import { TopologyMapping } from '../../../protocol/v30/topology.js'
import { Enums_TopologyChangeOp } from '../../../protocol/v30/topology.js'
/**
 * @generated from protobuf enum com.digitalasset.canton.topology.admin.v30.ForceFlag
 */
export var ForceFlag
;(function (ForceFlag) {
    /**
     * @generated from protobuf enum value: FORCE_FLAG_UNSPECIFIED = 0;
     */
    ForceFlag[(ForceFlag['UNSPECIFIED'] = 0)] = 'UNSPECIFIED'
    /**
     * * Required when authorizing adding a topology transaction on behalf of another node.
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALIEN_MEMBER = 1;
     */
    ForceFlag[(ForceFlag['ALIEN_MEMBER'] = 1)] = 'ALIEN_MEMBER'
    /**
     * Deprecated, increasing ledger time record time tolerance does not require a force flag for PV >= 32
     *
     * @generated from protobuf enum value: FORCE_FLAG_LEDGER_TIME_RECORD_TIME_TOLERANCE_INCREASE = 2;
     */
    ForceFlag[(ForceFlag['LEDGER_TIME_RECORD_TIME_TOLERANCE_INCREASE'] = 2)] =
        'LEDGER_TIME_RECORD_TIME_TOLERANCE_INCREASE'
    /**
     * * Required when revoking the vetting of a package
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_UNVET_PACKAGE = 3;
     */
    ForceFlag[(ForceFlag['ALLOW_UNVET_PACKAGE'] = 3)] = 'ALLOW_UNVET_PACKAGE'
    /**
     * * Required when vetting unknown packages (not uploaded).
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_UNKNOWN_PACKAGE = 4;
     */
    ForceFlag[(ForceFlag['ALLOW_UNKNOWN_PACKAGE'] = 4)] =
        'ALLOW_UNKNOWN_PACKAGE'
    /**
     * * Required when vetting a package with unvetted dependencies
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_UNVETTED_DEPENDENCIES = 5;
     */
    ForceFlag[(ForceFlag['ALLOW_UNVETTED_DEPENDENCIES'] = 5)] =
        'ALLOW_UNVETTED_DEPENDENCIES'
    /**
     * * Required when disabling a party with active contracts
     *
     * @generated from protobuf enum value: FORCE_FLAG_DISABLE_PARTY_WITH_ACTIVE_CONTRACTS = 6;
     */
    ForceFlag[(ForceFlag['DISABLE_PARTY_WITH_ACTIVE_CONTRACTS'] = 6)] =
        'DISABLE_PARTY_WITH_ACTIVE_CONTRACTS'
    /**
     * *
     * Required when using a key that is not suitable to sign a topology transaction.
     * Using this force flag likely causes the transaction to be rejected at a later stage of the processing.
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_UNVALIDATED_SIGNING_KEYS = 7;
     */
    ForceFlag[(ForceFlag['ALLOW_UNVALIDATED_SIGNING_KEYS'] = 7)] =
        'ALLOW_UNVALIDATED_SIGNING_KEYS'
    /**
     * * Required when unvetting a package with active contracts
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_UNVET_PACKAGE_WITH_ACTIVE_CONTRACTS = 8;
     */
    ForceFlag[(ForceFlag['ALLOW_UNVET_PACKAGE_WITH_ACTIVE_CONTRACTS'] = 8)] =
        'ALLOW_UNVET_PACKAGE_WITH_ACTIVE_CONTRACTS'
    /**
     * * Required when increasing the submission time record time tolerance
     *
     * @generated from protobuf enum value: FORCE_FLAG_PREPARATION_TIME_RECORD_TIME_TOLERANCE_INCREASE = 9;
     */
    ForceFlag[
        (ForceFlag['PREPARATION_TIME_RECORD_TIME_TOLERANCE_INCREASE'] = 9)
    ] = 'PREPARATION_TIME_RECORD_TIME_TOLERANCE_INCREASE'
    /**
     * * Required when we want to change all participants' permissions to observation while the party is still a signatory of a contract.
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_INSUFFICIENT_PARTICIPANT_PERMISSION_FOR_SIGNATORY_PARTY = 10;
     */
    ForceFlag[
        (ForceFlag[
            'ALLOW_INSUFFICIENT_PARTICIPANT_PERMISSION_FOR_SIGNATORY_PARTY'
        ] = 10)
    ] = 'ALLOW_INSUFFICIENT_PARTICIPANT_PERMISSION_FOR_SIGNATORY_PARTY'
    /**
     * * Required when changing the party-to-participant mapping, that would result in insufficient
     * signatory-assigning participants and thus the assignment would be stuck.
     *
     * @generated from protobuf enum value: FORCE_FLAG_ALLOW_INSUFFICIENT_SIGNATORY_ASSIGNING_PARTICIPANTS_FOR_PARTY = 11;
     */
    ForceFlag[
        (ForceFlag[
            'ALLOW_INSUFFICIENT_SIGNATORY_ASSIGNING_PARTICIPANTS_FOR_PARTY'
        ] = 11)
    ] = 'ALLOW_INSUFFICIENT_SIGNATORY_ASSIGNING_PARTICIPANTS_FOR_PARTY'
})(ForceFlag || (ForceFlag = {}))
// @generated message type with reflection information, may provide speed optimized methods
class GenerateTransactionsRequest$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest',
            [
                {
                    no: 1,
                    name: 'proposals',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => GenerateTransactionsRequest_Proposal,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.proposals = []
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal proposals */ 1:
                    message.proposals.push(
                        GenerateTransactionsRequest_Proposal.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal proposals = 1; */
        for (let i = 0; i < message.proposals.length; i++)
            GenerateTransactionsRequest_Proposal.internalBinaryWrite(
                message.proposals[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest
 */
export const GenerateTransactionsRequest =
    new GenerateTransactionsRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GenerateTransactionsRequest_Proposal$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal',
            [
                {
                    no: 1,
                    name: 'operation',
                    kind: 'enum',
                    T: () => [
                        'com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp',
                        Enums_TopologyChangeOp,
                        'TOPOLOGY_CHANGE_OP_',
                    ],
                },
                {
                    no: 2,
                    name: 'serial',
                    kind: 'scalar',
                    T: 13 /*ScalarType.UINT32*/,
                },
                {
                    no: 3,
                    name: 'mapping',
                    kind: 'message',
                    T: () => TopologyMapping,
                },
                { no: 4, name: 'store', kind: 'message', T: () => StoreId },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.operation = 0
        message.serial = 0
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation */ 1:
                    message.operation = reader.int32()
                    break
                case /* uint32 serial */ 2:
                    message.serial = reader.uint32()
                    break
                case /* com.digitalasset.canton.protocol.v30.TopologyMapping mapping */ 3:
                    message.mapping = TopologyMapping.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.mapping
                    )
                    break
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 4:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation = 1; */
        if (message.operation !== 0)
            writer.tag(1, WireType.Varint).int32(message.operation)
        /* uint32 serial = 2; */
        if (message.serial !== 0)
            writer.tag(2, WireType.Varint).uint32(message.serial)
        /* com.digitalasset.canton.protocol.v30.TopologyMapping mapping = 3; */
        if (message.mapping)
            TopologyMapping.internalBinaryWrite(
                message.mapping,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 4; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal
 */
export const GenerateTransactionsRequest_Proposal =
    new GenerateTransactionsRequest_Proposal$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GenerateTransactionsResponse$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse',
            [
                {
                    no: 1,
                    name: 'generated_transactions',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => GenerateTransactionsResponse_GeneratedTransaction,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.generatedTransactions = []
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.GeneratedTransaction generated_transactions */ 1:
                    message.generatedTransactions.push(
                        GenerateTransactionsResponse_GeneratedTransaction.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.GeneratedTransaction generated_transactions = 1; */
        for (let i = 0; i < message.generatedTransactions.length; i++)
            GenerateTransactionsResponse_GeneratedTransaction.internalBinaryWrite(
                message.generatedTransactions[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse
 */
export const GenerateTransactionsResponse =
    new GenerateTransactionsResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GenerateTransactionsResponse_GeneratedTransaction$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.GeneratedTransaction',
            [
                {
                    no: 1,
                    name: 'serialized_transaction',
                    kind: 'scalar',
                    T: 12 /*ScalarType.BYTES*/,
                },
                {
                    no: 2,
                    name: 'transaction_hash',
                    kind: 'scalar',
                    T: 12 /*ScalarType.BYTES*/,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.serializedTransaction = new Uint8Array(0)
        message.transactionHash = new Uint8Array(0)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes serialized_transaction */ 1:
                    message.serializedTransaction = reader.bytes()
                    break
                case /* bytes transaction_hash */ 2:
                    message.transactionHash = reader.bytes()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes serialized_transaction = 1; */
        if (message.serializedTransaction.length)
            writer
                .tag(1, WireType.LengthDelimited)
                .bytes(message.serializedTransaction)
        /* bytes transaction_hash = 2; */
        if (message.transactionHash.length)
            writer
                .tag(2, WireType.LengthDelimited)
                .bytes(message.transactionHash)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.GeneratedTransaction
 */
export const GenerateTransactionsResponse_GeneratedTransaction =
    new GenerateTransactionsResponse_GeneratedTransaction$Type()
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizeRequest$Type extends MessageType {
    constructor() {
        super('com.digitalasset.canton.topology.admin.v30.AuthorizeRequest', [
            {
                no: 1,
                name: 'proposal',
                kind: 'message',
                oneof: 'type',
                T: () => AuthorizeRequest_Proposal,
            },
            {
                no: 2,
                name: 'transaction_hash',
                kind: 'scalar',
                oneof: 'type',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 3,
                name: 'must_fully_authorize',
                kind: 'scalar',
                T: 8 /*ScalarType.BOOL*/,
            },
            {
                no: 4,
                name: 'force_changes',
                kind: 'enum',
                repeat: 1 /*RepeatType.PACKED*/,
                T: () => [
                    'com.digitalasset.canton.topology.admin.v30.ForceFlag',
                    ForceFlag,
                    'FORCE_FLAG_',
                ],
            },
            {
                no: 5,
                name: 'signed_by',
                kind: 'scalar',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: 9 /*ScalarType.STRING*/,
            },
            { no: 6, name: 'store', kind: 'message', T: () => StoreId },
            {
                no: 7,
                name: 'wait_to_become_effective',
                kind: 'message',
                T: () => Duration,
            },
        ])
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.type = { oneofKind: undefined }
        message.mustFullyAuthorize = false
        message.forceChanges = []
        message.signedBy = []
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal proposal */ 1:
                    message.type = {
                        oneofKind: 'proposal',
                        proposal: AuthorizeRequest_Proposal.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.type.proposal
                        ),
                    }
                    break
                case /* string transaction_hash */ 2:
                    message.type = {
                        oneofKind: 'transactionHash',
                        transactionHash: reader.string(),
                    }
                    break
                case /* bool must_fully_authorize */ 3:
                    message.mustFullyAuthorize = reader.bool()
                    break
                case /* repeated com.digitalasset.canton.topology.admin.v30.ForceFlag force_changes */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (
                            let e = reader.int32() + reader.pos;
                            reader.pos < e;

                        )
                            message.forceChanges.push(reader.int32())
                    else message.forceChanges.push(reader.int32())
                    break
                case /* repeated string signed_by */ 5:
                    message.signedBy.push(reader.string())
                    break
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 6:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                case /* google.protobuf.Duration wait_to_become_effective */ 7:
                    message.waitToBecomeEffective = Duration.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.waitToBecomeEffective
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal proposal = 1; */
        if (message.type.oneofKind === 'proposal')
            AuthorizeRequest_Proposal.internalBinaryWrite(
                message.type.proposal,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string transaction_hash = 2; */
        if (message.type.oneofKind === 'transactionHash')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.type.transactionHash)
        /* bool must_fully_authorize = 3; */
        if (message.mustFullyAuthorize !== false)
            writer.tag(3, WireType.Varint).bool(message.mustFullyAuthorize)
        /* repeated com.digitalasset.canton.topology.admin.v30.ForceFlag force_changes = 4; */
        if (message.forceChanges.length) {
            writer.tag(4, WireType.LengthDelimited).fork()
            for (let i = 0; i < message.forceChanges.length; i++)
                writer.int32(message.forceChanges[i])
            writer.join()
        }
        /* repeated string signed_by = 5; */
        for (let i = 0; i < message.signedBy.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.signedBy[i])
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 6; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(6, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Duration wait_to_become_effective = 7; */
        if (message.waitToBecomeEffective)
            Duration.internalBinaryWrite(
                message.waitToBecomeEffective,
                writer.tag(7, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.AuthorizeRequest
 */
export const AuthorizeRequest = new AuthorizeRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizeRequest_Proposal$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal',
            [
                {
                    no: 1,
                    name: 'change',
                    kind: 'enum',
                    T: () => [
                        'com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp',
                        Enums_TopologyChangeOp,
                        'TOPOLOGY_CHANGE_OP_',
                    ],
                },
                {
                    no: 2,
                    name: 'serial',
                    kind: 'scalar',
                    T: 13 /*ScalarType.UINT32*/,
                },
                {
                    no: 3,
                    name: 'mapping',
                    kind: 'message',
                    T: () => TopologyMapping,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.change = 0
        message.serial = 0
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp change */ 1:
                    message.change = reader.int32()
                    break
                case /* uint32 serial */ 2:
                    message.serial = reader.uint32()
                    break
                case /* com.digitalasset.canton.protocol.v30.TopologyMapping mapping */ 3:
                    message.mapping = TopologyMapping.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.mapping
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp change = 1; */
        if (message.change !== 0)
            writer.tag(1, WireType.Varint).int32(message.change)
        /* uint32 serial = 2; */
        if (message.serial !== 0)
            writer.tag(2, WireType.Varint).uint32(message.serial)
        /* com.digitalasset.canton.protocol.v30.TopologyMapping mapping = 3; */
        if (message.mapping)
            TopologyMapping.internalBinaryWrite(
                message.mapping,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal
 */
export const AuthorizeRequest_Proposal = new AuthorizeRequest_Proposal$Type()
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizeResponse$Type extends MessageType {
    constructor() {
        super('com.digitalasset.canton.topology.admin.v30.AuthorizeResponse', [
            {
                no: 1,
                name: 'transaction',
                kind: 'message',
                T: () => SignedTopologyTransaction,
            },
        ])
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transaction */ 1:
                    message.transaction =
                        SignedTopologyTransaction.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.transaction
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transaction = 1; */
        if (message.transaction)
            SignedTopologyTransaction.internalBinaryWrite(
                message.transaction,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.AuthorizeResponse
 */
export const AuthorizeResponse = new AuthorizeResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class AddTransactionsRequest$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.AddTransactionsRequest',
            [
                {
                    no: 1,
                    name: 'transactions',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => SignedTopologyTransaction,
                },
                {
                    no: 2,
                    name: 'force_changes',
                    kind: 'enum',
                    repeat: 1 /*RepeatType.PACKED*/,
                    T: () => [
                        'com.digitalasset.canton.topology.admin.v30.ForceFlag',
                        ForceFlag,
                        'FORCE_FLAG_',
                    ],
                },
                { no: 3, name: 'store', kind: 'message', T: () => StoreId },
                {
                    no: 7,
                    name: 'wait_to_become_effective',
                    kind: 'message',
                    T: () => Duration,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.transactions = []
        message.forceChanges = []
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transactions */ 1:
                    message.transactions.push(
                        SignedTopologyTransaction.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                case /* repeated com.digitalasset.canton.topology.admin.v30.ForceFlag force_changes */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (
                            let e = reader.int32() + reader.pos;
                            reader.pos < e;

                        )
                            message.forceChanges.push(reader.int32())
                    else message.forceChanges.push(reader.int32())
                    break
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 3:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                case /* google.protobuf.Duration wait_to_become_effective */ 7:
                    message.waitToBecomeEffective = Duration.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.waitToBecomeEffective
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            SignedTopologyTransaction.internalBinaryWrite(
                message.transactions[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated com.digitalasset.canton.topology.admin.v30.ForceFlag force_changes = 2; */
        if (message.forceChanges.length) {
            writer.tag(2, WireType.LengthDelimited).fork()
            for (let i = 0; i < message.forceChanges.length; i++)
                writer.int32(message.forceChanges[i])
            writer.join()
        }
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 3; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Duration wait_to_become_effective = 7; */
        if (message.waitToBecomeEffective)
            Duration.internalBinaryWrite(
                message.waitToBecomeEffective,
                writer.tag(7, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.AddTransactionsRequest
 */
export const AddTransactionsRequest = new AddTransactionsRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class AddTransactionsResponse$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.AddTransactionsResponse',
            []
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.AddTransactionsResponse
 */
export const AddTransactionsResponse = new AddTransactionsResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ImportTopologySnapshotRequest$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotRequest',
            [
                {
                    no: 1,
                    name: 'topology_snapshot',
                    kind: 'scalar',
                    T: 12 /*ScalarType.BYTES*/,
                },
                { no: 2, name: 'store', kind: 'message', T: () => StoreId },
                {
                    no: 3,
                    name: 'wait_to_become_effective',
                    kind: 'message',
                    T: () => Duration,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.topologySnapshot = new Uint8Array(0)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes topology_snapshot */ 1:
                    message.topologySnapshot = reader.bytes()
                    break
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 2:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                case /* google.protobuf.Duration wait_to_become_effective */ 3:
                    message.waitToBecomeEffective = Duration.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.waitToBecomeEffective
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes topology_snapshot = 1; */
        if (message.topologySnapshot.length)
            writer
                .tag(1, WireType.LengthDelimited)
                .bytes(message.topologySnapshot)
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 2; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Duration wait_to_become_effective = 3; */
        if (message.waitToBecomeEffective)
            Duration.internalBinaryWrite(
                message.waitToBecomeEffective,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotRequest
 */
export const ImportTopologySnapshotRequest =
    new ImportTopologySnapshotRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ImportTopologySnapshotResponse$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotResponse',
            []
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotResponse
 */
export const ImportTopologySnapshotResponse =
    new ImportTopologySnapshotResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class SignTransactionsRequest$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.SignTransactionsRequest',
            [
                {
                    no: 1,
                    name: 'transactions',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => SignedTopologyTransaction,
                },
                {
                    no: 2,
                    name: 'signed_by',
                    kind: 'scalar',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: 9 /*ScalarType.STRING*/,
                },
                { no: 3, name: 'store', kind: 'message', T: () => StoreId },
                {
                    no: 4,
                    name: 'force_flags',
                    kind: 'enum',
                    repeat: 1 /*RepeatType.PACKED*/,
                    T: () => [
                        'com.digitalasset.canton.topology.admin.v30.ForceFlag',
                        ForceFlag,
                        'FORCE_FLAG_',
                    ],
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.transactions = []
        message.signedBy = []
        message.forceFlags = []
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transactions */ 1:
                    message.transactions.push(
                        SignedTopologyTransaction.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                case /* repeated string signed_by */ 2:
                    message.signedBy.push(reader.string())
                    break
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 3:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                case /* repeated com.digitalasset.canton.topology.admin.v30.ForceFlag force_flags */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (
                            let e = reader.int32() + reader.pos;
                            reader.pos < e;

                        )
                            message.forceFlags.push(reader.int32())
                    else message.forceFlags.push(reader.int32())
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            SignedTopologyTransaction.internalBinaryWrite(
                message.transactions[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated string signed_by = 2; */
        for (let i = 0; i < message.signedBy.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.signedBy[i])
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 3; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated com.digitalasset.canton.topology.admin.v30.ForceFlag force_flags = 4; */
        if (message.forceFlags.length) {
            writer.tag(4, WireType.LengthDelimited).fork()
            for (let i = 0; i < message.forceFlags.length; i++)
                writer.int32(message.forceFlags[i])
            writer.join()
        }
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.SignTransactionsRequest
 */
export const SignTransactionsRequest = new SignTransactionsRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class SignTransactionsResponse$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.SignTransactionsResponse',
            [
                {
                    no: 1,
                    name: 'transactions',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => SignedTopologyTransaction,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.transactions = []
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transactions */ 1:
                    message.transactions.push(
                        SignedTopologyTransaction.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.digitalasset.canton.protocol.v30.SignedTopologyTransaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            SignedTopologyTransaction.internalBinaryWrite(
                message.transactions[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.SignTransactionsResponse
 */
export const SignTransactionsResponse = new SignTransactionsResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CreateTemporaryTopologyStoreRequest$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.CreateTemporaryTopologyStoreRequest',
            [
                {
                    no: 1,
                    name: 'name',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
                {
                    no: 2,
                    name: 'protocol_version',
                    kind: 'scalar',
                    T: 13 /*ScalarType.UINT32*/,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        message.name = ''
        message.protocolVersion = 0
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string()
                    break
                case /* uint32 protocol_version */ 2:
                    message.protocolVersion = reader.uint32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.name)
        /* uint32 protocol_version = 2; */
        if (message.protocolVersion !== 0)
            writer.tag(2, WireType.Varint).uint32(message.protocolVersion)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.CreateTemporaryTopologyStoreRequest
 */
export const CreateTemporaryTopologyStoreRequest =
    new CreateTemporaryTopologyStoreRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CreateTemporaryTopologyStoreResponse$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.CreateTemporaryTopologyStoreResponse',
            [
                {
                    no: 1,
                    name: 'store_id',
                    kind: 'message',
                    T: () => StoreId_Temporary,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.StoreId.Temporary store_id */ 1:
                    message.storeId = StoreId_Temporary.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.storeId
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* com.digitalasset.canton.topology.admin.v30.StoreId.Temporary store_id = 1; */
        if (message.storeId)
            StoreId_Temporary.internalBinaryWrite(
                message.storeId,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.CreateTemporaryTopologyStoreResponse
 */
export const CreateTemporaryTopologyStoreResponse =
    new CreateTemporaryTopologyStoreResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class DropTemporaryTopologyStoreRequest$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.DropTemporaryTopologyStoreRequest',
            [
                {
                    no: 1,
                    name: 'store_id',
                    kind: 'message',
                    T: () => StoreId_Temporary,
                },
            ]
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.StoreId.Temporary store_id */ 1:
                    message.storeId = StoreId_Temporary.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.storeId
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        /* com.digitalasset.canton.topology.admin.v30.StoreId.Temporary store_id = 1; */
        if (message.storeId)
            StoreId_Temporary.internalBinaryWrite(
                message.storeId,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.DropTemporaryTopologyStoreRequest
 */
export const DropTemporaryTopologyStoreRequest =
    new DropTemporaryTopologyStoreRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class DropTemporaryTopologyStoreResponse$Type extends MessageType {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.DropTemporaryTopologyStoreResponse',
            []
        )
    }
    create(value) {
        const message = globalThis.Object.create(this.messagePrototype)
        if (value !== undefined) reflectionMergePartial(this, message, value)
        return message
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.DropTemporaryTopologyStoreResponse
 */
export const DropTemporaryTopologyStoreResponse =
    new DropTemporaryTopologyStoreResponse$Type()
/**
 * @generated ServiceType for protobuf service com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService
 */
export const TopologyManagerWriteService = new ServiceType(
    'com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService',
    [
        {
            name: 'Authorize',
            options: {},
            I: AuthorizeRequest,
            O: AuthorizeResponse,
        },
        {
            name: 'AddTransactions',
            options: {},
            I: AddTransactionsRequest,
            O: AddTransactionsResponse,
        },
        {
            name: 'ImportTopologySnapshot',
            clientStreaming: true,
            options: {},
            I: ImportTopologySnapshotRequest,
            O: ImportTopologySnapshotResponse,
        },
        {
            name: 'SignTransactions',
            options: {},
            I: SignTransactionsRequest,
            O: SignTransactionsResponse,
        },
        {
            name: 'GenerateTransactions',
            options: {},
            I: GenerateTransactionsRequest,
            O: GenerateTransactionsResponse,
        },
        {
            name: 'CreateTemporaryTopologyStore',
            options: {},
            I: CreateTemporaryTopologyStoreRequest,
            O: CreateTemporaryTopologyStoreResponse,
        },
        {
            name: 'DropTemporaryTopologyStore',
            options: {},
            I: DropTemporaryTopologyStoreRequest,
            O: DropTemporaryTopologyStoreResponse,
        },
    ]
)
