// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/digitalasset/canton/protocol/v30/sequencing_parameters.proto" (package "com.digitalasset.canton.protocol.v30", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message com.digitalasset.canton.protocol.v30.DynamicSequencingParameters
 */
export interface DynamicSequencingParameters {
    /**
     * Sequencing dynamic synchronizer parameters can only be interpreted by a sequencer implementation
     *  and are opaque to the rest of the synchronizer.
     *
     * @generated from protobuf field: bytes payload = 1
     */
    payload: Uint8Array
}
// @generated message type with reflection information, may provide speed optimized methods
class DynamicSequencingParameters$Type extends MessageType<DynamicSequencingParameters> {
    constructor() {
        super(
            'com.digitalasset.canton.protocol.v30.DynamicSequencingParameters',
            [
                {
                    no: 1,
                    name: 'payload',
                    kind: 'scalar',
                    T: 12 /*ScalarType.BYTES*/,
                },
            ],
            {
                'scalapb.message': {
                    companionExtends: [
                        'com.digitalasset.canton.version.StableProtoVersion',
                    ],
                },
            }
        )
    }
    create(
        value?: PartialMessage<DynamicSequencingParameters>
    ): DynamicSequencingParameters {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.payload = new Uint8Array(0)
        if (value !== undefined)
            reflectionMergePartial<DynamicSequencingParameters>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: DynamicSequencingParameters
    ): DynamicSequencingParameters {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes payload */ 1:
                    message.payload = reader.bytes()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: DynamicSequencingParameters,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bytes payload = 1; */
        if (message.payload.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.payload)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.protocol.v30.DynamicSequencingParameters
 */
export const DynamicSequencingParameters =
    new DynamicSequencingParameters$Type()
