// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "google/rpc/context/audit_context.proto" (package "google.rpc.context", syntax proto3)
// tslint:disable
//
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Struct } from '../../protobuf/struct.js'
/**
 * `AuditContext` provides information that is needed for audit logging.
 *
 * @generated from protobuf message google.rpc.context.AuditContext
 */
export interface AuditContext {
    /**
     * Serialized audit log.
     *
     * @generated from protobuf field: bytes audit_log = 1
     */
    auditLog: Uint8Array
    /**
     * An API request message that is scrubbed based on the method annotation.
     * This field should only be filled if audit_log field is present.
     * Service Control will use this to assemble a complete log for Cloud Audit
     * Logs and Google internal audit logs.
     *
     * @generated from protobuf field: google.protobuf.Struct scrubbed_request = 2
     */
    scrubbedRequest?: Struct
    /**
     * An API response message that is scrubbed based on the method annotation.
     * This field should only be filled if audit_log field is present.
     * Service Control will use this to assemble a complete log for Cloud Audit
     * Logs and Google internal audit logs.
     *
     * @generated from protobuf field: google.protobuf.Struct scrubbed_response = 3
     */
    scrubbedResponse?: Struct
    /**
     * Number of scrubbed response items.
     *
     * @generated from protobuf field: int32 scrubbed_response_item_count = 4
     */
    scrubbedResponseItemCount: number
    /**
     * Audit resource name which is scrubbed.
     *
     * @generated from protobuf field: string target_resource = 5
     */
    targetResource: string
}
// @generated message type with reflection information, may provide speed optimized methods
class AuditContext$Type extends MessageType<AuditContext> {
    constructor() {
        super('google.rpc.context.AuditContext', [
            {
                no: 1,
                name: 'audit_log',
                kind: 'scalar',
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 2,
                name: 'scrubbed_request',
                kind: 'message',
                T: () => Struct,
            },
            {
                no: 3,
                name: 'scrubbed_response',
                kind: 'message',
                T: () => Struct,
            },
            {
                no: 4,
                name: 'scrubbed_response_item_count',
                kind: 'scalar',
                T: 5 /*ScalarType.INT32*/,
            },
            {
                no: 5,
                name: 'target_resource',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(value?: PartialMessage<AuditContext>): AuditContext {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.auditLog = new Uint8Array(0)
        message.scrubbedResponseItemCount = 0
        message.targetResource = ''
        if (value !== undefined)
            reflectionMergePartial<AuditContext>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: AuditContext
    ): AuditContext {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes audit_log */ 1:
                    message.auditLog = reader.bytes()
                    break
                case /* google.protobuf.Struct scrubbed_request */ 2:
                    message.scrubbedRequest = Struct.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.scrubbedRequest
                    )
                    break
                case /* google.protobuf.Struct scrubbed_response */ 3:
                    message.scrubbedResponse = Struct.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.scrubbedResponse
                    )
                    break
                case /* int32 scrubbed_response_item_count */ 4:
                    message.scrubbedResponseItemCount = reader.int32()
                    break
                case /* string target_resource */ 5:
                    message.targetResource = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: AuditContext,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bytes audit_log = 1; */
        if (message.auditLog.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.auditLog)
        /* google.protobuf.Struct scrubbed_request = 2; */
        if (message.scrubbedRequest)
            Struct.internalBinaryWrite(
                message.scrubbedRequest,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Struct scrubbed_response = 3; */
        if (message.scrubbedResponse)
            Struct.internalBinaryWrite(
                message.scrubbedResponse,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* int32 scrubbed_response_item_count = 4; */
        if (message.scrubbedResponseItemCount !== 0)
            writer
                .tag(4, WireType.Varint)
                .int32(message.scrubbedResponseItemCount)
        /* string target_resource = 5; */
        if (message.targetResource !== '')
            writer
                .tag(5, WireType.LengthDelimited)
                .string(message.targetResource)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message google.rpc.context.AuditContext
 */
export const AuditContext = new AuditContext$Type()
