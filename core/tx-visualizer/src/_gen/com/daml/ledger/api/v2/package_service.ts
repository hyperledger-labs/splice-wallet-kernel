// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/package_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.daml.ledger.api.v2.ListPackagesResponse
 */
export interface ListPackagesResponse {
    /**
     * The IDs of all Daml-LF packages supported by the server.
     * Each element must be a valid PackageIdString (as described in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: repeated string package_ids = 1
     */
    packageIds: string[];
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.GetPackageResponse
 */
export interface GetPackageResponse {
    /**
     * The hash function we use to calculate the hash.
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.HashFunction hash_function = 1
     */
    hashFunction: HashFunction;
    /**
     * Contains a ``daml_lf`` ArchivePayload. See further details in ``daml_lf.proto``.
     * Required
     *
     * @generated from protobuf field: bytes archive_payload = 2
     */
    archivePayload: Uint8Array;
    /**
     * The hash of the archive payload, can also used as a ``package_id``.
     * Must be a valid PackageIdString (as described in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: string hash = 3
     */
    hash: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.GetPackageStatusResponse
 */
export interface GetPackageStatusResponse {
    /**
     * The status of the package.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.PackageStatus package_status = 1
     */
    packageStatus: PackageStatus;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.ListPackagesRequest
 */
export interface ListPackagesRequest {
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.GetPackageRequest
 */
export interface GetPackageRequest {
    /**
     * The ID of the requested package.
     * Must be a valid PackageIdString (as described in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: string package_id = 1
     */
    packageId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.GetPackageStatusRequest
 */
export interface GetPackageStatusRequest {
    /**
     * The ID of the requested package.
     * Must be a valid PackageIdString (as described in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: string package_id = 1
     */
    packageId: string;
}
/**
 * @generated from protobuf enum com.daml.ledger.api.v2.PackageStatus
 */
export enum PackageStatus {
    /**
     * The server is not aware of such a package.
     *
     * @generated from protobuf enum value: PACKAGE_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The server is able to execute Daml commands operating on this package.
     *
     * @generated from protobuf enum value: PACKAGE_STATUS_REGISTERED = 1;
     */
    REGISTERED = 1
}
/**
 * @generated from protobuf enum com.daml.ledger.api.v2.HashFunction
 */
export enum HashFunction {
    /**
     * @generated from protobuf enum value: HASH_FUNCTION_SHA256 = 0;
     */
    SHA256 = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class ListPackagesResponse$Type extends MessageType<ListPackagesResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.ListPackagesResponse", [
            { no: 1, name: "package_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPackagesResponse>): ListPackagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packageIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListPackagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPackagesResponse): ListPackagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string package_ids */ 1:
                    message.packageIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPackagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string package_ids = 1; */
        for (let i = 0; i < message.packageIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.packageIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ListPackagesResponse
 */
export const ListPackagesResponse = new ListPackagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPackageResponse$Type extends MessageType<GetPackageResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.GetPackageResponse", [
            { no: 1, name: "hash_function", kind: "enum", T: () => ["com.daml.ledger.api.v2.HashFunction", HashFunction, "HASH_FUNCTION_"] },
            { no: 2, name: "archive_payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPackageResponse>): GetPackageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hashFunction = 0;
        message.archivePayload = new Uint8Array(0);
        message.hash = "";
        if (value !== undefined)
            reflectionMergePartial<GetPackageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPackageResponse): GetPackageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.HashFunction hash_function */ 1:
                    message.hashFunction = reader.int32();
                    break;
                case /* bytes archive_payload */ 2:
                    message.archivePayload = reader.bytes();
                    break;
                case /* string hash */ 3:
                    message.hash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPackageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.HashFunction hash_function = 1; */
        if (message.hashFunction !== 0)
            writer.tag(1, WireType.Varint).int32(message.hashFunction);
        /* bytes archive_payload = 2; */
        if (message.archivePayload.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.archivePayload);
        /* string hash = 3; */
        if (message.hash !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.GetPackageResponse
 */
export const GetPackageResponse = new GetPackageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPackageStatusResponse$Type extends MessageType<GetPackageStatusResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.GetPackageStatusResponse", [
            { no: 1, name: "package_status", kind: "enum", T: () => ["com.daml.ledger.api.v2.PackageStatus", PackageStatus, "PACKAGE_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<GetPackageStatusResponse>): GetPackageStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packageStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPackageStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPackageStatusResponse): GetPackageStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.PackageStatus package_status */ 1:
                    message.packageStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPackageStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.PackageStatus package_status = 1; */
        if (message.packageStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.packageStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.GetPackageStatusResponse
 */
export const GetPackageStatusResponse = new GetPackageStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPackagesRequest$Type extends MessageType<ListPackagesRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.ListPackagesRequest", []);
    }
    create(value?: PartialMessage<ListPackagesRequest>): ListPackagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListPackagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPackagesRequest): ListPackagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPackagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ListPackagesRequest
 */
export const ListPackagesRequest = new ListPackagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPackageRequest$Type extends MessageType<GetPackageRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.GetPackageRequest", [
            { no: 1, name: "package_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPackageRequest>): GetPackageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packageId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPackageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPackageRequest): GetPackageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string package_id */ 1:
                    message.packageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPackageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string package_id = 1; */
        if (message.packageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.packageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.GetPackageRequest
 */
export const GetPackageRequest = new GetPackageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPackageStatusRequest$Type extends MessageType<GetPackageStatusRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.GetPackageStatusRequest", [
            { no: 1, name: "package_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPackageStatusRequest>): GetPackageStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packageId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPackageStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPackageStatusRequest): GetPackageStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string package_id */ 1:
                    message.packageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPackageStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string package_id = 1; */
        if (message.packageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.packageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.GetPackageStatusRequest
 */
export const GetPackageStatusRequest = new GetPackageStatusRequest$Type();
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.PackageService
 */
export const PackageService = new ServiceType("com.daml.ledger.api.v2.PackageService", [
    { name: "ListPackages", options: {}, I: ListPackagesRequest, O: ListPackagesResponse },
    { name: "GetPackage", options: {}, I: GetPackageRequest, O: GetPackageResponse },
    { name: "GetPackageStatus", options: {}, I: GetPackageStatusRequest, O: GetPackageStatusResponse }
]);
