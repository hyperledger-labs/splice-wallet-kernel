// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/admin/participant_pruning_service.proto" (package "com.daml.ledger.api.v2.admin", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.PruneRequest
 */
export interface PruneRequest {
    /**
     * Inclusive valid absolute offset (positive integer) up to which the ledger is to be pruned.
     * By default the following data is pruned:
     *
     * 1. All normal and divulged contracts that have been archived before
     *    `prune_up_to`.
     * 2. All transaction events and completions before `prune_up_to`
     *
     * @generated from protobuf field: int64 prune_up_to = 1
     */
    pruneUpTo: bigint;
    /**
     * Unique submission identifier.
     * Optional, defaults to a random identifier, used for logging.
     *
     * @generated from protobuf field: string submission_id = 2
     */
    submissionId: string;
    /**
     * Prune all immediately and retroactively divulged contracts created before `prune_up_to`
     * independent of whether they were archived before `prune_up_to`. Useful to avoid leaking
     * storage on participant nodes that can see a divulged contract but not its archival.
     *
     * Application developers SHOULD write their Daml applications
     * such that they do not rely on divulged contracts; i.e., no warnings from
     * using divulged contracts as inputs to transactions are emitted.
     *
     * Participant node operators SHOULD set the `prune_all_divulged_contracts` flag to avoid leaking
     * storage due to accumulating unarchived divulged contracts PROVIDED that:
     *
     * 1. no application using this participant node relies on divulgence OR
     * 2. divulged contracts on which applications rely have been re-divulged after the `prune_up_to` offset.
     *
     * @generated from protobuf field: bool prune_all_divulged_contracts = 3
     */
    pruneAllDivulgedContracts: boolean;
}
/**
 * Empty for now, but may contain fields in the future
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.PruneResponse
 */
export interface PruneResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class PruneRequest$Type extends MessageType<PruneRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.PruneRequest", [
            { no: 1, name: "prune_up_to", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "submission_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "prune_all_divulged_contracts", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PruneRequest>): PruneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pruneUpTo = 0n;
        message.submissionId = "";
        message.pruneAllDivulgedContracts = false;
        if (value !== undefined)
            reflectionMergePartial<PruneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PruneRequest): PruneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 prune_up_to */ 1:
                    message.pruneUpTo = reader.int64().toBigInt();
                    break;
                case /* string submission_id */ 2:
                    message.submissionId = reader.string();
                    break;
                case /* bool prune_all_divulged_contracts */ 3:
                    message.pruneAllDivulgedContracts = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PruneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 prune_up_to = 1; */
        if (message.pruneUpTo !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pruneUpTo);
        /* string submission_id = 2; */
        if (message.submissionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.submissionId);
        /* bool prune_all_divulged_contracts = 3; */
        if (message.pruneAllDivulgedContracts !== false)
            writer.tag(3, WireType.Varint).bool(message.pruneAllDivulgedContracts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.PruneRequest
 */
export const PruneRequest = new PruneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PruneResponse$Type extends MessageType<PruneResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.PruneResponse", []);
    }
    create(value?: PartialMessage<PruneResponse>): PruneResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PruneResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PruneResponse): PruneResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PruneResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.PruneResponse
 */
export const PruneResponse = new PruneResponse$Type();
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.admin.ParticipantPruningService
 */
export const ParticipantPruningService = new ServiceType("com.daml.ledger.api.v2.admin.ParticipantPruningService", [
    { name: "Prune", options: {}, I: PruneRequest, O: PruneResponse }
]);
