// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/version_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VersionService } from "./version_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetLedgerApiVersionResponse } from "./version_service";
import type { GetLedgerApiVersionRequest } from "./version_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Allows clients to retrieve information about the ledger API version
 *
 * @generated from protobuf service com.daml.ledger.api.v2.VersionService
 */
export interface IVersionServiceClient {
    /**
     * Read the Ledger API version
     *
     * @generated from protobuf rpc: GetLedgerApiVersion
     */
    getLedgerApiVersion(input: GetLedgerApiVersionRequest, options?: RpcOptions): UnaryCall<GetLedgerApiVersionRequest, GetLedgerApiVersionResponse>;
}
/**
 * Allows clients to retrieve information about the ledger API version
 *
 * @generated from protobuf service com.daml.ledger.api.v2.VersionService
 */
export class VersionServiceClient implements IVersionServiceClient, ServiceInfo {
    typeName = VersionService.typeName;
    methods = VersionService.methods;
    options = VersionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Read the Ledger API version
     *
     * @generated from protobuf rpc: GetLedgerApiVersion
     */
    getLedgerApiVersion(input: GetLedgerApiVersionRequest, options?: RpcOptions): UnaryCall<GetLedgerApiVersionRequest, GetLedgerApiVersionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLedgerApiVersionRequest, GetLedgerApiVersionResponse>("unary", this._transport, method, opt, input);
    }
}
