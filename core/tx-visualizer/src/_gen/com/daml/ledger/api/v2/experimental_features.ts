// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/experimental_features.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// 
// IMPORTANT: in contrast to other parts of the Ledger API, only json-wire backwards
// compatibility guarantees are given for the messages in this file.

/**
 * See the feature message definitions for descriptions.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.ExperimentalFeatures
 */
export interface ExperimentalFeatures {
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.ExperimentalStaticTime static_time = 1
     */
    staticTime?: ExperimentalStaticTime;
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.ExperimentalCommandInspectionService command_inspection_service = 2
     */
    commandInspectionService?: ExperimentalCommandInspectionService;
}
/**
 * Ledger is in the static time mode and exposes a time service.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.ExperimentalStaticTime
 */
export interface ExperimentalStaticTime {
    /**
     * @generated from protobuf field: bool supported = 1
     */
    supported: boolean;
}
/**
 * Whether the Ledger API supports command inspection service
 *
 * @generated from protobuf message com.daml.ledger.api.v2.ExperimentalCommandInspectionService
 */
export interface ExperimentalCommandInspectionService {
    /**
     * @generated from protobuf field: bool supported = 1
     */
    supported: boolean;
}
/**
 * Whether the Ledger API supports party events
 *
 * @generated from protobuf message com.daml.ledger.api.v2.ExperimentalPartyTopologyEvents
 */
export interface ExperimentalPartyTopologyEvents {
    /**
     * @generated from protobuf field: bool supported = 1
     */
    supported: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentalFeatures$Type extends MessageType<ExperimentalFeatures> {
    constructor() {
        super("com.daml.ledger.api.v2.ExperimentalFeatures", [
            { no: 1, name: "static_time", kind: "message", T: () => ExperimentalStaticTime },
            { no: 2, name: "command_inspection_service", kind: "message", T: () => ExperimentalCommandInspectionService }
        ]);
    }
    create(value?: PartialMessage<ExperimentalFeatures>): ExperimentalFeatures {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExperimentalFeatures>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentalFeatures): ExperimentalFeatures {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.ExperimentalStaticTime static_time */ 1:
                    message.staticTime = ExperimentalStaticTime.internalBinaryRead(reader, reader.uint32(), options, message.staticTime);
                    break;
                case /* com.daml.ledger.api.v2.ExperimentalCommandInspectionService command_inspection_service */ 2:
                    message.commandInspectionService = ExperimentalCommandInspectionService.internalBinaryRead(reader, reader.uint32(), options, message.commandInspectionService);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExperimentalFeatures, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.ExperimentalStaticTime static_time = 1; */
        if (message.staticTime)
            ExperimentalStaticTime.internalBinaryWrite(message.staticTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.daml.ledger.api.v2.ExperimentalCommandInspectionService command_inspection_service = 2; */
        if (message.commandInspectionService)
            ExperimentalCommandInspectionService.internalBinaryWrite(message.commandInspectionService, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ExperimentalFeatures
 */
export const ExperimentalFeatures = new ExperimentalFeatures$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentalStaticTime$Type extends MessageType<ExperimentalStaticTime> {
    constructor() {
        super("com.daml.ledger.api.v2.ExperimentalStaticTime", [
            { no: 1, name: "supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExperimentalStaticTime>): ExperimentalStaticTime {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supported = false;
        if (value !== undefined)
            reflectionMergePartial<ExperimentalStaticTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentalStaticTime): ExperimentalStaticTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExperimentalStaticTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ExperimentalStaticTime
 */
export const ExperimentalStaticTime = new ExperimentalStaticTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentalCommandInspectionService$Type extends MessageType<ExperimentalCommandInspectionService> {
    constructor() {
        super("com.daml.ledger.api.v2.ExperimentalCommandInspectionService", [
            { no: 1, name: "supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExperimentalCommandInspectionService>): ExperimentalCommandInspectionService {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supported = false;
        if (value !== undefined)
            reflectionMergePartial<ExperimentalCommandInspectionService>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentalCommandInspectionService): ExperimentalCommandInspectionService {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExperimentalCommandInspectionService, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ExperimentalCommandInspectionService
 */
export const ExperimentalCommandInspectionService = new ExperimentalCommandInspectionService$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentalPartyTopologyEvents$Type extends MessageType<ExperimentalPartyTopologyEvents> {
    constructor() {
        super("com.daml.ledger.api.v2.ExperimentalPartyTopologyEvents", [
            { no: 1, name: "supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExperimentalPartyTopologyEvents>): ExperimentalPartyTopologyEvents {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supported = false;
        if (value !== undefined)
            reflectionMergePartial<ExperimentalPartyTopologyEvents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentalPartyTopologyEvents): ExperimentalPartyTopologyEvents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExperimentalPartyTopologyEvents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.ExperimentalPartyTopologyEvents
 */
export const ExperimentalPartyTopologyEvents = new ExperimentalPartyTopologyEvents$Type();
