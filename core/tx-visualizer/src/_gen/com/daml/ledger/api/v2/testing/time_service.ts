// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/testing/time_service.proto" (package "com.daml.ledger.api.v2.testing", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { Empty } from "../../../../../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message com.daml.ledger.api.v2.testing.GetTimeRequest
 */
export interface GetTimeRequest {
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.testing.GetTimeResponse
 */
export interface GetTimeResponse {
    /**
     * The current time according to the ledger server.
     *
     * @generated from protobuf field: google.protobuf.Timestamp current_time = 1
     */
    currentTime?: Timestamp;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.testing.SetTimeRequest
 */
export interface SetTimeRequest {
    /**
     * MUST precisely match the current time as it's known to the ledger server.
     *
     * @generated from protobuf field: google.protobuf.Timestamp current_time = 1
     */
    currentTime?: Timestamp;
    /**
     * The time the client wants to set on the ledger.
     * MUST be a point int time after ``current_time``.
     *
     * @generated from protobuf field: google.protobuf.Timestamp new_time = 2
     */
    newTime?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetTimeRequest$Type extends MessageType<GetTimeRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.testing.GetTimeRequest", []);
    }
    create(value?: PartialMessage<GetTimeRequest>): GetTimeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTimeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTimeRequest): GetTimeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTimeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.testing.GetTimeRequest
 */
export const GetTimeRequest = new GetTimeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTimeResponse$Type extends MessageType<GetTimeResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.testing.GetTimeResponse", [
            { no: 1, name: "current_time", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetTimeResponse>): GetTimeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTimeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTimeResponse): GetTimeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp current_time */ 1:
                    message.currentTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.currentTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTimeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp current_time = 1; */
        if (message.currentTime)
            Timestamp.internalBinaryWrite(message.currentTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.testing.GetTimeResponse
 */
export const GetTimeResponse = new GetTimeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetTimeRequest$Type extends MessageType<SetTimeRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.testing.SetTimeRequest", [
            { no: 1, name: "current_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "new_time", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<SetTimeRequest>): SetTimeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetTimeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetTimeRequest): SetTimeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp current_time */ 1:
                    message.currentTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.currentTime);
                    break;
                case /* google.protobuf.Timestamp new_time */ 2:
                    message.newTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.newTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetTimeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp current_time = 1; */
        if (message.currentTime)
            Timestamp.internalBinaryWrite(message.currentTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp new_time = 2; */
        if (message.newTime)
            Timestamp.internalBinaryWrite(message.newTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.testing.SetTimeRequest
 */
export const SetTimeRequest = new SetTimeRequest$Type();
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.testing.TimeService
 */
export const TimeService = new ServiceType("com.daml.ledger.api.v2.testing.TimeService", [
    { name: "GetTime", options: {}, I: GetTimeRequest, O: GetTimeResponse },
    { name: "SetTime", options: {}, I: SetTimeRequest, O: Empty }
]);
