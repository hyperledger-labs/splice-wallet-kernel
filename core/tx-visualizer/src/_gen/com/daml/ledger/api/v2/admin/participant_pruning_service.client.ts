// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/admin/participant_pruning_service.proto" (package "com.daml.ledger.api.v2.admin", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ParticipantPruningService } from "./participant_pruning_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PruneResponse } from "./participant_pruning_service";
import type { PruneRequest } from "./participant_pruning_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// Status: experimental interface, will change before it is deemed production
// ready

/**
 * Prunes/truncates the "oldest" transactions from the participant (the participant Ledger Api Server plus any other
 * participant-local state) by removing a portion of the ledger in such a way that the set of future, allowed
 * commands are not affected.
 *
 * This enables:
 *
 * 1. keeping the "inactive" portion of the ledger to a manageable size and
 * 2. removing inactive state to honor the right to be forgotten.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.admin.ParticipantPruningService
 */
export interface IParticipantPruningServiceClient {
    /**
     * Prune the ledger specifying the offset before and at which ledger transactions should be removed. Only returns when
     * the potentially long-running prune request ends successfully or with an error.
     *
     * @generated from protobuf rpc: Prune
     */
    prune(input: PruneRequest, options?: RpcOptions): UnaryCall<PruneRequest, PruneResponse>;
}
// Status: experimental interface, will change before it is deemed production
// ready

/**
 * Prunes/truncates the "oldest" transactions from the participant (the participant Ledger Api Server plus any other
 * participant-local state) by removing a portion of the ledger in such a way that the set of future, allowed
 * commands are not affected.
 *
 * This enables:
 *
 * 1. keeping the "inactive" portion of the ledger to a manageable size and
 * 2. removing inactive state to honor the right to be forgotten.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.admin.ParticipantPruningService
 */
export class ParticipantPruningServiceClient implements IParticipantPruningServiceClient, ServiceInfo {
    typeName = ParticipantPruningService.typeName;
    methods = ParticipantPruningService.methods;
    options = ParticipantPruningService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Prune the ledger specifying the offset before and at which ledger transactions should be removed. Only returns when
     * the potentially long-running prune request ends successfully or with an error.
     *
     * @generated from protobuf rpc: Prune
     */
    prune(input: PruneRequest, options?: RpcOptions): UnaryCall<PruneRequest, PruneResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PruneRequest, PruneResponse>("unary", this._transport, method, opt, input);
    }
}
