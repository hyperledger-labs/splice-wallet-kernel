// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/command_completion_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommandCompletionService } from "./command_completion_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CompletionStreamResponse } from "./command_completion_service";
import type { CompletionStreamRequest } from "./command_completion_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Allows clients to observe the status of their submissions.
 * Commands may be submitted via the Command Submission Service.
 * The on-ledger effects of their submissions are disclosed by the Update Service.
 *
 * Commands may fail in 2 distinct manners:
 *
 * 1. Failure communicated synchronously in the gRPC error of the submission.
 * 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
 *
 * Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
 * choose to produce a completion event for a rejection of a duplicate command.
 *
 * Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
 * Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.CommandCompletionService
 */
export interface ICommandCompletionServiceClient {
    /**
     * Subscribe to command completion events.
     *
     * @generated from protobuf rpc: CompletionStream
     */
    completionStream(input: CompletionStreamRequest, options?: RpcOptions): ServerStreamingCall<CompletionStreamRequest, CompletionStreamResponse>;
}
/**
 * Allows clients to observe the status of their submissions.
 * Commands may be submitted via the Command Submission Service.
 * The on-ledger effects of their submissions are disclosed by the Update Service.
 *
 * Commands may fail in 2 distinct manners:
 *
 * 1. Failure communicated synchronously in the gRPC error of the submission.
 * 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
 *
 * Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
 * choose to produce a completion event for a rejection of a duplicate command.
 *
 * Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
 * Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.CommandCompletionService
 */
export class CommandCompletionServiceClient implements ICommandCompletionServiceClient, ServiceInfo {
    typeName = CommandCompletionService.typeName;
    methods = CommandCompletionService.methods;
    options = CommandCompletionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribe to command completion events.
     *
     * @generated from protobuf rpc: CompletionStream
     */
    completionStream(input: CompletionStreamRequest, options?: RpcOptions): ServerStreamingCall<CompletionStreamRequest, CompletionStreamResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompletionStreamRequest, CompletionStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
