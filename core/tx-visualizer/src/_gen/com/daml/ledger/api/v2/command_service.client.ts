// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/command_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommandService } from "./command_service";
import type { SubmitAndWaitForReassignmentResponse } from "./command_service";
import type { SubmitAndWaitForReassignmentRequest } from "./command_service";
import type { SubmitAndWaitForTransactionTreeResponse } from "./command_service";
import type { SubmitAndWaitForTransactionResponse } from "./command_service";
import type { SubmitAndWaitForTransactionRequest } from "./command_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubmitAndWaitResponse } from "./command_service";
import type { SubmitAndWaitRequest } from "./command_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Command Service is able to correlate submitted commands with completion data, identify timeouts, and return contextual
 * information with each tracking result. This supports the implementation of stateless clients.
 *
 * Note that submitted commands generally produce completion events as well, even in case a command gets rejected.
 * For example, the participant SHOULD produce a completion event for a rejection of a duplicate command.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.CommandService
 */
export interface ICommandServiceClient {
    /**
     * Submits a single composite command and waits for its result.
     * Propagates the gRPC error of failed submissions including Daml interpretation errors.
     *
     * @generated from protobuf rpc: SubmitAndWait
     */
    submitAndWait(input: SubmitAndWaitRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitRequest, SubmitAndWaitResponse>;
    /**
     * Submits a single composite command, waits for its result, and returns the transaction.
     * Propagates the gRPC error of failed submissions including Daml interpretation errors.
     *
     * @generated from protobuf rpc: SubmitAndWaitForTransaction
     */
    submitAndWaitForTransaction(input: SubmitAndWaitForTransactionRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitForTransactionRequest, SubmitAndWaitForTransactionResponse>;
    /**
     * Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
     * Submits a single composite command, waits for its result, and returns the transaction tree.
     * Propagates the gRPC error of failed submissions including Daml interpretation errors.
     *
     * @generated from protobuf rpc: SubmitAndWaitForTransactionTree
     */
    submitAndWaitForTransactionTree(input: SubmitAndWaitRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitRequest, SubmitAndWaitForTransactionTreeResponse>;
    /**
     * Submits a single composite reassignment command, waits for its result, and returns the reassignment.
     * Propagates the gRPC error of failed submission.
     *
     * @generated from protobuf rpc: SubmitAndWaitForReassignment
     */
    submitAndWaitForReassignment(input: SubmitAndWaitForReassignmentRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitForReassignmentRequest, SubmitAndWaitForReassignmentResponse>;
}
/**
 * Command Service is able to correlate submitted commands with completion data, identify timeouts, and return contextual
 * information with each tracking result. This supports the implementation of stateless clients.
 *
 * Note that submitted commands generally produce completion events as well, even in case a command gets rejected.
 * For example, the participant SHOULD produce a completion event for a rejection of a duplicate command.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.CommandService
 */
export class CommandServiceClient implements ICommandServiceClient, ServiceInfo {
    typeName = CommandService.typeName;
    methods = CommandService.methods;
    options = CommandService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Submits a single composite command and waits for its result.
     * Propagates the gRPC error of failed submissions including Daml interpretation errors.
     *
     * @generated from protobuf rpc: SubmitAndWait
     */
    submitAndWait(input: SubmitAndWaitRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitRequest, SubmitAndWaitResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitAndWaitRequest, SubmitAndWaitResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Submits a single composite command, waits for its result, and returns the transaction.
     * Propagates the gRPC error of failed submissions including Daml interpretation errors.
     *
     * @generated from protobuf rpc: SubmitAndWaitForTransaction
     */
    submitAndWaitForTransaction(input: SubmitAndWaitForTransactionRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitForTransactionRequest, SubmitAndWaitForTransactionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitAndWaitForTransactionRequest, SubmitAndWaitForTransactionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
     * Submits a single composite command, waits for its result, and returns the transaction tree.
     * Propagates the gRPC error of failed submissions including Daml interpretation errors.
     *
     * @generated from protobuf rpc: SubmitAndWaitForTransactionTree
     */
    submitAndWaitForTransactionTree(input: SubmitAndWaitRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitRequest, SubmitAndWaitForTransactionTreeResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitAndWaitRequest, SubmitAndWaitForTransactionTreeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Submits a single composite reassignment command, waits for its result, and returns the reassignment.
     * Propagates the gRPC error of failed submission.
     *
     * @generated from protobuf rpc: SubmitAndWaitForReassignment
     */
    submitAndWaitForReassignment(input: SubmitAndWaitForReassignmentRequest, options?: RpcOptions): UnaryCall<SubmitAndWaitForReassignmentRequest, SubmitAndWaitForReassignmentResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitAndWaitForReassignmentRequest, SubmitAndWaitForReassignmentResponse>("unary", this._transport, method, opt, input);
    }
}
