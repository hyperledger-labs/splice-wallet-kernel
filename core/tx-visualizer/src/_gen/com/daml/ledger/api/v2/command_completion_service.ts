// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/command_completion_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OffsetCheckpoint } from "./offset_checkpoint";
import { Completion } from "./completion";
/**
 * @generated from protobuf message com.daml.ledger.api.v2.CompletionStreamRequest
 */
export interface CompletionStreamRequest {
    /**
     * Only completions of commands submitted with the same user_id will be visible in the stream.
     * Must be a valid UserIdString (as described in ``value.proto``).
     * Required unless authentication is used with a user token.
     * In that case, the token's user-id will be used for the request's user_id.
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * Non-empty list of parties whose data should be included.
     * The stream shows only completions of commands for which at least one of the ``act_as`` parties is in the given set of parties.
     * Must be a valid PartyIdString (as described in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: repeated string parties = 2
     */
    parties: string[];
    /**
     * This optional field indicates the minimum offset for completions. This can be used to resume an earlier completion stream.
     * If not set the ledger uses the ledger begin offset instead.
     * If specified, it must be a valid absolute offset (positive integer) or zero (ledger begin offset).
     * If the ledger has been pruned, this parameter must be specified and greater than the pruning offset.
     *
     * @generated from protobuf field: int64 begin_exclusive = 3
     */
    beginExclusive: bigint;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.CompletionStreamResponse
 */
export interface CompletionStreamResponse {
    /**
     * @generated from protobuf oneof: completion_response
     */
    completionResponse: {
        oneofKind: "completion";
        /**
         * @generated from protobuf field: com.daml.ledger.api.v2.Completion completion = 1
         */
        completion: Completion;
    } | {
        oneofKind: "offsetCheckpoint";
        /**
         * @generated from protobuf field: com.daml.ledger.api.v2.OffsetCheckpoint offset_checkpoint = 2
         */
        offsetCheckpoint: OffsetCheckpoint;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class CompletionStreamRequest$Type extends MessageType<CompletionStreamRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.CompletionStreamRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parties", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "begin_exclusive", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CompletionStreamRequest>): CompletionStreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.parties = [];
        message.beginExclusive = 0n;
        if (value !== undefined)
            reflectionMergePartial<CompletionStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompletionStreamRequest): CompletionStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* repeated string parties */ 2:
                    message.parties.push(reader.string());
                    break;
                case /* int64 begin_exclusive */ 3:
                    message.beginExclusive = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompletionStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* repeated string parties = 2; */
        for (let i = 0; i < message.parties.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.parties[i]);
        /* int64 begin_exclusive = 3; */
        if (message.beginExclusive !== 0n)
            writer.tag(3, WireType.Varint).int64(message.beginExclusive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.CompletionStreamRequest
 */
export const CompletionStreamRequest = new CompletionStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompletionStreamResponse$Type extends MessageType<CompletionStreamResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.CompletionStreamResponse", [
            { no: 1, name: "completion", kind: "message", oneof: "completionResponse", T: () => Completion },
            { no: 2, name: "offset_checkpoint", kind: "message", oneof: "completionResponse", T: () => OffsetCheckpoint }
        ]);
    }
    create(value?: PartialMessage<CompletionStreamResponse>): CompletionStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.completionResponse = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CompletionStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompletionStreamResponse): CompletionStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.Completion completion */ 1:
                    message.completionResponse = {
                        oneofKind: "completion",
                        completion: Completion.internalBinaryRead(reader, reader.uint32(), options, (message.completionResponse as any).completion)
                    };
                    break;
                case /* com.daml.ledger.api.v2.OffsetCheckpoint offset_checkpoint */ 2:
                    message.completionResponse = {
                        oneofKind: "offsetCheckpoint",
                        offsetCheckpoint: OffsetCheckpoint.internalBinaryRead(reader, reader.uint32(), options, (message.completionResponse as any).offsetCheckpoint)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompletionStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.Completion completion = 1; */
        if (message.completionResponse.oneofKind === "completion")
            Completion.internalBinaryWrite(message.completionResponse.completion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.daml.ledger.api.v2.OffsetCheckpoint offset_checkpoint = 2; */
        if (message.completionResponse.oneofKind === "offsetCheckpoint")
            OffsetCheckpoint.internalBinaryWrite(message.completionResponse.offsetCheckpoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.CompletionStreamResponse
 */
export const CompletionStreamResponse = new CompletionStreamResponse$Type();
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.CommandCompletionService
 */
export const CommandCompletionService = new ServiceType("com.daml.ledger.api.v2.CommandCompletionService", [
    { name: "CompletionStream", serverStreaming: true, options: {}, I: CompletionStreamRequest, O: CompletionStreamResponse }
]);
