// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/command_submission_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommandSubmissionService } from "./command_submission_service";
import type { SubmitReassignmentResponse } from "./command_submission_service";
import type { SubmitReassignmentRequest } from "./command_submission_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubmitResponse } from "./command_submission_service";
import type { SubmitRequest } from "./command_submission_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Allows clients to attempt advancing the ledger's state by submitting commands.
 * The final states of their submissions are disclosed by the Command Completion Service.
 * The on-ledger effects of their submissions are disclosed by the Update Service.
 *
 * Commands may fail in 2 distinct manners:
 *
 * 1. Failure communicated synchronously in the gRPC error of the submission.
 * 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
 *
 * Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
 * choose to produce a completion event for a rejection of a duplicate command.
 *
 * Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
 * Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.CommandSubmissionService
 */
export interface ICommandSubmissionServiceClient {
    /**
     * Submit a single composite command.
     *
     * @generated from protobuf rpc: Submit
     */
    submit(input: SubmitRequest, options?: RpcOptions): UnaryCall<SubmitRequest, SubmitResponse>;
    /**
     * Submit a single reassignment.
     *
     * @generated from protobuf rpc: SubmitReassignment
     */
    submitReassignment(input: SubmitReassignmentRequest, options?: RpcOptions): UnaryCall<SubmitReassignmentRequest, SubmitReassignmentResponse>;
}
/**
 * Allows clients to attempt advancing the ledger's state by submitting commands.
 * The final states of their submissions are disclosed by the Command Completion Service.
 * The on-ledger effects of their submissions are disclosed by the Update Service.
 *
 * Commands may fail in 2 distinct manners:
 *
 * 1. Failure communicated synchronously in the gRPC error of the submission.
 * 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
 *
 * Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
 * choose to produce a completion event for a rejection of a duplicate command.
 *
 * Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
 * Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.CommandSubmissionService
 */
export class CommandSubmissionServiceClient implements ICommandSubmissionServiceClient, ServiceInfo {
    typeName = CommandSubmissionService.typeName;
    methods = CommandSubmissionService.methods;
    options = CommandSubmissionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Submit a single composite command.
     *
     * @generated from protobuf rpc: Submit
     */
    submit(input: SubmitRequest, options?: RpcOptions): UnaryCall<SubmitRequest, SubmitResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitRequest, SubmitResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Submit a single reassignment.
     *
     * @generated from protobuf rpc: SubmitReassignment
     */
    submitReassignment(input: SubmitReassignmentRequest, options?: RpcOptions): UnaryCall<SubmitReassignmentRequest, SubmitReassignmentResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitReassignmentRequest, SubmitReassignmentResponse>("unary", this._transport, method, opt, input);
    }
}
