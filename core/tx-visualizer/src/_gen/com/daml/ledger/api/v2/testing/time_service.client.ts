// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/testing/time_service.proto" (package "com.daml.ledger.api.v2.testing", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TimeService } from "./time_service";
import type { Empty } from "../../../../../../google/protobuf/empty";
import type { SetTimeRequest } from "./time_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTimeResponse } from "./time_service";
import type { GetTimeRequest } from "./time_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Optional service, exposed for testing static time scenarios.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.testing.TimeService
 */
export interface ITimeServiceClient {
    /**
     * Returns the current time according to the ledger server.
     *
     * @generated from protobuf rpc: GetTime
     */
    getTime(input: GetTimeRequest, options?: RpcOptions): UnaryCall<GetTimeRequest, GetTimeResponse>;
    /**
     * Allows clients to change the ledger's clock in an atomic get-and-set operation.
     *
     * @generated from protobuf rpc: SetTime
     */
    setTime(input: SetTimeRequest, options?: RpcOptions): UnaryCall<SetTimeRequest, Empty>;
}
/**
 * Optional service, exposed for testing static time scenarios.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.testing.TimeService
 */
export class TimeServiceClient implements ITimeServiceClient, ServiceInfo {
    typeName = TimeService.typeName;
    methods = TimeService.methods;
    options = TimeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Returns the current time according to the ledger server.
     *
     * @generated from protobuf rpc: GetTime
     */
    getTime(input: GetTimeRequest, options?: RpcOptions): UnaryCall<GetTimeRequest, GetTimeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTimeRequest, GetTimeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Allows clients to change the ledger's clock in an atomic get-and-set operation.
     *
     * @generated from protobuf rpc: SetTime
     */
    setTime(input: SetTimeRequest, options?: RpcOptions): UnaryCall<SetTimeRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetTimeRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
