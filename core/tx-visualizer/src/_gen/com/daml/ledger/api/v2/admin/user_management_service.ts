// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/admin/user_management_service.proto" (package "com.daml.ledger.api.v2.admin", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FieldMask } from "../../../../../../google/protobuf/field_mask";
import { ObjectMeta } from "./object_meta";
// Users and rights
// /////////////////

/**
 * Users are used to dynamically manage the rights given to Daml applications.
 * They are stored and managed per participant node.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.User
 */
export interface User {
    /**
     * The user identifier, which must be a non-empty string of at most 128
     * characters that are either alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
     * Required
     *
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * The primary party as which this user reads and acts by default on the ledger
     * *provided* it has the corresponding ``CanReadAs(primary_party)`` or
     * ``CanActAs(primary_party)`` rights.
     * Ledger API clients SHOULD set this field to a non-empty value for all users to
     * enable the users to act on the ledger using their own Daml party.
     * Users for participant administrators MAY have an associated primary party.
     * Optional,
     * Modifiable
     *
     * @generated from protobuf field: string primary_party = 2
     */
    primaryParty: string;
    /**
     * When set, then the user is denied all access to the Ledger API.
     * Otherwise, the user has access to the Ledger API as per the user's rights.
     * Optional,
     * Modifiable
     *
     * @generated from protobuf field: bool is_deactivated = 3
     */
    isDeactivated: boolean;
    /**
     * The metadata of this user.
     * Note that the ``metadata.resource_version`` tracks changes to the properties described by the ``User`` message and not the user's rights.
     * Optional,
     * Modifiable
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.ObjectMeta metadata = 4
     */
    metadata?: ObjectMeta;
    /**
     * The ID of the identity provider configured by ``Identity Provider Config``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 5
     */
    identityProviderId: string;
}
/**
 * A right granted to a user.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Right
 */
export interface Right {
    /**
     * Required
     *
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "participantAdmin";
        /**
         * The user can administer the participant node.
         *
         * @generated from protobuf field: com.daml.ledger.api.v2.admin.Right.ParticipantAdmin participant_admin = 1
         */
        participantAdmin: Right_ParticipantAdmin;
    } | {
        oneofKind: "canActAs";
        /**
         * The user can act as a specific party.
         *
         * @generated from protobuf field: com.daml.ledger.api.v2.admin.Right.CanActAs can_act_as = 2
         */
        canActAs: Right_CanActAs;
    } | {
        oneofKind: "canReadAs";
        /**
         * The user can read ledger data visible to a specific party.
         *
         * @generated from protobuf field: com.daml.ledger.api.v2.admin.Right.CanReadAs can_read_as = 3
         */
        canReadAs: Right_CanReadAs;
    } | {
        oneofKind: "identityProviderAdmin";
        /**
         * The user can administer users and parties assigned to the same identity provider as the one of the user.
         *
         * @generated from protobuf field: com.daml.ledger.api.v2.admin.Right.IdentityProviderAdmin identity_provider_admin = 4
         */
        identityProviderAdmin: Right_IdentityProviderAdmin;
    } | {
        oneofKind: "canReadAsAnyParty";
        /**
         * The user can read as any party on a participant
         *
         * @generated from protobuf field: com.daml.ledger.api.v2.admin.Right.CanReadAsAnyParty can_read_as_any_party = 5
         */
        canReadAsAnyParty: Right_CanReadAsAnyParty;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The right to administer the participant node.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Right.ParticipantAdmin
 */
export interface Right_ParticipantAdmin {
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Right.CanActAs
 */
export interface Right_CanActAs {
    /**
     * The right to authorize commands for this party.
     *
     * @generated from protobuf field: string party = 1
     */
    party: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Right.CanReadAs
 */
export interface Right_CanReadAs {
    /**
     * The right to read ledger data visible to this party.
     *
     * @generated from protobuf field: string party = 1
     */
    party: string;
}
/**
 * The right to administer the identity provider that the user is assigned to.
 * It means, being able to manage users and parties that are also assigned
 * to the same identity provider.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Right.IdentityProviderAdmin
 */
export interface Right_IdentityProviderAdmin {
}
/**
 * The rights of a participant's super reader. Its utility is predominantly for
 * feeding external tools, such as PQS, continually without the need to change subscriptions
 * as new parties pop in and out of existence.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Right.CanReadAsAnyParty
 */
export interface Right_CanReadAsAnyParty {
}
// RPC requests and responses
// ///////////////////////////

/**
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(user.identity_provider_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * The user to create.
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.User user = 1
     */
    user?: User;
    /**
     * The rights to be assigned to the user upon creation,
     * which SHOULD include appropriate rights for the ``user.primary_party``.
     * Optional
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Right rights = 2
     */
    rights: Right[];
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * Created user.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.User user = 1
     */
    user?: User;
}
/**
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id) OR IsAuthenticatedUser(user_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GetUserRequest
 */
export interface GetUserRequest {
    /**
     * The user whose data to retrieve.
     * If set to empty string (the default), then the data for the authenticated user will be retrieved.
     * Optional
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * The id of the ``Identity Provider``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 2
     */
    identityProviderId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GetUserResponse
 */
export interface GetUserResponse {
    /**
     * Retrieved user.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.User user = 1
     */
    user?: User;
}
/**
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(user.identity_provider_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * The user to update.
     * Required,
     * Modifiable
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.User user = 1
     */
    user?: User;
    /**
     * An update mask specifies how and which properties of the ``User`` message are to be updated.
     * An update mask consists of a set of update paths.
     * A valid update path points to a field or a subfield relative to the ``User`` message.
     * A valid update mask must:
     *
     * 1. contain at least one update path,
     * 2. contain only valid update paths.
     *
     * Fields that can be updated are marked as ``Modifiable``.
     * An update path can also point to a non-``Modifiable`` fields such as 'id' and 'metadata.resource_version'
     * because they are used:
     *
     * 1. to identify the user resource subject to the update,
     * 2. for concurrent change control.
     *
     * Examples of valid update paths: 'primary_party', 'metadata', 'metadata.annotations'.
     * For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
     * For similar Ledger API see ``com.daml.ledger.api.v2.admin.UpdatePartyDetailsRequest``.
     * Required
     *
     * @generated from protobuf field: google.protobuf.FieldMask update_mask = 2
     */
    updateMask?: FieldMask;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     * Updated user
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.User user = 1
     */
    user?: User;
}
/**
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * The user to delete.
     * Required
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * The id of the ``Identity Provider``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 2
     */
    identityProviderId: string;
}
/**
 * Does not (yet) contain any data.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.DeleteUserResponse
 */
export interface DeleteUserResponse {
}
/**
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListUsersRequest
 */
export interface ListUsersRequest {
    /**
     * Pagination token to determine the specific page to fetch.
     * Leave empty to fetch the first page.
     * Optional
     *
     * @generated from protobuf field: string page_token = 2
     */
    pageToken: string;
    /**
     * Maximum number of results to be returned by the server. The server will return no more than that many results, but it might return fewer.
     * If 0, the server will decide the number of results to be returned.
     * Optional
     *
     * @generated from protobuf field: int32 page_size = 3
     */
    pageSize: number;
    /**
     * The id of the ``Identity Provider``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 4
     */
    identityProviderId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     * A subset of users of the participant node that fit into this page.
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.User users = 1
     */
    users: User[];
    /**
     * Pagination token to retrieve the next page.
     * Empty, if there are no further results.
     *
     * @generated from protobuf field: string next_page_token = 2
     */
    nextPageToken: string;
}
/**
 * Add the rights to the set of rights granted to the user.
 *
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GrantUserRightsRequest
 */
export interface GrantUserRightsRequest {
    /**
     * The user to whom to grant rights.
     * Required
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * The rights to grant.
     * Optional
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Right rights = 2
     */
    rights: Right[];
    /**
     * The id of the ``Identity Provider``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 3
     */
    identityProviderId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GrantUserRightsResponse
 */
export interface GrantUserRightsResponse {
    /**
     * The rights that were newly granted by the request.
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Right newly_granted_rights = 1
     */
    newlyGrantedRights: Right[];
}
/**
 * Remove the rights from the set of rights granted to the user.
 *
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.RevokeUserRightsRequest
 */
export interface RevokeUserRightsRequest {
    /**
     * The user from whom to revoke rights.
     * Required
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * The rights to revoke.
     * Optional
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Right rights = 2
     */
    rights: Right[];
    /**
     * The id of the ``Identity Provider``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 3
     */
    identityProviderId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.RevokeUserRightsResponse
 */
export interface RevokeUserRightsResponse {
    /**
     * The rights that were actually revoked by the request.
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Right newly_revoked_rights = 1
     */
    newlyRevokedRights: Right[];
}
/**
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id) OR IsAuthenticatedUser(user_id)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListUserRightsRequest
 */
export interface ListUserRightsRequest {
    /**
     * The user for which to list the rights.
     * If set to empty string (the default), then the rights for the authenticated user will be listed.
     * Required
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * The id of the ``Identity Provider``
     * Optional, if not set, assume the user is managed by the default identity provider.
     *
     * @generated from protobuf field: string identity_provider_id = 2
     */
    identityProviderId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListUserRightsResponse
 */
export interface ListUserRightsResponse {
    /**
     * All rights of the user.
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Right rights = 1
     */
    rights: Right[];
}
/**
 * Required authorization: ``HasRight(ParticipantAdmin)``
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UpdateUserIdentityProviderIdRequest
 */
export interface UpdateUserIdentityProviderIdRequest {
    /**
     * User to update
     *
     * @generated from protobuf field: string user_id = 1
     */
    userId: string;
    /**
     * Current identity provider ID of the user
     *
     * @generated from protobuf field: string source_identity_provider_id = 2
     */
    sourceIdentityProviderId: string;
    /**
     * Target identity provider ID of the user
     *
     * @generated from protobuf field: string target_identity_provider_id = 3
     */
    targetIdentityProviderId: string;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UpdateUserIdentityProviderIdResponse
 */
export interface UpdateUserIdentityProviderIdResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.User", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "primary_party", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_deactivated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "metadata", kind: "message", T: () => ObjectMeta },
            { no: 5, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.primaryParty = "";
        message.isDeactivated = false;
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string primary_party */ 2:
                    message.primaryParty = reader.string();
                    break;
                case /* bool is_deactivated */ 3:
                    message.isDeactivated = reader.bool();
                    break;
                case /* com.daml.ledger.api.v2.admin.ObjectMeta metadata */ 4:
                    message.metadata = ObjectMeta.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string identity_provider_id */ 5:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string primary_party = 2; */
        if (message.primaryParty !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.primaryParty);
        /* bool is_deactivated = 3; */
        if (message.isDeactivated !== false)
            writer.tag(3, WireType.Varint).bool(message.isDeactivated);
        /* com.daml.ledger.api.v2.admin.ObjectMeta metadata = 4; */
        if (message.metadata)
            ObjectMeta.internalBinaryWrite(message.metadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string identity_provider_id = 5; */
        if (message.identityProviderId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right$Type extends MessageType<Right> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.Right", [
            { no: 1, name: "participant_admin", kind: "message", oneof: "kind", T: () => Right_ParticipantAdmin },
            { no: 2, name: "can_act_as", kind: "message", oneof: "kind", T: () => Right_CanActAs },
            { no: 3, name: "can_read_as", kind: "message", oneof: "kind", T: () => Right_CanReadAs },
            { no: 4, name: "identity_provider_admin", kind: "message", oneof: "kind", T: () => Right_IdentityProviderAdmin },
            { no: 5, name: "can_read_as_any_party", kind: "message", oneof: "kind", T: () => Right_CanReadAsAnyParty }
        ]);
    }
    create(value?: PartialMessage<Right>): Right {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.kind = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Right>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Right): Right {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.Right.ParticipantAdmin participant_admin */ 1:
                    message.kind = {
                        oneofKind: "participantAdmin",
                        participantAdmin: Right_ParticipantAdmin.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).participantAdmin)
                    };
                    break;
                case /* com.daml.ledger.api.v2.admin.Right.CanActAs can_act_as */ 2:
                    message.kind = {
                        oneofKind: "canActAs",
                        canActAs: Right_CanActAs.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).canActAs)
                    };
                    break;
                case /* com.daml.ledger.api.v2.admin.Right.CanReadAs can_read_as */ 3:
                    message.kind = {
                        oneofKind: "canReadAs",
                        canReadAs: Right_CanReadAs.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).canReadAs)
                    };
                    break;
                case /* com.daml.ledger.api.v2.admin.Right.IdentityProviderAdmin identity_provider_admin */ 4:
                    message.kind = {
                        oneofKind: "identityProviderAdmin",
                        identityProviderAdmin: Right_IdentityProviderAdmin.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).identityProviderAdmin)
                    };
                    break;
                case /* com.daml.ledger.api.v2.admin.Right.CanReadAsAnyParty can_read_as_any_party */ 5:
                    message.kind = {
                        oneofKind: "canReadAsAnyParty",
                        canReadAsAnyParty: Right_CanReadAsAnyParty.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).canReadAsAnyParty)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Right, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.Right.ParticipantAdmin participant_admin = 1; */
        if (message.kind.oneofKind === "participantAdmin")
            Right_ParticipantAdmin.internalBinaryWrite(message.kind.participantAdmin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.daml.ledger.api.v2.admin.Right.CanActAs can_act_as = 2; */
        if (message.kind.oneofKind === "canActAs")
            Right_CanActAs.internalBinaryWrite(message.kind.canActAs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.daml.ledger.api.v2.admin.Right.CanReadAs can_read_as = 3; */
        if (message.kind.oneofKind === "canReadAs")
            Right_CanReadAs.internalBinaryWrite(message.kind.canReadAs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* com.daml.ledger.api.v2.admin.Right.IdentityProviderAdmin identity_provider_admin = 4; */
        if (message.kind.oneofKind === "identityProviderAdmin")
            Right_IdentityProviderAdmin.internalBinaryWrite(message.kind.identityProviderAdmin, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.daml.ledger.api.v2.admin.Right.CanReadAsAnyParty can_read_as_any_party = 5; */
        if (message.kind.oneofKind === "canReadAsAnyParty")
            Right_CanReadAsAnyParty.internalBinaryWrite(message.kind.canReadAsAnyParty, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Right
 */
export const Right = new Right$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right_ParticipantAdmin$Type extends MessageType<Right_ParticipantAdmin> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.Right.ParticipantAdmin", []);
    }
    create(value?: PartialMessage<Right_ParticipantAdmin>): Right_ParticipantAdmin {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Right_ParticipantAdmin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Right_ParticipantAdmin): Right_ParticipantAdmin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Right_ParticipantAdmin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Right.ParticipantAdmin
 */
export const Right_ParticipantAdmin = new Right_ParticipantAdmin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right_CanActAs$Type extends MessageType<Right_CanActAs> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.Right.CanActAs", [
            { no: 1, name: "party", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Right_CanActAs>): Right_CanActAs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.party = "";
        if (value !== undefined)
            reflectionMergePartial<Right_CanActAs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Right_CanActAs): Right_CanActAs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string party */ 1:
                    message.party = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Right_CanActAs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string party = 1; */
        if (message.party !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.party);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Right.CanActAs
 */
export const Right_CanActAs = new Right_CanActAs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right_CanReadAs$Type extends MessageType<Right_CanReadAs> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.Right.CanReadAs", [
            { no: 1, name: "party", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Right_CanReadAs>): Right_CanReadAs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.party = "";
        if (value !== undefined)
            reflectionMergePartial<Right_CanReadAs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Right_CanReadAs): Right_CanReadAs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string party */ 1:
                    message.party = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Right_CanReadAs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string party = 1; */
        if (message.party !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.party);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Right.CanReadAs
 */
export const Right_CanReadAs = new Right_CanReadAs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right_IdentityProviderAdmin$Type extends MessageType<Right_IdentityProviderAdmin> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.Right.IdentityProviderAdmin", []);
    }
    create(value?: PartialMessage<Right_IdentityProviderAdmin>): Right_IdentityProviderAdmin {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Right_IdentityProviderAdmin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Right_IdentityProviderAdmin): Right_IdentityProviderAdmin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Right_IdentityProviderAdmin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Right.IdentityProviderAdmin
 */
export const Right_IdentityProviderAdmin = new Right_IdentityProviderAdmin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right_CanReadAsAnyParty$Type extends MessageType<Right_CanReadAsAnyParty> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.Right.CanReadAsAnyParty", []);
    }
    create(value?: PartialMessage<Right_CanReadAsAnyParty>): Right_CanReadAsAnyParty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Right_CanReadAsAnyParty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Right_CanReadAsAnyParty): Right_CanReadAsAnyParty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Right_CanReadAsAnyParty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Right.CanReadAsAnyParty
 */
export const Right_CanReadAsAnyParty = new Right_CanReadAsAnyParty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserRequest$Type extends MessageType<CreateUserRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.CreateUserRequest", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "rights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Right }
        ]);
    }
    create(value?: PartialMessage<CreateUserRequest>): CreateUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rights = [];
        if (value !== undefined)
            reflectionMergePartial<CreateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserRequest): CreateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated com.daml.ledger.api.v2.admin.Right rights */ 2:
                    message.rights.push(Right.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.daml.ledger.api.v2.admin.Right rights = 2; */
        for (let i = 0; i < message.rights.length; i++)
            Right.internalBinaryWrite(message.rights[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.CreateUserRequest
 */
export const CreateUserRequest = new CreateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserResponse$Type extends MessageType<CreateUserResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.CreateUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<CreateUserResponse>): CreateUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserResponse): CreateUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.CreateUserResponse
 */
export const CreateUserResponse = new CreateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRequest$Type extends MessageType<GetUserRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.GetUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserRequest>): GetUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserRequest): GetUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string identity_provider_id */ 2:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string identity_provider_id = 2; */
        if (message.identityProviderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GetUserRequest
 */
export const GetUserRequest = new GetUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserResponse$Type extends MessageType<GetUserResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.GetUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetUserResponse>): GetUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserResponse): GetUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GetUserResponse
 */
export const GetUserResponse = new GetUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequest$Type extends MessageType<UpdateUserRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.UpdateUserRequest", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "update_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequest>): UpdateUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequest): UpdateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* google.protobuf.FieldMask update_mask */ 2:
                    message.updateMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.updateMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.FieldMask update_mask = 2; */
        if (message.updateMask)
            FieldMask.internalBinaryWrite(message.updateMask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UpdateUserRequest
 */
export const UpdateUserRequest = new UpdateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserResponse$Type extends MessageType<UpdateUserResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.UpdateUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UpdateUserResponse>): UpdateUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserResponse): UpdateUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.admin.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.admin.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UpdateUserResponse
 */
export const UpdateUserResponse = new UpdateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.DeleteUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string identity_provider_id */ 2:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string identity_provider_id = 2; */
        if (message.identityProviderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserResponse$Type extends MessageType<DeleteUserResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.DeleteUserResponse", []);
    }
    create(value?: PartialMessage<DeleteUserResponse>): DeleteUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserResponse): DeleteUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.DeleteUserResponse
 */
export const DeleteUserResponse = new DeleteUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsersRequest$Type extends MessageType<ListUsersRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.ListUsersRequest", [
            { no: 2, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListUsersRequest>): ListUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pageToken = "";
        message.pageSize = 0;
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<ListUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsersRequest): ListUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string page_token */ 2:
                    message.pageToken = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                case /* string identity_provider_id */ 4:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string page_token = 2; */
        if (message.pageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pageToken);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        /* string identity_provider_id = 4; */
        if (message.identityProviderId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListUsersRequest
 */
export const ListUsersRequest = new ListUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsersResponse$Type extends MessageType<ListUsersResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.ListUsersResponse", [
            { no: 1, name: "users", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => User },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListUsersResponse>): ListUsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        message.nextPageToken = "";
        if (value !== undefined)
            reflectionMergePartial<ListUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsersResponse): ListUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.User users */ 1:
                    message.users.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.User users = 1; */
        for (let i = 0; i < message.users.length; i++)
            User.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListUsersResponse
 */
export const ListUsersResponse = new ListUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantUserRightsRequest$Type extends MessageType<GrantUserRightsRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.GrantUserRightsRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Right },
            { no: 3, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrantUserRightsRequest>): GrantUserRightsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.rights = [];
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<GrantUserRightsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantUserRightsRequest): GrantUserRightsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* repeated com.daml.ledger.api.v2.admin.Right rights */ 2:
                    message.rights.push(Right.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string identity_provider_id */ 3:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantUserRightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* repeated com.daml.ledger.api.v2.admin.Right rights = 2; */
        for (let i = 0; i < message.rights.length; i++)
            Right.internalBinaryWrite(message.rights[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string identity_provider_id = 3; */
        if (message.identityProviderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GrantUserRightsRequest
 */
export const GrantUserRightsRequest = new GrantUserRightsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantUserRightsResponse$Type extends MessageType<GrantUserRightsResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.GrantUserRightsResponse", [
            { no: 1, name: "newly_granted_rights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Right }
        ]);
    }
    create(value?: PartialMessage<GrantUserRightsResponse>): GrantUserRightsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.newlyGrantedRights = [];
        if (value !== undefined)
            reflectionMergePartial<GrantUserRightsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantUserRightsResponse): GrantUserRightsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.Right newly_granted_rights */ 1:
                    message.newlyGrantedRights.push(Right.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantUserRightsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.Right newly_granted_rights = 1; */
        for (let i = 0; i < message.newlyGrantedRights.length; i++)
            Right.internalBinaryWrite(message.newlyGrantedRights[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GrantUserRightsResponse
 */
export const GrantUserRightsResponse = new GrantUserRightsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeUserRightsRequest$Type extends MessageType<RevokeUserRightsRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.RevokeUserRightsRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Right },
            { no: 3, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevokeUserRightsRequest>): RevokeUserRightsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.rights = [];
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<RevokeUserRightsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeUserRightsRequest): RevokeUserRightsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* repeated com.daml.ledger.api.v2.admin.Right rights */ 2:
                    message.rights.push(Right.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string identity_provider_id */ 3:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeUserRightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* repeated com.daml.ledger.api.v2.admin.Right rights = 2; */
        for (let i = 0; i < message.rights.length; i++)
            Right.internalBinaryWrite(message.rights[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string identity_provider_id = 3; */
        if (message.identityProviderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.RevokeUserRightsRequest
 */
export const RevokeUserRightsRequest = new RevokeUserRightsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeUserRightsResponse$Type extends MessageType<RevokeUserRightsResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.RevokeUserRightsResponse", [
            { no: 1, name: "newly_revoked_rights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Right }
        ]);
    }
    create(value?: PartialMessage<RevokeUserRightsResponse>): RevokeUserRightsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.newlyRevokedRights = [];
        if (value !== undefined)
            reflectionMergePartial<RevokeUserRightsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeUserRightsResponse): RevokeUserRightsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.Right newly_revoked_rights */ 1:
                    message.newlyRevokedRights.push(Right.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeUserRightsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.Right newly_revoked_rights = 1; */
        for (let i = 0; i < message.newlyRevokedRights.length; i++)
            Right.internalBinaryWrite(message.newlyRevokedRights[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.RevokeUserRightsResponse
 */
export const RevokeUserRightsResponse = new RevokeUserRightsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserRightsRequest$Type extends MessageType<ListUserRightsRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.ListUserRightsRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListUserRightsRequest>): ListUserRightsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.identityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<ListUserRightsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserRightsRequest): ListUserRightsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string identity_provider_id */ 2:
                    message.identityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserRightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string identity_provider_id = 2; */
        if (message.identityProviderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.identityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListUserRightsRequest
 */
export const ListUserRightsRequest = new ListUserRightsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserRightsResponse$Type extends MessageType<ListUserRightsResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.ListUserRightsResponse", [
            { no: 1, name: "rights", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Right }
        ]);
    }
    create(value?: PartialMessage<ListUserRightsResponse>): ListUserRightsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rights = [];
        if (value !== undefined)
            reflectionMergePartial<ListUserRightsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserRightsResponse): ListUserRightsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.Right rights */ 1:
                    message.rights.push(Right.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserRightsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.Right rights = 1; */
        for (let i = 0; i < message.rights.length; i++)
            Right.internalBinaryWrite(message.rights[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListUserRightsResponse
 */
export const ListUserRightsResponse = new ListUserRightsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserIdentityProviderIdRequest$Type extends MessageType<UpdateUserIdentityProviderIdRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.UpdateUserIdentityProviderIdRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "source_identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_identity_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserIdentityProviderIdRequest>): UpdateUserIdentityProviderIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.sourceIdentityProviderId = "";
        message.targetIdentityProviderId = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateUserIdentityProviderIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserIdentityProviderIdRequest): UpdateUserIdentityProviderIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string source_identity_provider_id */ 2:
                    message.sourceIdentityProviderId = reader.string();
                    break;
                case /* string target_identity_provider_id */ 3:
                    message.targetIdentityProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserIdentityProviderIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string source_identity_provider_id = 2; */
        if (message.sourceIdentityProviderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceIdentityProviderId);
        /* string target_identity_provider_id = 3; */
        if (message.targetIdentityProviderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.targetIdentityProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UpdateUserIdentityProviderIdRequest
 */
export const UpdateUserIdentityProviderIdRequest = new UpdateUserIdentityProviderIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserIdentityProviderIdResponse$Type extends MessageType<UpdateUserIdentityProviderIdResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.admin.UpdateUserIdentityProviderIdResponse", []);
    }
    create(value?: PartialMessage<UpdateUserIdentityProviderIdResponse>): UpdateUserIdentityProviderIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserIdentityProviderIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserIdentityProviderIdResponse): UpdateUserIdentityProviderIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserIdentityProviderIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UpdateUserIdentityProviderIdResponse
 */
export const UpdateUserIdentityProviderIdResponse = new UpdateUserIdentityProviderIdResponse$Type();
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.admin.UserManagementService
 */
export const UserManagementService = new ServiceType("com.daml.ledger.api.v2.admin.UserManagementService", [
    { name: "CreateUser", options: {}, I: CreateUserRequest, O: CreateUserResponse },
    { name: "GetUser", options: {}, I: GetUserRequest, O: GetUserResponse },
    { name: "UpdateUser", options: {}, I: UpdateUserRequest, O: UpdateUserResponse },
    { name: "DeleteUser", options: {}, I: DeleteUserRequest, O: DeleteUserResponse },
    { name: "ListUsers", options: {}, I: ListUsersRequest, O: ListUsersResponse },
    { name: "GrantUserRights", options: {}, I: GrantUserRightsRequest, O: GrantUserRightsResponse },
    { name: "RevokeUserRights", options: {}, I: RevokeUserRightsRequest, O: RevokeUserRightsResponse },
    { name: "ListUserRights", options: {}, I: ListUserRightsRequest, O: ListUserRightsResponse },
    { name: "UpdateUserIdentityProviderId", options: {}, I: UpdateUserIdentityProviderIdRequest, O: UpdateUserIdentityProviderIdResponse }
]);
