// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/event_query_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EventQueryService } from "./event_query_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetEventsByContractIdResponse } from "./event_query_service";
import type { GetEventsByContractIdRequest } from "./event_query_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query events by contract id.
 *
 * Note that querying by contract key is not (yet) supported, as contract keys
 * are not supported (yet) in multi-synchronizer scenarios.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.EventQueryService
 */
export interface IEventQueryServiceClient {
    /**
     * Get the create and the consuming exercise event for the contract with the provided ID.
     * No events will be returned for contracts that have been pruned because they
     * have already been archived before the latest pruning offset.
     * If the contract cannot be found for the request, or all the contract-events are filtered, a CONTRACT_EVENTS_NOT_FOUND error will be raised.
     *
     * @generated from protobuf rpc: GetEventsByContractId
     */
    getEventsByContractId(input: GetEventsByContractIdRequest, options?: RpcOptions): UnaryCall<GetEventsByContractIdRequest, GetEventsByContractIdResponse>;
}
/**
 * Query events by contract id.
 *
 * Note that querying by contract key is not (yet) supported, as contract keys
 * are not supported (yet) in multi-synchronizer scenarios.
 *
 * @generated from protobuf service com.daml.ledger.api.v2.EventQueryService
 */
export class EventQueryServiceClient implements IEventQueryServiceClient, ServiceInfo {
    typeName = EventQueryService.typeName;
    methods = EventQueryService.methods;
    options = EventQueryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get the create and the consuming exercise event for the contract with the provided ID.
     * No events will be returned for contracts that have been pruned because they
     * have already been archived before the latest pruning offset.
     * If the contract cannot be found for the request, or all the contract-events are filtered, a CONTRACT_EVENTS_NOT_FOUND error will be raised.
     *
     * @generated from protobuf rpc: GetEventsByContractId
     */
    getEventsByContractId(input: GetEventsByContractIdRequest, options?: RpcOptions): UnaryCall<GetEventsByContractIdRequest, GetEventsByContractIdResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEventsByContractIdRequest, GetEventsByContractIdResponse>("unary", this._transport, method, opt, input);
    }
}
