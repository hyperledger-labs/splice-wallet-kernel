// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/interactive/interactive_submission_common_data.proto" (package "com.daml.ledger.api.v2.interactive", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "../value";
import { Identifier } from "../value";
/**
 * @generated from protobuf message com.daml.ledger.api.v2.interactive.GlobalKey
 */
export interface GlobalKey {
    /**
     * The identifier uses the package-id reference format.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.Identifier template_id = 1
     */
    templateId?: Identifier;
    /**
     * @generated from protobuf field: string package_name = 2
     */
    packageName: string;
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.Value key = 3
     */
    key?: Value;
    /**
     * @generated from protobuf field: bytes hash = 4
     */
    hash: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class GlobalKey$Type extends MessageType<GlobalKey> {
    constructor() {
        super("com.daml.ledger.api.v2.interactive.GlobalKey", [
            { no: 1, name: "template_id", kind: "message", T: () => Identifier },
            { no: 2, name: "package_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "key", kind: "message", T: () => Value },
            { no: 4, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GlobalKey>): GlobalKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packageName = "";
        message.hash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GlobalKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalKey): GlobalKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.Identifier template_id */ 1:
                    message.templateId = Identifier.internalBinaryRead(reader, reader.uint32(), options, message.templateId);
                    break;
                case /* string package_name */ 2:
                    message.packageName = reader.string();
                    break;
                case /* com.daml.ledger.api.v2.Value key */ 3:
                    message.key = Value.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* bytes hash */ 4:
                    message.hash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.Identifier template_id = 1; */
        if (message.templateId)
            Identifier.internalBinaryWrite(message.templateId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string package_name = 2; */
        if (message.packageName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.packageName);
        /* com.daml.ledger.api.v2.Value key = 3; */
        if (message.key)
            Value.internalBinaryWrite(message.key, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes hash = 4; */
        if (message.hash.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.interactive.GlobalKey
 */
export const GlobalKey = new GlobalKey$Type();
