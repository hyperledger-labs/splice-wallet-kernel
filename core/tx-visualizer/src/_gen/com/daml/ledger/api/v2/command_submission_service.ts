// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/command_submission_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ReassignmentCommands } from "./reassignment_commands";
import { Commands } from "./commands";
/**
 * The submitted commands will be processed atomically in a single transaction. Moreover, each ``Command`` in ``commands`` will be executed in the order specified by the request.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.SubmitRequest
 */
export interface SubmitRequest {
    /**
     * The commands to be submitted in a single transaction.
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.Commands commands = 1
     */
    commands?: Commands;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.SubmitResponse
 */
export interface SubmitResponse {
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.SubmitReassignmentRequest
 */
export interface SubmitReassignmentRequest {
    /**
     * The reassignment command to be submitted.
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.ReassignmentCommands reassignment_commands = 1
     */
    reassignmentCommands?: ReassignmentCommands;
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.SubmitReassignmentResponse
 */
export interface SubmitReassignmentResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class SubmitRequest$Type extends MessageType<SubmitRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.SubmitRequest", [
            { no: 1, name: "commands", kind: "message", T: () => Commands }
        ]);
    }
    create(value?: PartialMessage<SubmitRequest>): SubmitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitRequest): SubmitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.Commands commands */ 1:
                    message.commands = Commands.internalBinaryRead(reader, reader.uint32(), options, message.commands);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.Commands commands = 1; */
        if (message.commands)
            Commands.internalBinaryWrite(message.commands, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.SubmitRequest
 */
export const SubmitRequest = new SubmitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitResponse$Type extends MessageType<SubmitResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.SubmitResponse", []);
    }
    create(value?: PartialMessage<SubmitResponse>): SubmitResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitResponse): SubmitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.SubmitResponse
 */
export const SubmitResponse = new SubmitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitReassignmentRequest$Type extends MessageType<SubmitReassignmentRequest> {
    constructor() {
        super("com.daml.ledger.api.v2.SubmitReassignmentRequest", [
            { no: 1, name: "reassignment_commands", kind: "message", T: () => ReassignmentCommands }
        ]);
    }
    create(value?: PartialMessage<SubmitReassignmentRequest>): SubmitReassignmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitReassignmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitReassignmentRequest): SubmitReassignmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.ReassignmentCommands reassignment_commands */ 1:
                    message.reassignmentCommands = ReassignmentCommands.internalBinaryRead(reader, reader.uint32(), options, message.reassignmentCommands);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitReassignmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.daml.ledger.api.v2.ReassignmentCommands reassignment_commands = 1; */
        if (message.reassignmentCommands)
            ReassignmentCommands.internalBinaryWrite(message.reassignmentCommands, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.SubmitReassignmentRequest
 */
export const SubmitReassignmentRequest = new SubmitReassignmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitReassignmentResponse$Type extends MessageType<SubmitReassignmentResponse> {
    constructor() {
        super("com.daml.ledger.api.v2.SubmitReassignmentResponse", []);
    }
    create(value?: PartialMessage<SubmitReassignmentResponse>): SubmitReassignmentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitReassignmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitReassignmentResponse): SubmitReassignmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitReassignmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.SubmitReassignmentResponse
 */
export const SubmitReassignmentResponse = new SubmitReassignmentResponse$Type();
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.CommandSubmissionService
 */
export const CommandSubmissionService = new ServiceType("com.daml.ledger.api.v2.CommandSubmissionService", [
    { name: "Submit", options: {}, I: SubmitRequest, O: SubmitResponse },
    { name: "SubmitReassignment", options: {}, I: SubmitReassignmentRequest, O: SubmitReassignmentResponse }
]);
