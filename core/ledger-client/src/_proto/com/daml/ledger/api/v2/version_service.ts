// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/version_service.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Duration } from '../../../../../google/protobuf/duration.js'
import { ExperimentalFeatures } from './experimental_features.js'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.GetLedgerApiVersionRequest
 */
export interface GetLedgerApiVersionRequest {}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.GetLedgerApiVersionResponse
 */
export interface GetLedgerApiVersionResponse {
    /**
     * The version of the ledger API.
     *
     * @generated from protobuf field: string version = 1
     */
    version: string
    /**
     * The features supported by this Ledger API endpoint.
     *
     * Daml applications CAN use the feature descriptor on top of
     * version constraints on the Ledger API version to determine
     * whether a given Ledger API endpoint supports the features
     * required to run the application.
     *
     * See the feature descriptions themselves for the relation between
     * Ledger API versions and feature presence.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.FeaturesDescriptor features = 2
     */
    features?: FeaturesDescriptor
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.FeaturesDescriptor
 */
export interface FeaturesDescriptor {
    /**
     * Features under development or features that are used
     * for ledger implementation testing purposes only.
     *
     * Daml applications SHOULD not depend on these in production.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.ExperimentalFeatures experimental = 1
     */
    experimental?: ExperimentalFeatures
    /**
     * If set, then the Ledger API server supports user management.
     * It is recommended that clients query this field to gracefully adjust their behavior for
     * ledgers that do not support user management.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.UserManagementFeature user_management = 2
     */
    userManagement?: UserManagementFeature
    /**
     * If set, then the Ledger API server supports party management configurability.
     * It is recommended that clients query this field to gracefully adjust their behavior to
     * maximum party page size.
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.PartyManagementFeature party_management = 3
     */
    partyManagement?: PartyManagementFeature
    /**
     * It contains the timeouts related to the periodic offset checkpoint emission
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.OffsetCheckpointFeature offset_checkpoint = 4
     */
    offsetCheckpoint?: OffsetCheckpointFeature
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.UserManagementFeature
 */
export interface UserManagementFeature {
    /**
     * Whether the Ledger API server provides the user management service.
     *
     * @generated from protobuf field: bool supported = 1
     */
    supported: boolean
    /**
     * The maximum number of rights that can be assigned to a single user.
     * Servers MUST support at least 100 rights per user.
     * A value of 0 means that the server enforces no rights per user limit.
     *
     * @generated from protobuf field: int32 max_rights_per_user = 2
     */
    maxRightsPerUser: number
    /**
     * The maximum number of users the server can return in a single response (page).
     * Servers MUST support at least a 100 users per page.
     * A value of 0 means that the server enforces no page size limit.
     *
     * @generated from protobuf field: int32 max_users_page_size = 3
     */
    maxUsersPageSize: number
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.PartyManagementFeature
 */
export interface PartyManagementFeature {
    /**
     * The maximum number of parties the server can return in a single response (page).
     *
     * @generated from protobuf field: int32 max_parties_page_size = 1
     */
    maxPartiesPageSize: number
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.OffsetCheckpointFeature
 */
export interface OffsetCheckpointFeature {
    /**
     * The maximum delay to emmit a new OffsetCheckpoint if it exists
     *
     * @generated from protobuf field: google.protobuf.Duration max_offset_checkpoint_emission_delay = 1
     */
    maxOffsetCheckpointEmissionDelay?: Duration
}
// @generated message type with reflection information, may provide speed optimized methods
class GetLedgerApiVersionRequest$Type extends MessageType<GetLedgerApiVersionRequest> {
    constructor() {
        super('com.daml.ledger.api.v2.GetLedgerApiVersionRequest', [])
    }
    create(
        value?: PartialMessage<GetLedgerApiVersionRequest>
    ): GetLedgerApiVersionRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<GetLedgerApiVersionRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GetLedgerApiVersionRequest
    ): GetLedgerApiVersionRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GetLedgerApiVersionRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.GetLedgerApiVersionRequest
 */
export const GetLedgerApiVersionRequest = new GetLedgerApiVersionRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GetLedgerApiVersionResponse$Type extends MessageType<GetLedgerApiVersionResponse> {
    constructor() {
        super('com.daml.ledger.api.v2.GetLedgerApiVersionResponse', [
            {
                no: 1,
                name: 'version',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'features',
                kind: 'message',
                T: () => FeaturesDescriptor,
            },
        ])
    }
    create(
        value?: PartialMessage<GetLedgerApiVersionResponse>
    ): GetLedgerApiVersionResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.version = ''
        if (value !== undefined)
            reflectionMergePartial<GetLedgerApiVersionResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GetLedgerApiVersionResponse
    ): GetLedgerApiVersionResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string()
                    break
                case /* com.daml.ledger.api.v2.FeaturesDescriptor features */ 2:
                    message.features = FeaturesDescriptor.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.features
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GetLedgerApiVersionResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.version)
        /* com.daml.ledger.api.v2.FeaturesDescriptor features = 2; */
        if (message.features)
            FeaturesDescriptor.internalBinaryWrite(
                message.features,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.GetLedgerApiVersionResponse
 */
export const GetLedgerApiVersionResponse =
    new GetLedgerApiVersionResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class FeaturesDescriptor$Type extends MessageType<FeaturesDescriptor> {
    constructor() {
        super('com.daml.ledger.api.v2.FeaturesDescriptor', [
            {
                no: 1,
                name: 'experimental',
                kind: 'message',
                T: () => ExperimentalFeatures,
            },
            {
                no: 2,
                name: 'user_management',
                kind: 'message',
                T: () => UserManagementFeature,
            },
            {
                no: 3,
                name: 'party_management',
                kind: 'message',
                T: () => PartyManagementFeature,
            },
            {
                no: 4,
                name: 'offset_checkpoint',
                kind: 'message',
                T: () => OffsetCheckpointFeature,
            },
        ])
    }
    create(value?: PartialMessage<FeaturesDescriptor>): FeaturesDescriptor {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<FeaturesDescriptor>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: FeaturesDescriptor
    ): FeaturesDescriptor {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.ExperimentalFeatures experimental */ 1:
                    message.experimental =
                        ExperimentalFeatures.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.experimental
                        )
                    break
                case /* com.daml.ledger.api.v2.UserManagementFeature user_management */ 2:
                    message.userManagement =
                        UserManagementFeature.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.userManagement
                        )
                    break
                case /* com.daml.ledger.api.v2.PartyManagementFeature party_management */ 3:
                    message.partyManagement =
                        PartyManagementFeature.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.partyManagement
                        )
                    break
                case /* com.daml.ledger.api.v2.OffsetCheckpointFeature offset_checkpoint */ 4:
                    message.offsetCheckpoint =
                        OffsetCheckpointFeature.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.offsetCheckpoint
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: FeaturesDescriptor,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.ExperimentalFeatures experimental = 1; */
        if (message.experimental)
            ExperimentalFeatures.internalBinaryWrite(
                message.experimental,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.UserManagementFeature user_management = 2; */
        if (message.userManagement)
            UserManagementFeature.internalBinaryWrite(
                message.userManagement,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.PartyManagementFeature party_management = 3; */
        if (message.partyManagement)
            PartyManagementFeature.internalBinaryWrite(
                message.partyManagement,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.OffsetCheckpointFeature offset_checkpoint = 4; */
        if (message.offsetCheckpoint)
            OffsetCheckpointFeature.internalBinaryWrite(
                message.offsetCheckpoint,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.FeaturesDescriptor
 */
export const FeaturesDescriptor = new FeaturesDescriptor$Type()
// @generated message type with reflection information, may provide speed optimized methods
class UserManagementFeature$Type extends MessageType<UserManagementFeature> {
    constructor() {
        super('com.daml.ledger.api.v2.UserManagementFeature', [
            {
                no: 1,
                name: 'supported',
                kind: 'scalar',
                T: 8 /*ScalarType.BOOL*/,
            },
            {
                no: 2,
                name: 'max_rights_per_user',
                kind: 'scalar',
                T: 5 /*ScalarType.INT32*/,
            },
            {
                no: 3,
                name: 'max_users_page_size',
                kind: 'scalar',
                T: 5 /*ScalarType.INT32*/,
            },
        ])
    }
    create(
        value?: PartialMessage<UserManagementFeature>
    ): UserManagementFeature {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.supported = false
        message.maxRightsPerUser = 0
        message.maxUsersPageSize = 0
        if (value !== undefined)
            reflectionMergePartial<UserManagementFeature>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: UserManagementFeature
    ): UserManagementFeature {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bool supported */ 1:
                    message.supported = reader.bool()
                    break
                case /* int32 max_rights_per_user */ 2:
                    message.maxRightsPerUser = reader.int32()
                    break
                case /* int32 max_users_page_size */ 3:
                    message.maxUsersPageSize = reader.int32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: UserManagementFeature,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bool supported = 1; */
        if (message.supported !== false)
            writer.tag(1, WireType.Varint).bool(message.supported)
        /* int32 max_rights_per_user = 2; */
        if (message.maxRightsPerUser !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxRightsPerUser)
        /* int32 max_users_page_size = 3; */
        if (message.maxUsersPageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxUsersPageSize)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.UserManagementFeature
 */
export const UserManagementFeature = new UserManagementFeature$Type()
// @generated message type with reflection information, may provide speed optimized methods
class PartyManagementFeature$Type extends MessageType<PartyManagementFeature> {
    constructor() {
        super('com.daml.ledger.api.v2.PartyManagementFeature', [
            {
                no: 1,
                name: 'max_parties_page_size',
                kind: 'scalar',
                T: 5 /*ScalarType.INT32*/,
            },
        ])
    }
    create(
        value?: PartialMessage<PartyManagementFeature>
    ): PartyManagementFeature {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.maxPartiesPageSize = 0
        if (value !== undefined)
            reflectionMergePartial<PartyManagementFeature>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: PartyManagementFeature
    ): PartyManagementFeature {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* int32 max_parties_page_size */ 1:
                    message.maxPartiesPageSize = reader.int32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: PartyManagementFeature,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* int32 max_parties_page_size = 1; */
        if (message.maxPartiesPageSize !== 0)
            writer.tag(1, WireType.Varint).int32(message.maxPartiesPageSize)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.PartyManagementFeature
 */
export const PartyManagementFeature = new PartyManagementFeature$Type()
// @generated message type with reflection information, may provide speed optimized methods
class OffsetCheckpointFeature$Type extends MessageType<OffsetCheckpointFeature> {
    constructor() {
        super('com.daml.ledger.api.v2.OffsetCheckpointFeature', [
            {
                no: 1,
                name: 'max_offset_checkpoint_emission_delay',
                kind: 'message',
                T: () => Duration,
            },
        ])
    }
    create(
        value?: PartialMessage<OffsetCheckpointFeature>
    ): OffsetCheckpointFeature {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<OffsetCheckpointFeature>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: OffsetCheckpointFeature
    ): OffsetCheckpointFeature {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* google.protobuf.Duration max_offset_checkpoint_emission_delay */ 1:
                    message.maxOffsetCheckpointEmissionDelay =
                        Duration.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.maxOffsetCheckpointEmissionDelay
                        )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: OffsetCheckpointFeature,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* google.protobuf.Duration max_offset_checkpoint_emission_delay = 1; */
        if (message.maxOffsetCheckpointEmissionDelay)
            Duration.internalBinaryWrite(
                message.maxOffsetCheckpointEmissionDelay,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.OffsetCheckpointFeature
 */
export const OffsetCheckpointFeature = new OffsetCheckpointFeature$Type()
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.VersionService
 */
export const VersionService = new ServiceType(
    'com.daml.ledger.api.v2.VersionService',
    [
        {
            name: 'GetLedgerApiVersion',
            options: {},
            I: GetLedgerApiVersionRequest,
            O: GetLedgerApiVersionResponse,
        },
    ]
)
