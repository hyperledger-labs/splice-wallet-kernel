// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/admin/package_management_service.proto" (package "com.daml.ledger.api.v2.admin", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Timestamp } from '../../../../../../google/protobuf/timestamp.js'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListKnownPackagesRequest
 */
export interface ListKnownPackagesRequest {}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ListKnownPackagesResponse
 */
export interface ListKnownPackagesResponse {
    /**
     * The details of all Daml-LF packages known to backing participant.
     * Required
     *
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.PackageDetails package_details = 1
     */
    packageDetails: PackageDetails[]
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.PackageDetails
 */
export interface PackageDetails {
    /**
     * The identity of the Daml-LF package.
     * Must be a valid PackageIdString (as describe in ``value.proto``).
     * Required
     *
     * @generated from protobuf field: string package_id = 1
     */
    packageId: string
    /**
     * Size of the package in bytes.
     * The size of the package is given by the size of the ``daml_lf``
     * ArchivePayload. See further details in ``daml_lf.proto``.
     * Required
     *
     * @generated from protobuf field: uint64 package_size = 2
     */
    packageSize: bigint
    /**
     * Indicates since when the package is known to the backing participant.
     * Required
     *
     * @generated from protobuf field: google.protobuf.Timestamp known_since = 3
     */
    knownSince?: Timestamp
    /**
     * Name of the package as defined by the package metadata
     *
     * @generated from protobuf field: string name = 4
     */
    name: string
    /**
     * Version of the package as defined by the package metadata
     *
     * @generated from protobuf field: string version = 5
     */
    version: string
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UploadDarFileRequest
 */
export interface UploadDarFileRequest {
    /**
     * Contains a Daml archive DAR file, which in turn is a jar like zipped
     * container for ``daml_lf`` archives. See further details in
     * ``daml_lf.proto``.
     * Required
     *
     * @generated from protobuf field: bytes dar_file = 1
     */
    darFile: Uint8Array
    /**
     * Unique submission identifier.
     * Optional, defaults to a random identifier.
     *
     * @generated from protobuf field: string submission_id = 2
     */
    submissionId: string
}
/**
 * A message that is received when the upload operation succeeded.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.UploadDarFileResponse
 */
export interface UploadDarFileResponse {}
/**
 * Performs the same checks that UploadDarFileRequest would perform, but doesn't
 * upload the DAR.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ValidateDarFileRequest
 */
export interface ValidateDarFileRequest {
    /**
     * Contains a Daml archive DAR file, which in turn is a jar like zipped
     * container for ``daml_lf`` archives. See further details in
     * ``daml_lf.proto``.
     * Required
     *
     * @generated from protobuf field: bytes dar_file = 1
     */
    darFile: Uint8Array
    /**
     * Unique submission identifier.
     * Optional, defaults to a random identifier.
     *
     * @generated from protobuf field: string submission_id = 2
     */
    submissionId: string
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.ValidateDarFileResponse
 */
export interface ValidateDarFileResponse {}
// @generated message type with reflection information, may provide speed optimized methods
class ListKnownPackagesRequest$Type extends MessageType<ListKnownPackagesRequest> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.ListKnownPackagesRequest', [])
    }
    create(
        value?: PartialMessage<ListKnownPackagesRequest>
    ): ListKnownPackagesRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListKnownPackagesRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListKnownPackagesRequest
    ): ListKnownPackagesRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListKnownPackagesRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListKnownPackagesRequest
 */
export const ListKnownPackagesRequest = new ListKnownPackagesRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListKnownPackagesResponse$Type extends MessageType<ListKnownPackagesResponse> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.ListKnownPackagesResponse', [
            {
                no: 1,
                name: 'package_details',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => PackageDetails,
            },
        ])
    }
    create(
        value?: PartialMessage<ListKnownPackagesResponse>
    ): ListKnownPackagesResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.packageDetails = []
        if (value !== undefined)
            reflectionMergePartial<ListKnownPackagesResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListKnownPackagesResponse
    ): ListKnownPackagesResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.PackageDetails package_details */ 1:
                    message.packageDetails.push(
                        PackageDetails.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListKnownPackagesResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.PackageDetails package_details = 1; */
        for (let i = 0; i < message.packageDetails.length; i++)
            PackageDetails.internalBinaryWrite(
                message.packageDetails[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ListKnownPackagesResponse
 */
export const ListKnownPackagesResponse = new ListKnownPackagesResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class PackageDetails$Type extends MessageType<PackageDetails> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.PackageDetails', [
            {
                no: 1,
                name: 'package_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'package_size',
                kind: 'scalar',
                T: 4 /*ScalarType.UINT64*/,
                L: 0 /*LongType.BIGINT*/,
            },
            { no: 3, name: 'known_since', kind: 'message', T: () => Timestamp },
            { no: 4, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            {
                no: 5,
                name: 'version',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(value?: PartialMessage<PackageDetails>): PackageDetails {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.packageId = ''
        message.packageSize = 0n
        message.name = ''
        message.version = ''
        if (value !== undefined)
            reflectionMergePartial<PackageDetails>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: PackageDetails
    ): PackageDetails {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string package_id */ 1:
                    message.packageId = reader.string()
                    break
                case /* uint64 package_size */ 2:
                    message.packageSize = reader.uint64().toBigInt()
                    break
                case /* google.protobuf.Timestamp known_since */ 3:
                    message.knownSince = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.knownSince
                    )
                    break
                case /* string name */ 4:
                    message.name = reader.string()
                    break
                case /* string version */ 5:
                    message.version = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: PackageDetails,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string package_id = 1; */
        if (message.packageId !== '')
            writer.tag(1, WireType.LengthDelimited).string(message.packageId)
        /* uint64 package_size = 2; */
        if (message.packageSize !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.packageSize)
        /* google.protobuf.Timestamp known_since = 3; */
        if (message.knownSince)
            Timestamp.internalBinaryWrite(
                message.knownSince,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string name = 4; */
        if (message.name !== '')
            writer.tag(4, WireType.LengthDelimited).string(message.name)
        /* string version = 5; */
        if (message.version !== '')
            writer.tag(5, WireType.LengthDelimited).string(message.version)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.PackageDetails
 */
export const PackageDetails = new PackageDetails$Type()
// @generated message type with reflection information, may provide speed optimized methods
class UploadDarFileRequest$Type extends MessageType<UploadDarFileRequest> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.UploadDarFileRequest', [
            {
                no: 1,
                name: 'dar_file',
                kind: 'scalar',
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 2,
                name: 'submission_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(value?: PartialMessage<UploadDarFileRequest>): UploadDarFileRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.darFile = new Uint8Array(0)
        message.submissionId = ''
        if (value !== undefined)
            reflectionMergePartial<UploadDarFileRequest>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: UploadDarFileRequest
    ): UploadDarFileRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes dar_file */ 1:
                    message.darFile = reader.bytes()
                    break
                case /* string submission_id */ 2:
                    message.submissionId = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: UploadDarFileRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bytes dar_file = 1; */
        if (message.darFile.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.darFile)
        /* string submission_id = 2; */
        if (message.submissionId !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.submissionId)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UploadDarFileRequest
 */
export const UploadDarFileRequest = new UploadDarFileRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class UploadDarFileResponse$Type extends MessageType<UploadDarFileResponse> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.UploadDarFileResponse', [])
    }
    create(
        value?: PartialMessage<UploadDarFileResponse>
    ): UploadDarFileResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<UploadDarFileResponse>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: UploadDarFileResponse
    ): UploadDarFileResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: UploadDarFileResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.UploadDarFileResponse
 */
export const UploadDarFileResponse = new UploadDarFileResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ValidateDarFileRequest$Type extends MessageType<ValidateDarFileRequest> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.ValidateDarFileRequest', [
            {
                no: 1,
                name: 'dar_file',
                kind: 'scalar',
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 2,
                name: 'submission_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(
        value?: PartialMessage<ValidateDarFileRequest>
    ): ValidateDarFileRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.darFile = new Uint8Array(0)
        message.submissionId = ''
        if (value !== undefined)
            reflectionMergePartial<ValidateDarFileRequest>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ValidateDarFileRequest
    ): ValidateDarFileRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes dar_file */ 1:
                    message.darFile = reader.bytes()
                    break
                case /* string submission_id */ 2:
                    message.submissionId = reader.string()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ValidateDarFileRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bytes dar_file = 1; */
        if (message.darFile.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.darFile)
        /* string submission_id = 2; */
        if (message.submissionId !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.submissionId)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ValidateDarFileRequest
 */
export const ValidateDarFileRequest = new ValidateDarFileRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ValidateDarFileResponse$Type extends MessageType<ValidateDarFileResponse> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.ValidateDarFileResponse', [])
    }
    create(
        value?: PartialMessage<ValidateDarFileResponse>
    ): ValidateDarFileResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ValidateDarFileResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ValidateDarFileResponse
    ): ValidateDarFileResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ValidateDarFileResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.ValidateDarFileResponse
 */
export const ValidateDarFileResponse = new ValidateDarFileResponse$Type()
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.admin.PackageManagementService
 */
export const PackageManagementService = new ServiceType(
    'com.daml.ledger.api.v2.admin.PackageManagementService',
    [
        {
            name: 'ListKnownPackages',
            options: {},
            I: ListKnownPackagesRequest,
            O: ListKnownPackagesResponse,
        },
        {
            name: 'UploadDarFile',
            options: {},
            I: UploadDarFileRequest,
            O: UploadDarFileResponse,
        },
        {
            name: 'ValidateDarFile',
            options: {},
            I: ValidateDarFileRequest,
            O: ValidateDarFileResponse,
        },
    ]
)
