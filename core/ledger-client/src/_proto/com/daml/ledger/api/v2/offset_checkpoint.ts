// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/offset_checkpoint.proto" (package "com.daml.ledger.api.v2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Timestamp } from '../../../../../google/protobuf/timestamp.js'
/**
 * OffsetCheckpoints may be used to:
 *
 * - detect time out of commands.
 * - provide an offset which can be used to restart consumption.
 *
 * @generated from protobuf message com.daml.ledger.api.v2.OffsetCheckpoint
 */
export interface OffsetCheckpoint {
    /**
     * The participant's offset, the details of the offset field are described in ``community/ledger-api/README.md``.
     * Required, must be a valid absolute offset (positive integer).
     *
     * @generated from protobuf field: int64 offset = 1
     */
    offset: bigint
    /**
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.SynchronizerTime synchronizer_times = 2
     */
    synchronizerTimes: SynchronizerTime[]
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.SynchronizerTime
 */
export interface SynchronizerTime {
    /**
     * The id of the synchronizer.
     * Required
     *
     * @generated from protobuf field: string synchronizer_id = 1
     */
    synchronizerId: string
    /**
     * All commands with a maximum record time below this value MUST be considered lost if their completion has not arrived before this checkpoint.
     * Required
     *
     * @generated from protobuf field: google.protobuf.Timestamp record_time = 2
     */
    recordTime?: Timestamp
}
// @generated message type with reflection information, may provide speed optimized methods
class OffsetCheckpoint$Type extends MessageType<OffsetCheckpoint> {
    constructor() {
        super('com.daml.ledger.api.v2.OffsetCheckpoint', [
            {
                no: 1,
                name: 'offset',
                kind: 'scalar',
                T: 3 /*ScalarType.INT64*/,
                L: 0 /*LongType.BIGINT*/,
            },
            {
                no: 2,
                name: 'synchronizer_times',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => SynchronizerTime,
            },
        ])
    }
    create(value?: PartialMessage<OffsetCheckpoint>): OffsetCheckpoint {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.offset = 0n
        message.synchronizerTimes = []
        if (value !== undefined)
            reflectionMergePartial<OffsetCheckpoint>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: OffsetCheckpoint
    ): OffsetCheckpoint {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* int64 offset */ 1:
                    message.offset = reader.int64().toBigInt()
                    break
                case /* repeated com.daml.ledger.api.v2.SynchronizerTime synchronizer_times */ 2:
                    message.synchronizerTimes.push(
                        SynchronizerTime.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: OffsetCheckpoint,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* int64 offset = 1; */
        if (message.offset !== 0n)
            writer.tag(1, WireType.Varint).int64(message.offset)
        /* repeated com.daml.ledger.api.v2.SynchronizerTime synchronizer_times = 2; */
        for (let i = 0; i < message.synchronizerTimes.length; i++)
            SynchronizerTime.internalBinaryWrite(
                message.synchronizerTimes[i],
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.OffsetCheckpoint
 */
export const OffsetCheckpoint = new OffsetCheckpoint$Type()
// @generated message type with reflection information, may provide speed optimized methods
class SynchronizerTime$Type extends MessageType<SynchronizerTime> {
    constructor() {
        super('com.daml.ledger.api.v2.SynchronizerTime', [
            {
                no: 1,
                name: 'synchronizer_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            { no: 2, name: 'record_time', kind: 'message', T: () => Timestamp },
        ])
    }
    create(value?: PartialMessage<SynchronizerTime>): SynchronizerTime {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.synchronizerId = ''
        if (value !== undefined)
            reflectionMergePartial<SynchronizerTime>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: SynchronizerTime
    ): SynchronizerTime {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string synchronizer_id */ 1:
                    message.synchronizerId = reader.string()
                    break
                case /* google.protobuf.Timestamp record_time */ 2:
                    message.recordTime = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.recordTime
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: SynchronizerTime,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string synchronizer_id = 1; */
        if (message.synchronizerId !== '')
            writer
                .tag(1, WireType.LengthDelimited)
                .string(message.synchronizerId)
        /* google.protobuf.Timestamp record_time = 2; */
        if (message.recordTime)
            Timestamp.internalBinaryWrite(
                message.recordTime,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.SynchronizerTime
 */
export const SynchronizerTime = new SynchronizerTime$Type()
