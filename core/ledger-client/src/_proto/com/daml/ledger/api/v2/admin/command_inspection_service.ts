// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/daml/ledger/api/v2/admin/command_inspection_service.proto" (package "com.daml.ledger.api.v2.admin", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Value } from '../value.js'
import { Identifier } from '../value.js'
import { Command } from '../commands.js'
import { Completion } from '../completion.js'
import { Timestamp } from '../../../../../../google/protobuf/timestamp.js'
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GetCommandStatusRequest
 */
export interface GetCommandStatusRequest {
    /**
     * @generated from protobuf field: string command_id_prefix = 1
     */
    commandIdPrefix: string // optional filter by command id
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.CommandState state = 2
     */
    state: CommandState // optional filter by state
    /**
     * @generated from protobuf field: uint32 limit = 3
     */
    limit: number // optional limit of returned statuses, defaults to 100
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.GetCommandStatusResponse
 */
export interface GetCommandStatusResponse {
    /**
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.CommandStatus command_status = 1
     */
    commandStatus: CommandStatus[]
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.CommandStatus
 */
export interface CommandStatus {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp started = 1
     */
    started?: Timestamp
    /**
     * @generated from protobuf field: google.protobuf.Timestamp completed = 2
     */
    completed?: Timestamp
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.Completion completion = 3
     */
    completion?: Completion
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.CommandState state = 4
     */
    state: CommandState
    /**
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.Command commands = 5
     */
    commands: Command[]
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.RequestStatistics request_statistics = 6
     */
    requestStatistics?: RequestStatistics
    /**
     * @generated from protobuf field: com.daml.ledger.api.v2.admin.CommandUpdates updates = 7
     */
    updates?: CommandUpdates
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.RequestStatistics
 */
export interface RequestStatistics {
    /**
     * @generated from protobuf field: uint32 envelopes = 1
     */
    envelopes: number
    /**
     * @generated from protobuf field: uint32 request_size = 2
     */
    requestSize: number
    /**
     * @generated from protobuf field: uint32 recipients = 3
     */
    recipients: number
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.CommandUpdates
 */
export interface CommandUpdates {
    /**
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Contract created = 1
     */
    created: Contract[]
    /**
     * @generated from protobuf field: repeated com.daml.ledger.api.v2.admin.Contract archived = 2
     */
    archived: Contract[]
    /**
     * @generated from protobuf field: uint32 exercised = 3
     */
    exercised: number
    /**
     * @generated from protobuf field: uint32 fetched = 4
     */
    fetched: number
    /**
     * @generated from protobuf field: uint32 looked_up_by_key = 5
     */
    lookedUpByKey: number
}
/**
 * @generated from protobuf message com.daml.ledger.api.v2.admin.Contract
 */
export interface Contract {
    /**
     * The identifier of the template used to create the contract.
     * The identifier uses the package-id reference format.
     *
     * Required
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.Identifier template_id = 1
     */
    templateId?: Identifier
    /**
     * The contract's ID
     *
     * Required
     *
     * @generated from protobuf field: string contract_id = 2
     */
    contractId: string
    /**
     * The contract key, if defined
     *
     * Optional
     *
     * @generated from protobuf field: com.daml.ledger.api.v2.Value contract_key = 3
     */
    contractKey?: Value
}
/**
 * @generated from protobuf enum com.daml.ledger.api.v2.admin.CommandState
 */
export enum CommandState {
    /**
     * This value acts as wildcard in the queries
     *
     * @generated from protobuf enum value: COMMAND_STATE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: COMMAND_STATE_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: COMMAND_STATE_SUCCEEDED = 2;
     */
    SUCCEEDED = 2,
    /**
     * @generated from protobuf enum value: COMMAND_STATE_FAILED = 3;
     */
    FAILED = 3,
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCommandStatusRequest$Type extends MessageType<GetCommandStatusRequest> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.GetCommandStatusRequest', [
            {
                no: 1,
                name: 'command_id_prefix',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 2,
                name: 'state',
                kind: 'enum',
                T: () => [
                    'com.daml.ledger.api.v2.admin.CommandState',
                    CommandState,
                    'COMMAND_STATE_',
                ],
            },
            {
                no: 3,
                name: 'limit',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
        ])
    }
    create(
        value?: PartialMessage<GetCommandStatusRequest>
    ): GetCommandStatusRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.commandIdPrefix = ''
        message.state = 0
        message.limit = 0
        if (value !== undefined)
            reflectionMergePartial<GetCommandStatusRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GetCommandStatusRequest
    ): GetCommandStatusRequest {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* string command_id_prefix */ 1:
                    message.commandIdPrefix = reader.string()
                    break
                case /* com.daml.ledger.api.v2.admin.CommandState state */ 2:
                    message.state = reader.int32()
                    break
                case /* uint32 limit */ 3:
                    message.limit = reader.uint32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GetCommandStatusRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* string command_id_prefix = 1; */
        if (message.commandIdPrefix !== '')
            writer
                .tag(1, WireType.LengthDelimited)
                .string(message.commandIdPrefix)
        /* com.daml.ledger.api.v2.admin.CommandState state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state)
        /* uint32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).uint32(message.limit)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GetCommandStatusRequest
 */
export const GetCommandStatusRequest = new GetCommandStatusRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GetCommandStatusResponse$Type extends MessageType<GetCommandStatusResponse> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.GetCommandStatusResponse', [
            {
                no: 1,
                name: 'command_status',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => CommandStatus,
            },
        ])
    }
    create(
        value?: PartialMessage<GetCommandStatusResponse>
    ): GetCommandStatusResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.commandStatus = []
        if (value !== undefined)
            reflectionMergePartial<GetCommandStatusResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GetCommandStatusResponse
    ): GetCommandStatusResponse {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.CommandStatus command_status */ 1:
                    message.commandStatus.push(
                        CommandStatus.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GetCommandStatusResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.CommandStatus command_status = 1; */
        for (let i = 0; i < message.commandStatus.length; i++)
            CommandStatus.internalBinaryWrite(
                message.commandStatus[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.GetCommandStatusResponse
 */
export const GetCommandStatusResponse = new GetCommandStatusResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CommandStatus$Type extends MessageType<CommandStatus> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.CommandStatus', [
            { no: 1, name: 'started', kind: 'message', T: () => Timestamp },
            { no: 2, name: 'completed', kind: 'message', T: () => Timestamp },
            { no: 3, name: 'completion', kind: 'message', T: () => Completion },
            {
                no: 4,
                name: 'state',
                kind: 'enum',
                T: () => [
                    'com.daml.ledger.api.v2.admin.CommandState',
                    CommandState,
                    'COMMAND_STATE_',
                ],
            },
            {
                no: 5,
                name: 'commands',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => Command,
            },
            {
                no: 6,
                name: 'request_statistics',
                kind: 'message',
                T: () => RequestStatistics,
            },
            {
                no: 7,
                name: 'updates',
                kind: 'message',
                T: () => CommandUpdates,
            },
        ])
    }
    create(value?: PartialMessage<CommandStatus>): CommandStatus {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.state = 0
        message.commands = []
        if (value !== undefined)
            reflectionMergePartial<CommandStatus>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: CommandStatus
    ): CommandStatus {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* google.protobuf.Timestamp started */ 1:
                    message.started = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.started
                    )
                    break
                case /* google.protobuf.Timestamp completed */ 2:
                    message.completed = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.completed
                    )
                    break
                case /* com.daml.ledger.api.v2.Completion completion */ 3:
                    message.completion = Completion.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.completion
                    )
                    break
                case /* com.daml.ledger.api.v2.admin.CommandState state */ 4:
                    message.state = reader.int32()
                    break
                case /* repeated com.daml.ledger.api.v2.Command commands */ 5:
                    message.commands.push(
                        Command.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                case /* com.daml.ledger.api.v2.admin.RequestStatistics request_statistics */ 6:
                    message.requestStatistics =
                        RequestStatistics.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.requestStatistics
                        )
                    break
                case /* com.daml.ledger.api.v2.admin.CommandUpdates updates */ 7:
                    message.updates = CommandUpdates.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.updates
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: CommandStatus,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* google.protobuf.Timestamp started = 1; */
        if (message.started)
            Timestamp.internalBinaryWrite(
                message.started,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Timestamp completed = 2; */
        if (message.completed)
            Timestamp.internalBinaryWrite(
                message.completed,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.Completion completion = 3; */
        if (message.completion)
            Completion.internalBinaryWrite(
                message.completion,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.admin.CommandState state = 4; */
        if (message.state !== 0)
            writer.tag(4, WireType.Varint).int32(message.state)
        /* repeated com.daml.ledger.api.v2.Command commands = 5; */
        for (let i = 0; i < message.commands.length; i++)
            Command.internalBinaryWrite(
                message.commands[i],
                writer.tag(5, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.admin.RequestStatistics request_statistics = 6; */
        if (message.requestStatistics)
            RequestStatistics.internalBinaryWrite(
                message.requestStatistics,
                writer.tag(6, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.daml.ledger.api.v2.admin.CommandUpdates updates = 7; */
        if (message.updates)
            CommandUpdates.internalBinaryWrite(
                message.updates,
                writer.tag(7, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.CommandStatus
 */
export const CommandStatus = new CommandStatus$Type()
// @generated message type with reflection information, may provide speed optimized methods
class RequestStatistics$Type extends MessageType<RequestStatistics> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.RequestStatistics', [
            {
                no: 1,
                name: 'envelopes',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 2,
                name: 'request_size',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 3,
                name: 'recipients',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
        ])
    }
    create(value?: PartialMessage<RequestStatistics>): RequestStatistics {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.envelopes = 0
        message.requestSize = 0
        message.recipients = 0
        if (value !== undefined)
            reflectionMergePartial<RequestStatistics>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: RequestStatistics
    ): RequestStatistics {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* uint32 envelopes */ 1:
                    message.envelopes = reader.uint32()
                    break
                case /* uint32 request_size */ 2:
                    message.requestSize = reader.uint32()
                    break
                case /* uint32 recipients */ 3:
                    message.recipients = reader.uint32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: RequestStatistics,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* uint32 envelopes = 1; */
        if (message.envelopes !== 0)
            writer.tag(1, WireType.Varint).uint32(message.envelopes)
        /* uint32 request_size = 2; */
        if (message.requestSize !== 0)
            writer.tag(2, WireType.Varint).uint32(message.requestSize)
        /* uint32 recipients = 3; */
        if (message.recipients !== 0)
            writer.tag(3, WireType.Varint).uint32(message.recipients)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.RequestStatistics
 */
export const RequestStatistics = new RequestStatistics$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CommandUpdates$Type extends MessageType<CommandUpdates> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.CommandUpdates', [
            {
                no: 1,
                name: 'created',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => Contract,
            },
            {
                no: 2,
                name: 'archived',
                kind: 'message',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: () => Contract,
            },
            {
                no: 3,
                name: 'exercised',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 4,
                name: 'fetched',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
            {
                no: 5,
                name: 'looked_up_by_key',
                kind: 'scalar',
                T: 13 /*ScalarType.UINT32*/,
            },
        ])
    }
    create(value?: PartialMessage<CommandUpdates>): CommandUpdates {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.created = []
        message.archived = []
        message.exercised = 0
        message.fetched = 0
        message.lookedUpByKey = 0
        if (value !== undefined)
            reflectionMergePartial<CommandUpdates>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: CommandUpdates
    ): CommandUpdates {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.daml.ledger.api.v2.admin.Contract created */ 1:
                    message.created.push(
                        Contract.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                case /* repeated com.daml.ledger.api.v2.admin.Contract archived */ 2:
                    message.archived.push(
                        Contract.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                case /* uint32 exercised */ 3:
                    message.exercised = reader.uint32()
                    break
                case /* uint32 fetched */ 4:
                    message.fetched = reader.uint32()
                    break
                case /* uint32 looked_up_by_key */ 5:
                    message.lookedUpByKey = reader.uint32()
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: CommandUpdates,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.daml.ledger.api.v2.admin.Contract created = 1; */
        for (let i = 0; i < message.created.length; i++)
            Contract.internalBinaryWrite(
                message.created[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated com.daml.ledger.api.v2.admin.Contract archived = 2; */
        for (let i = 0; i < message.archived.length; i++)
            Contract.internalBinaryWrite(
                message.archived[i],
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* uint32 exercised = 3; */
        if (message.exercised !== 0)
            writer.tag(3, WireType.Varint).uint32(message.exercised)
        /* uint32 fetched = 4; */
        if (message.fetched !== 0)
            writer.tag(4, WireType.Varint).uint32(message.fetched)
        /* uint32 looked_up_by_key = 5; */
        if (message.lookedUpByKey !== 0)
            writer.tag(5, WireType.Varint).uint32(message.lookedUpByKey)
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.CommandUpdates
 */
export const CommandUpdates = new CommandUpdates$Type()
// @generated message type with reflection information, may provide speed optimized methods
class Contract$Type extends MessageType<Contract> {
    constructor() {
        super('com.daml.ledger.api.v2.admin.Contract', [
            {
                no: 1,
                name: 'template_id',
                kind: 'message',
                T: () => Identifier,
            },
            {
                no: 2,
                name: 'contract_id',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            { no: 3, name: 'contract_key', kind: 'message', T: () => Value },
        ])
    }
    create(value?: PartialMessage<Contract>): Contract {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.contractId = ''
        if (value !== undefined)
            reflectionMergePartial<Contract>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: Contract
    ): Contract {
        let message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.daml.ledger.api.v2.Identifier template_id */ 1:
                    message.templateId = Identifier.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.templateId
                    )
                    break
                case /* string contract_id */ 2:
                    message.contractId = reader.string()
                    break
                case /* com.daml.ledger.api.v2.Value contract_key */ 3:
                    message.contractKey = Value.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.contractKey
                    )
                    break
                default:
                    let u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    let d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: Contract,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.daml.ledger.api.v2.Identifier template_id = 1; */
        if (message.templateId)
            Identifier.internalBinaryWrite(
                message.templateId,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string contract_id = 2; */
        if (message.contractId !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.contractId)
        /* com.daml.ledger.api.v2.Value contract_key = 3; */
        if (message.contractKey)
            Value.internalBinaryWrite(
                message.contractKey,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        let u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.daml.ledger.api.v2.admin.Contract
 */
export const Contract = new Contract$Type()
/**
 * @generated ServiceType for protobuf service com.daml.ledger.api.v2.admin.CommandInspectionService
 */
export const CommandInspectionService = new ServiceType(
    'com.daml.ledger.api.v2.admin.CommandInspectionService',
    [
        {
            name: 'GetCommandStatus',
            options: {},
            I: GetCommandStatusRequest,
            O: GetCommandStatusResponse,
        },
    ]
)
