// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "com/digitalasset/canton/topology/admin/v30/topology_manager_read_service.proto" (package "com.digitalasset.canton.topology.admin.v30", syntax proto3)
// tslint:disable
//
// Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { TopologyTransactions } from './common.js'
import { SequencerConnectionSuccessor } from '../../../protocol/v30/topology.js'
import { SynchronizerUpgradeAnnouncement } from '../../../protocol/v30/topology.js'
import { PurgeTopologyTransaction } from '../../../protocol/v30/topology.js'
import { SequencerSynchronizerState } from '../../../protocol/v30/topology.js'
import { MediatorSynchronizerState } from '../../../protocol/v30/topology.js'
import { DynamicSynchronizerParameters } from '../../../protocol/v30/synchronizer_parameters.js'
import { PartyToParticipant } from '../../../protocol/v30/topology.js'
import { VettedPackages } from '../../../protocol/v30/topology.js'
import { PartyHostingLimits } from '../../../protocol/v30/topology.js'
import { ParticipantSynchronizerPermission } from '../../../protocol/v30/topology.js'
import { SynchronizerTrustCertificate } from '../../../protocol/v30/topology.js'
import { PartyToKeyMapping } from '../../../protocol/v30/topology.js'
import { OwnerToKeyMapping } from '../../../protocol/v30/topology.js'
import { DecentralizedNamespaceDefinition } from '../../../protocol/v30/topology.js'
import { NamespaceDelegation } from '../../../protocol/v30/topology.js'
import { Empty } from '../../../../../../google/protobuf/empty.js'
import { Timestamp } from '../../../../../../google/protobuf/timestamp.js'
import { Enums_TopologyChangeOp } from '../../../protocol/v30/topology.js'
import { StoreId } from './common.js'
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.BaseQuery
 */
export interface BaseQuery {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.StoreId store = 1
     */
    store?: StoreId
    /**
     * whether to query only for proposals instead of approved topology mappings
     *
     * @generated from protobuf field: bool proposals = 2
     */
    proposals: boolean
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation = 3
     */
    operation: Enums_TopologyChangeOp
    /**
     * @generated from protobuf oneof: time_query
     */
    timeQuery:
        | {
              oneofKind: 'snapshot'
              /**
               * @generated from protobuf field: google.protobuf.Timestamp snapshot = 5
               */
              snapshot: Timestamp
          }
        | {
              oneofKind: 'headState'
              /**
               * @generated from protobuf field: google.protobuf.Empty head_state = 6
               */
              headState: Empty
          }
        | {
              oneofKind: 'range'
              /**
               * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange range = 7
               */
              range: BaseQuery_TimeRange
          }
        | {
              oneofKind: undefined
          }
    /**
     * @generated from protobuf field: string filter_signed_key = 8
     */
    filterSignedKey: string
    /**
     * @generated from protobuf field: optional int32 protocol_version = 9
     */
    protocolVersion?: number
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange
 */
export interface BaseQuery_TimeRange {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp from = 1
     */
    from?: Timestamp
    /**
     * @generated from protobuf field: google.protobuf.Timestamp until = 2
     */
    until?: Timestamp
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.BaseResult
 */
export interface BaseResult {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.StoreId store = 1
     */
    store?: StoreId
    /**
     * @generated from protobuf field: google.protobuf.Timestamp sequenced = 2
     */
    sequenced?: Timestamp
    /**
     * @generated from protobuf field: google.protobuf.Timestamp valid_from = 3
     */
    validFrom?: Timestamp
    /**
     * @generated from protobuf field: google.protobuf.Timestamp valid_until = 4
     */
    validUntil?: Timestamp
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation = 5
     */
    operation: Enums_TopologyChangeOp
    /**
     * @generated from protobuf field: bytes transaction_hash = 6
     */
    transactionHash: Uint8Array
    /**
     * @generated from protobuf field: int32 serial = 7
     */
    serial: number
    /**
     * @generated from protobuf field: repeated string signed_by_fingerprints = 8
     */
    signedByFingerprints: string[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationRequest
 */
export interface ListNamespaceDelegationRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_namespace = 2
     */
    filterNamespace: string
    /**
     * @generated from protobuf field: string filter_target_key_fingerprint = 3
     */
    filterTargetKeyFingerprint: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse
 */
export interface ListNamespaceDelegationResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result results = 1
     */
    results: ListNamespaceDelegationResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result
 */
export interface ListNamespaceDelegationResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.NamespaceDelegation item = 2
     */
    item?: NamespaceDelegation
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionRequest
 */
export interface ListDecentralizedNamespaceDefinitionRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_namespace = 2
     */
    filterNamespace: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse
 */
export interface ListDecentralizedNamespaceDefinitionResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result results = 1
     */
    results: ListDecentralizedNamespaceDefinitionResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result
 */
export interface ListDecentralizedNamespaceDefinitionResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition item = 2
     */
    item?: DecentralizedNamespaceDefinition
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingRequest
 */
export interface ListOwnerToKeyMappingRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_key_owner_type = 2
     */
    filterKeyOwnerType: string
    /**
     * @generated from protobuf field: string filter_key_owner_uid = 3
     */
    filterKeyOwnerUid: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse
 */
export interface ListOwnerToKeyMappingResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result results = 1
     */
    results: ListOwnerToKeyMappingResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result
 */
export interface ListOwnerToKeyMappingResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.OwnerToKeyMapping item = 2
     */
    item?: OwnerToKeyMapping
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingRequest
 */
export interface ListPartyToKeyMappingRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_party = 2
     */
    filterParty: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse
 */
export interface ListPartyToKeyMappingResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result results = 1
     */
    results: ListPartyToKeyMappingResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result
 */
export interface ListPartyToKeyMappingResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.PartyToKeyMapping item = 2
     */
    item?: PartyToKeyMapping
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateRequest
 */
export interface ListSynchronizerTrustCertificateRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_uid = 2
     */
    filterUid: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse
 */
export interface ListSynchronizerTrustCertificateResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse.Result results = 1
     */
    results: ListSynchronizerTrustCertificateResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse.Result
 */
export interface ListSynchronizerTrustCertificateResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.SynchronizerTrustCertificate item = 2
     */
    item?: SynchronizerTrustCertificate
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionRequest
 */
export interface ListParticipantSynchronizerPermissionRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_uid = 2
     */
    filterUid: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse
 */
export interface ListParticipantSynchronizerPermissionResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse.Result results = 1
     */
    results: ListParticipantSynchronizerPermissionResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse.Result
 */
export interface ListParticipantSynchronizerPermissionResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission item = 2
     */
    item?: ParticipantSynchronizerPermission
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsRequest
 */
export interface ListPartyHostingLimitsRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_uid = 2
     */
    filterUid: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse
 */
export interface ListPartyHostingLimitsResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result results = 1
     */
    results: ListPartyHostingLimitsResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result
 */
export interface ListPartyHostingLimitsResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.PartyHostingLimits item = 2
     */
    item?: PartyHostingLimits
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListVettedPackagesRequest
 */
export interface ListVettedPackagesRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_participant = 2
     */
    filterParticipant: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse
 */
export interface ListVettedPackagesResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result results = 1
     */
    results: ListVettedPackagesResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result
 */
export interface ListVettedPackagesResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.VettedPackages item = 2
     */
    item?: VettedPackages
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantRequest
 */
export interface ListPartyToParticipantRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_party = 2
     */
    filterParty: string
    /**
     * @generated from protobuf field: string filter_participant = 3
     */
    filterParticipant: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse
 */
export interface ListPartyToParticipantResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result results = 2
     */
    results: ListPartyToParticipantResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result
 */
export interface ListPartyToParticipantResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.PartyToParticipant item = 2
     */
    item?: PartyToParticipant
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateRequest
 */
export interface ListSynchronizerParametersStateRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_synchronizer_id = 2
     */
    filterSynchronizerId: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse
 */
export interface ListSynchronizerParametersStateResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse.Result results = 1
     */
    results: ListSynchronizerParametersStateResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse.Result
 */
export interface ListSynchronizerParametersStateResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.DynamicSynchronizerParameters item = 2
     */
    item?: DynamicSynchronizerParameters
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateRequest
 */
export interface ListMediatorSynchronizerStateRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_synchronizer_id = 2
     */
    filterSynchronizerId: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse
 */
export interface ListMediatorSynchronizerStateResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse.Result results = 1
     */
    results: ListMediatorSynchronizerStateResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse.Result
 */
export interface ListMediatorSynchronizerStateResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.MediatorSynchronizerState item = 2
     */
    item?: MediatorSynchronizerState
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateRequest
 */
export interface ListSequencerSynchronizerStateRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_synchronizer_id = 2
     */
    filterSynchronizerId: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse
 */
export interface ListSequencerSynchronizerStateResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse.Result results = 1
     */
    results: ListSequencerSynchronizerStateResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse.Result
 */
export interface ListSequencerSynchronizerStateResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.SequencerSynchronizerState item = 2
     */
    item?: SequencerSynchronizerState
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionRequest
 */
export interface ListPurgeTopologyTransactionRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_synchronizer_id = 2
     */
    filterSynchronizerId: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse
 */
export interface ListPurgeTopologyTransactionResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result results = 1
     */
    results: ListPurgeTopologyTransactionResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result
 */
export interface ListPurgeTopologyTransactionResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction item = 2
     */
    item?: PurgeTopologyTransaction
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementRequest
 */
export interface ListSynchronizerUpgradeAnnouncementRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_synchronizer_id = 2
     */
    filterSynchronizerId: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse
 */
export interface ListSynchronizerUpgradeAnnouncementResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse.Result results = 1
     */
    results: ListSynchronizerUpgradeAnnouncementResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse.Result
 */
export interface ListSynchronizerUpgradeAnnouncementResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.SynchronizerUpgradeAnnouncement item = 2
     */
    item?: SynchronizerUpgradeAnnouncement
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorRequest
 */
export interface ListSequencerConnectionSuccessorRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: string filter_sequencer_id = 2
     */
    filterSequencerId: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse
 */
export interface ListSequencerConnectionSuccessorResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse.Result results = 1
     */
    results: ListSequencerConnectionSuccessorResponse_Result[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse.Result
 */
export interface ListSequencerConnectionSuccessorResponse_Result {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseResult context = 1
     */
    context?: BaseResult
    /**
     * @generated from protobuf field: com.digitalasset.canton.protocol.v30.SequencerConnectionSuccessor item = 2
     */
    item?: SequencerConnectionSuccessor
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListAvailableStoresRequest
 */
export interface ListAvailableStoresRequest {}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListAvailableStoresResponse
 */
export interface ListAvailableStoresResponse {
    /**
     * @generated from protobuf field: repeated com.digitalasset.canton.topology.admin.v30.StoreId store_ids = 1
     */
    storeIds: StoreId[]
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListAllRequest
 */
export interface ListAllRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * * The list of topology mappings to exclude from the result.
     *
     * @generated from protobuf field: repeated string exclude_mappings = 2
     */
    excludeMappings: string[]
    /**
     * @generated from protobuf field: string filter_namespace = 3
     */
    filterNamespace: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotRequest
 */
export interface ExportTopologySnapshotRequest {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1
     */
    baseQuery?: BaseQuery
    /**
     * @generated from protobuf field: repeated string exclude_mappings = 2
     */
    excludeMappings: string[]
    /**
     * @generated from protobuf field: string filter_namespace = 3
     */
    filterNamespace: string
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ListAllResponse
 */
export interface ListAllResponse {
    /**
     * @generated from protobuf field: com.digitalasset.canton.topology.admin.v30.TopologyTransactions result = 1
     */
    result?: TopologyTransactions
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotResponse
 */
export interface ExportTopologySnapshotResponse {
    /**
     * @generated from protobuf field: bytes chunk = 1
     */
    chunk: Uint8Array
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.GenesisStateRequest
 */
export interface GenesisStateRequest {
    /**
     * Must be specified if the genesis state is requested from a participant node.
     *
     * @generated from protobuf field: optional com.digitalasset.canton.topology.admin.v30.StoreId synchronizer_store = 1
     */
    synchronizerStore?: StoreId
    /**
     * Optional - the effective time used to fetch the topology transactions. If not provided the effective time of the last topology transaction is used.
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2
     */
    timestamp?: Timestamp
}
/**
 * @generated from protobuf message com.digitalasset.canton.topology.admin.v30.GenesisStateResponse
 */
export interface GenesisStateResponse {
    /**
     * versioned stored topology transactions
     *
     * @generated from protobuf field: bytes chunk = 1
     */
    chunk: Uint8Array
}
// @generated message type with reflection information, may provide speed optimized methods
class BaseQuery$Type extends MessageType<BaseQuery> {
    constructor() {
        super('com.digitalasset.canton.topology.admin.v30.BaseQuery', [
            { no: 1, name: 'store', kind: 'message', T: () => StoreId },
            {
                no: 2,
                name: 'proposals',
                kind: 'scalar',
                T: 8 /*ScalarType.BOOL*/,
            },
            {
                no: 3,
                name: 'operation',
                kind: 'enum',
                T: () => [
                    'com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp',
                    Enums_TopologyChangeOp,
                    'TOPOLOGY_CHANGE_OP_',
                ],
            },
            {
                no: 5,
                name: 'snapshot',
                kind: 'message',
                oneof: 'timeQuery',
                T: () => Timestamp,
            },
            {
                no: 6,
                name: 'head_state',
                kind: 'message',
                oneof: 'timeQuery',
                T: () => Empty,
            },
            {
                no: 7,
                name: 'range',
                kind: 'message',
                oneof: 'timeQuery',
                T: () => BaseQuery_TimeRange,
            },
            {
                no: 8,
                name: 'filter_signed_key',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 9,
                name: 'protocol_version',
                kind: 'scalar',
                opt: true,
                T: 5 /*ScalarType.INT32*/,
            },
        ])
    }
    create(value?: PartialMessage<BaseQuery>): BaseQuery {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.proposals = false
        message.operation = 0
        message.timeQuery = { oneofKind: undefined }
        message.filterSignedKey = ''
        if (value !== undefined)
            reflectionMergePartial<BaseQuery>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: BaseQuery
    ): BaseQuery {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 1:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                case /* bool proposals */ 2:
                    message.proposals = reader.bool()
                    break
                case /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation */ 3:
                    message.operation = reader.int32()
                    break
                case /* google.protobuf.Timestamp snapshot */ 5:
                    message.timeQuery = {
                        oneofKind: 'snapshot',
                        snapshot: Timestamp.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.timeQuery as any).snapshot
                        ),
                    }
                    break
                case /* google.protobuf.Empty head_state */ 6:
                    message.timeQuery = {
                        oneofKind: 'headState',
                        headState: Empty.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.timeQuery as any).headState
                        ),
                    }
                    break
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange range */ 7:
                    message.timeQuery = {
                        oneofKind: 'range',
                        range: BaseQuery_TimeRange.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.timeQuery as any).range
                        ),
                    }
                    break
                case /* string filter_signed_key */ 8:
                    message.filterSignedKey = reader.string()
                    break
                case /* optional int32 protocol_version */ 9:
                    message.protocolVersion = reader.int32()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: BaseQuery,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 1; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* bool proposals = 2; */
        if (message.proposals !== false)
            writer.tag(2, WireType.Varint).bool(message.proposals)
        /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation = 3; */
        if (message.operation !== 0)
            writer.tag(3, WireType.Varint).int32(message.operation)
        /* google.protobuf.Timestamp snapshot = 5; */
        if (message.timeQuery.oneofKind === 'snapshot')
            Timestamp.internalBinaryWrite(
                message.timeQuery.snapshot,
                writer.tag(5, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Empty head_state = 6; */
        if (message.timeQuery.oneofKind === 'headState')
            Empty.internalBinaryWrite(
                message.timeQuery.headState,
                writer.tag(6, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange range = 7; */
        if (message.timeQuery.oneofKind === 'range')
            BaseQuery_TimeRange.internalBinaryWrite(
                message.timeQuery.range,
                writer.tag(7, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_signed_key = 8; */
        if (message.filterSignedKey !== '')
            writer
                .tag(8, WireType.LengthDelimited)
                .string(message.filterSignedKey)
        /* optional int32 protocol_version = 9; */
        if (message.protocolVersion !== undefined)
            writer.tag(9, WireType.Varint).int32(message.protocolVersion)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.BaseQuery
 */
export const BaseQuery = new BaseQuery$Type()
// @generated message type with reflection information, may provide speed optimized methods
class BaseQuery_TimeRange$Type extends MessageType<BaseQuery_TimeRange> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange',
            [
                { no: 1, name: 'from', kind: 'message', T: () => Timestamp },
                { no: 2, name: 'until', kind: 'message', T: () => Timestamp },
            ]
        )
    }
    create(value?: PartialMessage<BaseQuery_TimeRange>): BaseQuery_TimeRange {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<BaseQuery_TimeRange>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: BaseQuery_TimeRange
    ): BaseQuery_TimeRange {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* google.protobuf.Timestamp from */ 1:
                    message.from = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.from
                    )
                    break
                case /* google.protobuf.Timestamp until */ 2:
                    message.until = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.until
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: BaseQuery_TimeRange,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* google.protobuf.Timestamp from = 1; */
        if (message.from)
            Timestamp.internalBinaryWrite(
                message.from,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Timestamp until = 2; */
        if (message.until)
            Timestamp.internalBinaryWrite(
                message.until,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange
 */
export const BaseQuery_TimeRange = new BaseQuery_TimeRange$Type()
// @generated message type with reflection information, may provide speed optimized methods
class BaseResult$Type extends MessageType<BaseResult> {
    constructor() {
        super('com.digitalasset.canton.topology.admin.v30.BaseResult', [
            { no: 1, name: 'store', kind: 'message', T: () => StoreId },
            { no: 2, name: 'sequenced', kind: 'message', T: () => Timestamp },
            { no: 3, name: 'valid_from', kind: 'message', T: () => Timestamp },
            { no: 4, name: 'valid_until', kind: 'message', T: () => Timestamp },
            {
                no: 5,
                name: 'operation',
                kind: 'enum',
                T: () => [
                    'com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp',
                    Enums_TopologyChangeOp,
                    'TOPOLOGY_CHANGE_OP_',
                ],
            },
            {
                no: 6,
                name: 'transaction_hash',
                kind: 'scalar',
                T: 12 /*ScalarType.BYTES*/,
            },
            {
                no: 7,
                name: 'serial',
                kind: 'scalar',
                T: 5 /*ScalarType.INT32*/,
            },
            {
                no: 8,
                name: 'signed_by_fingerprints',
                kind: 'scalar',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(value?: PartialMessage<BaseResult>): BaseResult {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.operation = 0
        message.transactionHash = new Uint8Array(0)
        message.serial = 0
        message.signedByFingerprints = []
        if (value !== undefined)
            reflectionMergePartial<BaseResult>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: BaseResult
    ): BaseResult {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.StoreId store */ 1:
                    message.store = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.store
                    )
                    break
                case /* google.protobuf.Timestamp sequenced */ 2:
                    message.sequenced = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.sequenced
                    )
                    break
                case /* google.protobuf.Timestamp valid_from */ 3:
                    message.validFrom = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.validFrom
                    )
                    break
                case /* google.protobuf.Timestamp valid_until */ 4:
                    message.validUntil = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.validUntil
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation */ 5:
                    message.operation = reader.int32()
                    break
                case /* bytes transaction_hash */ 6:
                    message.transactionHash = reader.bytes()
                    break
                case /* int32 serial */ 7:
                    message.serial = reader.int32()
                    break
                case /* repeated string signed_by_fingerprints */ 8:
                    message.signedByFingerprints.push(reader.string())
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: BaseResult,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.StoreId store = 1; */
        if (message.store)
            StoreId.internalBinaryWrite(
                message.store,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Timestamp sequenced = 2; */
        if (message.sequenced)
            Timestamp.internalBinaryWrite(
                message.sequenced,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Timestamp valid_from = 3; */
        if (message.validFrom)
            Timestamp.internalBinaryWrite(
                message.validFrom,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Timestamp valid_until = 4; */
        if (message.validUntil)
            Timestamp.internalBinaryWrite(
                message.validUntil,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp operation = 5; */
        if (message.operation !== 0)
            writer.tag(5, WireType.Varint).int32(message.operation)
        /* bytes transaction_hash = 6; */
        if (message.transactionHash.length)
            writer
                .tag(6, WireType.LengthDelimited)
                .bytes(message.transactionHash)
        /* int32 serial = 7; */
        if (message.serial !== 0)
            writer.tag(7, WireType.Varint).int32(message.serial)
        /* repeated string signed_by_fingerprints = 8; */
        for (let i = 0; i < message.signedByFingerprints.length; i++)
            writer
                .tag(8, WireType.LengthDelimited)
                .string(message.signedByFingerprints[i])
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.BaseResult
 */
export const BaseResult = new BaseResult$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespaceDelegationRequest$Type extends MessageType<ListNamespaceDelegationRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_namespace',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
                {
                    no: 3,
                    name: 'filter_target_key_fingerprint',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListNamespaceDelegationRequest>
    ): ListNamespaceDelegationRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterNamespace = ''
        message.filterTargetKeyFingerprint = ''
        if (value !== undefined)
            reflectionMergePartial<ListNamespaceDelegationRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListNamespaceDelegationRequest
    ): ListNamespaceDelegationRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_namespace */ 2:
                    message.filterNamespace = reader.string()
                    break
                case /* string filter_target_key_fingerprint */ 3:
                    message.filterTargetKeyFingerprint = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListNamespaceDelegationRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_namespace = 2; */
        if (message.filterNamespace !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterNamespace)
        /* string filter_target_key_fingerprint = 3; */
        if (message.filterTargetKeyFingerprint !== '')
            writer
                .tag(3, WireType.LengthDelimited)
                .string(message.filterTargetKeyFingerprint)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationRequest
 */
export const ListNamespaceDelegationRequest =
    new ListNamespaceDelegationRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespaceDelegationResponse$Type extends MessageType<ListNamespaceDelegationResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListNamespaceDelegationResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListNamespaceDelegationResponse>
    ): ListNamespaceDelegationResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListNamespaceDelegationResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListNamespaceDelegationResponse
    ): ListNamespaceDelegationResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result results */ 1:
                    message.results.push(
                        ListNamespaceDelegationResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListNamespaceDelegationResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListNamespaceDelegationResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse
 */
export const ListNamespaceDelegationResponse =
    new ListNamespaceDelegationResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespaceDelegationResponse_Result$Type extends MessageType<ListNamespaceDelegationResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => NamespaceDelegation,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListNamespaceDelegationResponse_Result>
    ): ListNamespaceDelegationResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListNamespaceDelegationResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListNamespaceDelegationResponse_Result
    ): ListNamespaceDelegationResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.NamespaceDelegation item */ 2:
                    message.item = NamespaceDelegation.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListNamespaceDelegationResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.NamespaceDelegation item = 2; */
        if (message.item)
            NamespaceDelegation.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result
 */
export const ListNamespaceDelegationResponse_Result =
    new ListNamespaceDelegationResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListDecentralizedNamespaceDefinitionRequest$Type extends MessageType<ListDecentralizedNamespaceDefinitionRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_namespace',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListDecentralizedNamespaceDefinitionRequest>
    ): ListDecentralizedNamespaceDefinitionRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterNamespace = ''
        if (value !== undefined)
            reflectionMergePartial<ListDecentralizedNamespaceDefinitionRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListDecentralizedNamespaceDefinitionRequest
    ): ListDecentralizedNamespaceDefinitionRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_namespace */ 2:
                    message.filterNamespace = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListDecentralizedNamespaceDefinitionRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_namespace = 2; */
        if (message.filterNamespace !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterNamespace)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionRequest
 */
export const ListDecentralizedNamespaceDefinitionRequest =
    new ListDecentralizedNamespaceDefinitionRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListDecentralizedNamespaceDefinitionResponse$Type extends MessageType<ListDecentralizedNamespaceDefinitionResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () =>
                        ListDecentralizedNamespaceDefinitionResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListDecentralizedNamespaceDefinitionResponse>
    ): ListDecentralizedNamespaceDefinitionResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListDecentralizedNamespaceDefinitionResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListDecentralizedNamespaceDefinitionResponse
    ): ListDecentralizedNamespaceDefinitionResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result results */ 1:
                    message.results.push(
                        ListDecentralizedNamespaceDefinitionResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListDecentralizedNamespaceDefinitionResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListDecentralizedNamespaceDefinitionResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse
 */
export const ListDecentralizedNamespaceDefinitionResponse =
    new ListDecentralizedNamespaceDefinitionResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListDecentralizedNamespaceDefinitionResponse_Result$Type extends MessageType<ListDecentralizedNamespaceDefinitionResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => DecentralizedNamespaceDefinition,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListDecentralizedNamespaceDefinitionResponse_Result>
    ): ListDecentralizedNamespaceDefinitionResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListDecentralizedNamespaceDefinitionResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListDecentralizedNamespaceDefinitionResponse_Result
    ): ListDecentralizedNamespaceDefinitionResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition item */ 2:
                    message.item =
                        DecentralizedNamespaceDefinition.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListDecentralizedNamespaceDefinitionResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition item = 2; */
        if (message.item)
            DecentralizedNamespaceDefinition.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result
 */
export const ListDecentralizedNamespaceDefinitionResponse_Result =
    new ListDecentralizedNamespaceDefinitionResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListOwnerToKeyMappingRequest$Type extends MessageType<ListOwnerToKeyMappingRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_key_owner_type',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
                {
                    no: 3,
                    name: 'filter_key_owner_uid',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListOwnerToKeyMappingRequest>
    ): ListOwnerToKeyMappingRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterKeyOwnerType = ''
        message.filterKeyOwnerUid = ''
        if (value !== undefined)
            reflectionMergePartial<ListOwnerToKeyMappingRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListOwnerToKeyMappingRequest
    ): ListOwnerToKeyMappingRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_key_owner_type */ 2:
                    message.filterKeyOwnerType = reader.string()
                    break
                case /* string filter_key_owner_uid */ 3:
                    message.filterKeyOwnerUid = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListOwnerToKeyMappingRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_key_owner_type = 2; */
        if (message.filterKeyOwnerType !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterKeyOwnerType)
        /* string filter_key_owner_uid = 3; */
        if (message.filterKeyOwnerUid !== '')
            writer
                .tag(3, WireType.LengthDelimited)
                .string(message.filterKeyOwnerUid)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingRequest
 */
export const ListOwnerToKeyMappingRequest =
    new ListOwnerToKeyMappingRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListOwnerToKeyMappingResponse$Type extends MessageType<ListOwnerToKeyMappingResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListOwnerToKeyMappingResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListOwnerToKeyMappingResponse>
    ): ListOwnerToKeyMappingResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListOwnerToKeyMappingResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListOwnerToKeyMappingResponse
    ): ListOwnerToKeyMappingResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result results */ 1:
                    message.results.push(
                        ListOwnerToKeyMappingResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListOwnerToKeyMappingResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListOwnerToKeyMappingResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse
 */
export const ListOwnerToKeyMappingResponse =
    new ListOwnerToKeyMappingResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListOwnerToKeyMappingResponse_Result$Type extends MessageType<ListOwnerToKeyMappingResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => OwnerToKeyMapping,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListOwnerToKeyMappingResponse_Result>
    ): ListOwnerToKeyMappingResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListOwnerToKeyMappingResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListOwnerToKeyMappingResponse_Result
    ): ListOwnerToKeyMappingResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.OwnerToKeyMapping item */ 2:
                    message.item = OwnerToKeyMapping.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListOwnerToKeyMappingResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.OwnerToKeyMapping item = 2; */
        if (message.item)
            OwnerToKeyMapping.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result
 */
export const ListOwnerToKeyMappingResponse_Result =
    new ListOwnerToKeyMappingResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyToKeyMappingRequest$Type extends MessageType<ListPartyToKeyMappingRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_party',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyToKeyMappingRequest>
    ): ListPartyToKeyMappingRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterParty = ''
        if (value !== undefined)
            reflectionMergePartial<ListPartyToKeyMappingRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyToKeyMappingRequest
    ): ListPartyToKeyMappingRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_party */ 2:
                    message.filterParty = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyToKeyMappingRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_party = 2; */
        if (message.filterParty !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.filterParty)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingRequest
 */
export const ListPartyToKeyMappingRequest =
    new ListPartyToKeyMappingRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyToKeyMappingResponse$Type extends MessageType<ListPartyToKeyMappingResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListPartyToKeyMappingResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyToKeyMappingResponse>
    ): ListPartyToKeyMappingResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListPartyToKeyMappingResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyToKeyMappingResponse
    ): ListPartyToKeyMappingResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result results */ 1:
                    message.results.push(
                        ListPartyToKeyMappingResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyToKeyMappingResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListPartyToKeyMappingResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse
 */
export const ListPartyToKeyMappingResponse =
    new ListPartyToKeyMappingResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyToKeyMappingResponse_Result$Type extends MessageType<ListPartyToKeyMappingResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => PartyToKeyMapping,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyToKeyMappingResponse_Result>
    ): ListPartyToKeyMappingResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListPartyToKeyMappingResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyToKeyMappingResponse_Result
    ): ListPartyToKeyMappingResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.PartyToKeyMapping item */ 2:
                    message.item = PartyToKeyMapping.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyToKeyMappingResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.PartyToKeyMapping item = 2; */
        if (message.item)
            PartyToKeyMapping.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result
 */
export const ListPartyToKeyMappingResponse_Result =
    new ListPartyToKeyMappingResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerTrustCertificateRequest$Type extends MessageType<ListSynchronizerTrustCertificateRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_uid',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerTrustCertificateRequest>
    ): ListSynchronizerTrustCertificateRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterUid = ''
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerTrustCertificateRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerTrustCertificateRequest
    ): ListSynchronizerTrustCertificateRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_uid */ 2:
                    message.filterUid = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerTrustCertificateRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_uid = 2; */
        if (message.filterUid !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.filterUid)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateRequest
 */
export const ListSynchronizerTrustCertificateRequest =
    new ListSynchronizerTrustCertificateRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerTrustCertificateResponse$Type extends MessageType<ListSynchronizerTrustCertificateResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListSynchronizerTrustCertificateResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerTrustCertificateResponse>
    ): ListSynchronizerTrustCertificateResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerTrustCertificateResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerTrustCertificateResponse
    ): ListSynchronizerTrustCertificateResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse.Result results */ 1:
                    message.results.push(
                        ListSynchronizerTrustCertificateResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerTrustCertificateResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListSynchronizerTrustCertificateResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse
 */
export const ListSynchronizerTrustCertificateResponse =
    new ListSynchronizerTrustCertificateResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerTrustCertificateResponse_Result$Type extends MessageType<ListSynchronizerTrustCertificateResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => SynchronizerTrustCertificate,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerTrustCertificateResponse_Result>
    ): ListSynchronizerTrustCertificateResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerTrustCertificateResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerTrustCertificateResponse_Result
    ): ListSynchronizerTrustCertificateResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.SynchronizerTrustCertificate item */ 2:
                    message.item =
                        SynchronizerTrustCertificate.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerTrustCertificateResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.SynchronizerTrustCertificate item = 2; */
        if (message.item)
            SynchronizerTrustCertificate.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerTrustCertificateResponse.Result
 */
export const ListSynchronizerTrustCertificateResponse_Result =
    new ListSynchronizerTrustCertificateResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListParticipantSynchronizerPermissionRequest$Type extends MessageType<ListParticipantSynchronizerPermissionRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_uid',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListParticipantSynchronizerPermissionRequest>
    ): ListParticipantSynchronizerPermissionRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterUid = ''
        if (value !== undefined)
            reflectionMergePartial<ListParticipantSynchronizerPermissionRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListParticipantSynchronizerPermissionRequest
    ): ListParticipantSynchronizerPermissionRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_uid */ 2:
                    message.filterUid = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListParticipantSynchronizerPermissionRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_uid = 2; */
        if (message.filterUid !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.filterUid)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionRequest
 */
export const ListParticipantSynchronizerPermissionRequest =
    new ListParticipantSynchronizerPermissionRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListParticipantSynchronizerPermissionResponse$Type extends MessageType<ListParticipantSynchronizerPermissionResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () =>
                        ListParticipantSynchronizerPermissionResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListParticipantSynchronizerPermissionResponse>
    ): ListParticipantSynchronizerPermissionResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListParticipantSynchronizerPermissionResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListParticipantSynchronizerPermissionResponse
    ): ListParticipantSynchronizerPermissionResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse.Result results */ 1:
                    message.results.push(
                        ListParticipantSynchronizerPermissionResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListParticipantSynchronizerPermissionResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListParticipantSynchronizerPermissionResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse
 */
export const ListParticipantSynchronizerPermissionResponse =
    new ListParticipantSynchronizerPermissionResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListParticipantSynchronizerPermissionResponse_Result$Type extends MessageType<ListParticipantSynchronizerPermissionResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => ParticipantSynchronizerPermission,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListParticipantSynchronizerPermissionResponse_Result>
    ): ListParticipantSynchronizerPermissionResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListParticipantSynchronizerPermissionResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListParticipantSynchronizerPermissionResponse_Result
    ): ListParticipantSynchronizerPermissionResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission item */ 2:
                    message.item =
                        ParticipantSynchronizerPermission.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListParticipantSynchronizerPermissionResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission item = 2; */
        if (message.item)
            ParticipantSynchronizerPermission.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListParticipantSynchronizerPermissionResponse.Result
 */
export const ListParticipantSynchronizerPermissionResponse_Result =
    new ListParticipantSynchronizerPermissionResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyHostingLimitsRequest$Type extends MessageType<ListPartyHostingLimitsRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_uid',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyHostingLimitsRequest>
    ): ListPartyHostingLimitsRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterUid = ''
        if (value !== undefined)
            reflectionMergePartial<ListPartyHostingLimitsRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyHostingLimitsRequest
    ): ListPartyHostingLimitsRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_uid */ 2:
                    message.filterUid = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyHostingLimitsRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_uid = 2; */
        if (message.filterUid !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.filterUid)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsRequest
 */
export const ListPartyHostingLimitsRequest =
    new ListPartyHostingLimitsRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyHostingLimitsResponse$Type extends MessageType<ListPartyHostingLimitsResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListPartyHostingLimitsResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyHostingLimitsResponse>
    ): ListPartyHostingLimitsResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListPartyHostingLimitsResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyHostingLimitsResponse
    ): ListPartyHostingLimitsResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result results */ 1:
                    message.results.push(
                        ListPartyHostingLimitsResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyHostingLimitsResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListPartyHostingLimitsResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse
 */
export const ListPartyHostingLimitsResponse =
    new ListPartyHostingLimitsResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyHostingLimitsResponse_Result$Type extends MessageType<ListPartyHostingLimitsResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => PartyHostingLimits,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyHostingLimitsResponse_Result>
    ): ListPartyHostingLimitsResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListPartyHostingLimitsResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyHostingLimitsResponse_Result
    ): ListPartyHostingLimitsResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.PartyHostingLimits item */ 2:
                    message.item = PartyHostingLimits.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyHostingLimitsResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.PartyHostingLimits item = 2; */
        if (message.item)
            PartyHostingLimits.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result
 */
export const ListPartyHostingLimitsResponse_Result =
    new ListPartyHostingLimitsResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListVettedPackagesRequest$Type extends MessageType<ListVettedPackagesRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListVettedPackagesRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_participant',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListVettedPackagesRequest>
    ): ListVettedPackagesRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterParticipant = ''
        if (value !== undefined)
            reflectionMergePartial<ListVettedPackagesRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListVettedPackagesRequest
    ): ListVettedPackagesRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_participant */ 2:
                    message.filterParticipant = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListVettedPackagesRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_participant = 2; */
        if (message.filterParticipant !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterParticipant)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListVettedPackagesRequest
 */
export const ListVettedPackagesRequest = new ListVettedPackagesRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListVettedPackagesResponse$Type extends MessageType<ListVettedPackagesResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListVettedPackagesResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListVettedPackagesResponse>
    ): ListVettedPackagesResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListVettedPackagesResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListVettedPackagesResponse
    ): ListVettedPackagesResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result results */ 1:
                    message.results.push(
                        ListVettedPackagesResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListVettedPackagesResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListVettedPackagesResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse
 */
export const ListVettedPackagesResponse = new ListVettedPackagesResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListVettedPackagesResponse_Result$Type extends MessageType<ListVettedPackagesResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => VettedPackages,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListVettedPackagesResponse_Result>
    ): ListVettedPackagesResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListVettedPackagesResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListVettedPackagesResponse_Result
    ): ListVettedPackagesResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.VettedPackages item */ 2:
                    message.item = VettedPackages.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListVettedPackagesResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.VettedPackages item = 2; */
        if (message.item)
            VettedPackages.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result
 */
export const ListVettedPackagesResponse_Result =
    new ListVettedPackagesResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyToParticipantRequest$Type extends MessageType<ListPartyToParticipantRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_party',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
                {
                    no: 3,
                    name: 'filter_participant',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyToParticipantRequest>
    ): ListPartyToParticipantRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterParty = ''
        message.filterParticipant = ''
        if (value !== undefined)
            reflectionMergePartial<ListPartyToParticipantRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyToParticipantRequest
    ): ListPartyToParticipantRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_party */ 2:
                    message.filterParty = reader.string()
                    break
                case /* string filter_participant */ 3:
                    message.filterParticipant = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyToParticipantRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_party = 2; */
        if (message.filterParty !== '')
            writer.tag(2, WireType.LengthDelimited).string(message.filterParty)
        /* string filter_participant = 3; */
        if (message.filterParticipant !== '')
            writer
                .tag(3, WireType.LengthDelimited)
                .string(message.filterParticipant)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantRequest
 */
export const ListPartyToParticipantRequest =
    new ListPartyToParticipantRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyToParticipantResponse$Type extends MessageType<ListPartyToParticipantResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse',
            [
                {
                    no: 2,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListPartyToParticipantResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyToParticipantResponse>
    ): ListPartyToParticipantResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListPartyToParticipantResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyToParticipantResponse
    ): ListPartyToParticipantResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result results */ 2:
                    message.results.push(
                        ListPartyToParticipantResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyToParticipantResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result results = 2; */
        for (let i = 0; i < message.results.length; i++)
            ListPartyToParticipantResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse
 */
export const ListPartyToParticipantResponse =
    new ListPartyToParticipantResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPartyToParticipantResponse_Result$Type extends MessageType<ListPartyToParticipantResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => PartyToParticipant,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPartyToParticipantResponse_Result>
    ): ListPartyToParticipantResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListPartyToParticipantResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPartyToParticipantResponse_Result
    ): ListPartyToParticipantResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.PartyToParticipant item */ 2:
                    message.item = PartyToParticipant.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPartyToParticipantResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.PartyToParticipant item = 2; */
        if (message.item)
            PartyToParticipant.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result
 */
export const ListPartyToParticipantResponse_Result =
    new ListPartyToParticipantResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerParametersStateRequest$Type extends MessageType<ListSynchronizerParametersStateRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_synchronizer_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerParametersStateRequest>
    ): ListSynchronizerParametersStateRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterSynchronizerId = ''
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerParametersStateRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerParametersStateRequest
    ): ListSynchronizerParametersStateRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_synchronizer_id */ 2:
                    message.filterSynchronizerId = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerParametersStateRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_synchronizer_id = 2; */
        if (message.filterSynchronizerId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterSynchronizerId)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateRequest
 */
export const ListSynchronizerParametersStateRequest =
    new ListSynchronizerParametersStateRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerParametersStateResponse$Type extends MessageType<ListSynchronizerParametersStateResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListSynchronizerParametersStateResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerParametersStateResponse>
    ): ListSynchronizerParametersStateResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerParametersStateResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerParametersStateResponse
    ): ListSynchronizerParametersStateResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse.Result results */ 1:
                    message.results.push(
                        ListSynchronizerParametersStateResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerParametersStateResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListSynchronizerParametersStateResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse
 */
export const ListSynchronizerParametersStateResponse =
    new ListSynchronizerParametersStateResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerParametersStateResponse_Result$Type extends MessageType<ListSynchronizerParametersStateResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => DynamicSynchronizerParameters,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerParametersStateResponse_Result>
    ): ListSynchronizerParametersStateResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerParametersStateResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerParametersStateResponse_Result
    ): ListSynchronizerParametersStateResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.DynamicSynchronizerParameters item */ 2:
                    message.item =
                        DynamicSynchronizerParameters.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerParametersStateResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.DynamicSynchronizerParameters item = 2; */
        if (message.item)
            DynamicSynchronizerParameters.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerParametersStateResponse.Result
 */
export const ListSynchronizerParametersStateResponse_Result =
    new ListSynchronizerParametersStateResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListMediatorSynchronizerStateRequest$Type extends MessageType<ListMediatorSynchronizerStateRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_synchronizer_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListMediatorSynchronizerStateRequest>
    ): ListMediatorSynchronizerStateRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterSynchronizerId = ''
        if (value !== undefined)
            reflectionMergePartial<ListMediatorSynchronizerStateRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListMediatorSynchronizerStateRequest
    ): ListMediatorSynchronizerStateRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_synchronizer_id */ 2:
                    message.filterSynchronizerId = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListMediatorSynchronizerStateRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_synchronizer_id = 2; */
        if (message.filterSynchronizerId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterSynchronizerId)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateRequest
 */
export const ListMediatorSynchronizerStateRequest =
    new ListMediatorSynchronizerStateRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListMediatorSynchronizerStateResponse$Type extends MessageType<ListMediatorSynchronizerStateResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListMediatorSynchronizerStateResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListMediatorSynchronizerStateResponse>
    ): ListMediatorSynchronizerStateResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListMediatorSynchronizerStateResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListMediatorSynchronizerStateResponse
    ): ListMediatorSynchronizerStateResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse.Result results */ 1:
                    message.results.push(
                        ListMediatorSynchronizerStateResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListMediatorSynchronizerStateResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListMediatorSynchronizerStateResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse
 */
export const ListMediatorSynchronizerStateResponse =
    new ListMediatorSynchronizerStateResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListMediatorSynchronizerStateResponse_Result$Type extends MessageType<ListMediatorSynchronizerStateResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => MediatorSynchronizerState,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListMediatorSynchronizerStateResponse_Result>
    ): ListMediatorSynchronizerStateResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListMediatorSynchronizerStateResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListMediatorSynchronizerStateResponse_Result
    ): ListMediatorSynchronizerStateResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.MediatorSynchronizerState item */ 2:
                    message.item = MediatorSynchronizerState.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListMediatorSynchronizerStateResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.MediatorSynchronizerState item = 2; */
        if (message.item)
            MediatorSynchronizerState.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListMediatorSynchronizerStateResponse.Result
 */
export const ListMediatorSynchronizerStateResponse_Result =
    new ListMediatorSynchronizerStateResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSequencerSynchronizerStateRequest$Type extends MessageType<ListSequencerSynchronizerStateRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_synchronizer_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSequencerSynchronizerStateRequest>
    ): ListSequencerSynchronizerStateRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterSynchronizerId = ''
        if (value !== undefined)
            reflectionMergePartial<ListSequencerSynchronizerStateRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSequencerSynchronizerStateRequest
    ): ListSequencerSynchronizerStateRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_synchronizer_id */ 2:
                    message.filterSynchronizerId = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSequencerSynchronizerStateRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_synchronizer_id = 2; */
        if (message.filterSynchronizerId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterSynchronizerId)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateRequest
 */
export const ListSequencerSynchronizerStateRequest =
    new ListSequencerSynchronizerStateRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSequencerSynchronizerStateResponse$Type extends MessageType<ListSequencerSynchronizerStateResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListSequencerSynchronizerStateResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSequencerSynchronizerStateResponse>
    ): ListSequencerSynchronizerStateResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListSequencerSynchronizerStateResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSequencerSynchronizerStateResponse
    ): ListSequencerSynchronizerStateResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse.Result results */ 1:
                    message.results.push(
                        ListSequencerSynchronizerStateResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSequencerSynchronizerStateResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListSequencerSynchronizerStateResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse
 */
export const ListSequencerSynchronizerStateResponse =
    new ListSequencerSynchronizerStateResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSequencerSynchronizerStateResponse_Result$Type extends MessageType<ListSequencerSynchronizerStateResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => SequencerSynchronizerState,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSequencerSynchronizerStateResponse_Result>
    ): ListSequencerSynchronizerStateResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListSequencerSynchronizerStateResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSequencerSynchronizerStateResponse_Result
    ): ListSequencerSynchronizerStateResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.SequencerSynchronizerState item */ 2:
                    message.item =
                        SequencerSynchronizerState.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSequencerSynchronizerStateResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.SequencerSynchronizerState item = 2; */
        if (message.item)
            SequencerSynchronizerState.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerSynchronizerStateResponse.Result
 */
export const ListSequencerSynchronizerStateResponse_Result =
    new ListSequencerSynchronizerStateResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPurgeTopologyTransactionRequest$Type extends MessageType<ListPurgeTopologyTransactionRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_synchronizer_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPurgeTopologyTransactionRequest>
    ): ListPurgeTopologyTransactionRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterSynchronizerId = ''
        if (value !== undefined)
            reflectionMergePartial<ListPurgeTopologyTransactionRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPurgeTopologyTransactionRequest
    ): ListPurgeTopologyTransactionRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_synchronizer_id */ 2:
                    message.filterSynchronizerId = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPurgeTopologyTransactionRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_synchronizer_id = 2; */
        if (message.filterSynchronizerId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterSynchronizerId)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionRequest
 */
export const ListPurgeTopologyTransactionRequest =
    new ListPurgeTopologyTransactionRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPurgeTopologyTransactionResponse$Type extends MessageType<ListPurgeTopologyTransactionResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListPurgeTopologyTransactionResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPurgeTopologyTransactionResponse>
    ): ListPurgeTopologyTransactionResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListPurgeTopologyTransactionResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPurgeTopologyTransactionResponse
    ): ListPurgeTopologyTransactionResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result results */ 1:
                    message.results.push(
                        ListPurgeTopologyTransactionResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPurgeTopologyTransactionResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListPurgeTopologyTransactionResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse
 */
export const ListPurgeTopologyTransactionResponse =
    new ListPurgeTopologyTransactionResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListPurgeTopologyTransactionResponse_Result$Type extends MessageType<ListPurgeTopologyTransactionResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => PurgeTopologyTransaction,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListPurgeTopologyTransactionResponse_Result>
    ): ListPurgeTopologyTransactionResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListPurgeTopologyTransactionResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListPurgeTopologyTransactionResponse_Result
    ): ListPurgeTopologyTransactionResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction item */ 2:
                    message.item = PurgeTopologyTransaction.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.item
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListPurgeTopologyTransactionResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction item = 2; */
        if (message.item)
            PurgeTopologyTransaction.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result
 */
export const ListPurgeTopologyTransactionResponse_Result =
    new ListPurgeTopologyTransactionResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerUpgradeAnnouncementRequest$Type extends MessageType<ListSynchronizerUpgradeAnnouncementRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_synchronizer_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerUpgradeAnnouncementRequest>
    ): ListSynchronizerUpgradeAnnouncementRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterSynchronizerId = ''
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerUpgradeAnnouncementRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerUpgradeAnnouncementRequest
    ): ListSynchronizerUpgradeAnnouncementRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_synchronizer_id */ 2:
                    message.filterSynchronizerId = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerUpgradeAnnouncementRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_synchronizer_id = 2; */
        if (message.filterSynchronizerId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterSynchronizerId)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementRequest
 */
export const ListSynchronizerUpgradeAnnouncementRequest =
    new ListSynchronizerUpgradeAnnouncementRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerUpgradeAnnouncementResponse$Type extends MessageType<ListSynchronizerUpgradeAnnouncementResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListSynchronizerUpgradeAnnouncementResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerUpgradeAnnouncementResponse>
    ): ListSynchronizerUpgradeAnnouncementResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerUpgradeAnnouncementResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerUpgradeAnnouncementResponse
    ): ListSynchronizerUpgradeAnnouncementResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse.Result results */ 1:
                    message.results.push(
                        ListSynchronizerUpgradeAnnouncementResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerUpgradeAnnouncementResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListSynchronizerUpgradeAnnouncementResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse
 */
export const ListSynchronizerUpgradeAnnouncementResponse =
    new ListSynchronizerUpgradeAnnouncementResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSynchronizerUpgradeAnnouncementResponse_Result$Type extends MessageType<ListSynchronizerUpgradeAnnouncementResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => SynchronizerUpgradeAnnouncement,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSynchronizerUpgradeAnnouncementResponse_Result>
    ): ListSynchronizerUpgradeAnnouncementResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListSynchronizerUpgradeAnnouncementResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSynchronizerUpgradeAnnouncementResponse_Result
    ): ListSynchronizerUpgradeAnnouncementResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.SynchronizerUpgradeAnnouncement item */ 2:
                    message.item =
                        SynchronizerUpgradeAnnouncement.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSynchronizerUpgradeAnnouncementResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.SynchronizerUpgradeAnnouncement item = 2; */
        if (message.item)
            SynchronizerUpgradeAnnouncement.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSynchronizerUpgradeAnnouncementResponse.Result
 */
export const ListSynchronizerUpgradeAnnouncementResponse_Result =
    new ListSynchronizerUpgradeAnnouncementResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSequencerConnectionSuccessorRequest$Type extends MessageType<ListSequencerConnectionSuccessorRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'filter_sequencer_id',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSequencerConnectionSuccessorRequest>
    ): ListSequencerConnectionSuccessorRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.filterSequencerId = ''
        if (value !== undefined)
            reflectionMergePartial<ListSequencerConnectionSuccessorRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSequencerConnectionSuccessorRequest
    ): ListSequencerConnectionSuccessorRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* string filter_sequencer_id */ 2:
                    message.filterSequencerId = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSequencerConnectionSuccessorRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* string filter_sequencer_id = 2; */
        if (message.filterSequencerId !== '')
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.filterSequencerId)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorRequest
 */
export const ListSequencerConnectionSuccessorRequest =
    new ListSequencerConnectionSuccessorRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSequencerConnectionSuccessorResponse$Type extends MessageType<ListSequencerConnectionSuccessorResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse',
            [
                {
                    no: 1,
                    name: 'results',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => ListSequencerConnectionSuccessorResponse_Result,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSequencerConnectionSuccessorResponse>
    ): ListSequencerConnectionSuccessorResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.results = []
        if (value !== undefined)
            reflectionMergePartial<ListSequencerConnectionSuccessorResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSequencerConnectionSuccessorResponse
    ): ListSequencerConnectionSuccessorResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse.Result results */ 1:
                    message.results.push(
                        ListSequencerConnectionSuccessorResponse_Result.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSequencerConnectionSuccessorResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse.Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            ListSequencerConnectionSuccessorResponse_Result.internalBinaryWrite(
                message.results[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse
 */
export const ListSequencerConnectionSuccessorResponse =
    new ListSequencerConnectionSuccessorResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListSequencerConnectionSuccessorResponse_Result$Type extends MessageType<ListSequencerConnectionSuccessorResponse_Result> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse.Result',
            [
                {
                    no: 1,
                    name: 'context',
                    kind: 'message',
                    T: () => BaseResult,
                },
                {
                    no: 2,
                    name: 'item',
                    kind: 'message',
                    T: () => SequencerConnectionSuccessor,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListSequencerConnectionSuccessorResponse_Result>
    ): ListSequencerConnectionSuccessorResponse_Result {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListSequencerConnectionSuccessorResponse_Result>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListSequencerConnectionSuccessorResponse_Result
    ): ListSequencerConnectionSuccessorResponse_Result {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseResult context */ 1:
                    message.context = BaseResult.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.context
                    )
                    break
                case /* com.digitalasset.canton.protocol.v30.SequencerConnectionSuccessor item */ 2:
                    message.item =
                        SequencerConnectionSuccessor.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            message.item
                        )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListSequencerConnectionSuccessorResponse_Result,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseResult context = 1; */
        if (message.context)
            BaseResult.internalBinaryWrite(
                message.context,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* com.digitalasset.canton.protocol.v30.SequencerConnectionSuccessor item = 2; */
        if (message.item)
            SequencerConnectionSuccessor.internalBinaryWrite(
                message.item,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListSequencerConnectionSuccessorResponse.Result
 */
export const ListSequencerConnectionSuccessorResponse_Result =
    new ListSequencerConnectionSuccessorResponse_Result$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListAvailableStoresRequest$Type extends MessageType<ListAvailableStoresRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListAvailableStoresRequest',
            []
        )
    }
    create(
        value?: PartialMessage<ListAvailableStoresRequest>
    ): ListAvailableStoresRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListAvailableStoresRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListAvailableStoresRequest
    ): ListAvailableStoresRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListAvailableStoresRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListAvailableStoresRequest
 */
export const ListAvailableStoresRequest = new ListAvailableStoresRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListAvailableStoresResponse$Type extends MessageType<ListAvailableStoresResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ListAvailableStoresResponse',
            [
                {
                    no: 1,
                    name: 'store_ids',
                    kind: 'message',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: () => StoreId,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ListAvailableStoresResponse>
    ): ListAvailableStoresResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.storeIds = []
        if (value !== undefined)
            reflectionMergePartial<ListAvailableStoresResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListAvailableStoresResponse
    ): ListAvailableStoresResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* repeated com.digitalasset.canton.topology.admin.v30.StoreId store_ids */ 1:
                    message.storeIds.push(
                        StoreId.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options
                        )
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListAvailableStoresResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* repeated com.digitalasset.canton.topology.admin.v30.StoreId store_ids = 1; */
        for (let i = 0; i < message.storeIds.length; i++)
            StoreId.internalBinaryWrite(
                message.storeIds[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListAvailableStoresResponse
 */
export const ListAvailableStoresResponse =
    new ListAvailableStoresResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListAllRequest$Type extends MessageType<ListAllRequest> {
    constructor() {
        super('com.digitalasset.canton.topology.admin.v30.ListAllRequest', [
            { no: 1, name: 'base_query', kind: 'message', T: () => BaseQuery },
            {
                no: 2,
                name: 'exclude_mappings',
                kind: 'scalar',
                repeat: 2 /*RepeatType.UNPACKED*/,
                T: 9 /*ScalarType.STRING*/,
            },
            {
                no: 3,
                name: 'filter_namespace',
                kind: 'scalar',
                T: 9 /*ScalarType.STRING*/,
            },
        ])
    }
    create(value?: PartialMessage<ListAllRequest>): ListAllRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.excludeMappings = []
        message.filterNamespace = ''
        if (value !== undefined)
            reflectionMergePartial<ListAllRequest>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListAllRequest
    ): ListAllRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* repeated string exclude_mappings */ 2:
                    message.excludeMappings.push(reader.string())
                    break
                case /* string filter_namespace */ 3:
                    message.filterNamespace = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListAllRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated string exclude_mappings = 2; */
        for (let i = 0; i < message.excludeMappings.length; i++)
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.excludeMappings[i])
        /* string filter_namespace = 3; */
        if (message.filterNamespace !== '')
            writer
                .tag(3, WireType.LengthDelimited)
                .string(message.filterNamespace)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListAllRequest
 */
export const ListAllRequest = new ListAllRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ExportTopologySnapshotRequest$Type extends MessageType<ExportTopologySnapshotRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotRequest',
            [
                {
                    no: 1,
                    name: 'base_query',
                    kind: 'message',
                    T: () => BaseQuery,
                },
                {
                    no: 2,
                    name: 'exclude_mappings',
                    kind: 'scalar',
                    repeat: 2 /*RepeatType.UNPACKED*/,
                    T: 9 /*ScalarType.STRING*/,
                },
                {
                    no: 3,
                    name: 'filter_namespace',
                    kind: 'scalar',
                    T: 9 /*ScalarType.STRING*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ExportTopologySnapshotRequest>
    ): ExportTopologySnapshotRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.excludeMappings = []
        message.filterNamespace = ''
        if (value !== undefined)
            reflectionMergePartial<ExportTopologySnapshotRequest>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ExportTopologySnapshotRequest
    ): ExportTopologySnapshotRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query */ 1:
                    message.baseQuery = BaseQuery.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.baseQuery
                    )
                    break
                case /* repeated string exclude_mappings */ 2:
                    message.excludeMappings.push(reader.string())
                    break
                case /* string filter_namespace */ 3:
                    message.filterNamespace = reader.string()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ExportTopologySnapshotRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.BaseQuery base_query = 1; */
        if (message.baseQuery)
            BaseQuery.internalBinaryWrite(
                message.baseQuery,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* repeated string exclude_mappings = 2; */
        for (let i = 0; i < message.excludeMappings.length; i++)
            writer
                .tag(2, WireType.LengthDelimited)
                .string(message.excludeMappings[i])
        /* string filter_namespace = 3; */
        if (message.filterNamespace !== '')
            writer
                .tag(3, WireType.LengthDelimited)
                .string(message.filterNamespace)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotRequest
 */
export const ExportTopologySnapshotRequest =
    new ExportTopologySnapshotRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ListAllResponse$Type extends MessageType<ListAllResponse> {
    constructor() {
        super('com.digitalasset.canton.topology.admin.v30.ListAllResponse', [
            {
                no: 1,
                name: 'result',
                kind: 'message',
                T: () => TopologyTransactions,
            },
        ])
    }
    create(value?: PartialMessage<ListAllResponse>): ListAllResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<ListAllResponse>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ListAllResponse
    ): ListAllResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* com.digitalasset.canton.topology.admin.v30.TopologyTransactions result */ 1:
                    message.result = TopologyTransactions.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.result
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ListAllResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* com.digitalasset.canton.topology.admin.v30.TopologyTransactions result = 1; */
        if (message.result)
            TopologyTransactions.internalBinaryWrite(
                message.result,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ListAllResponse
 */
export const ListAllResponse = new ListAllResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ExportTopologySnapshotResponse$Type extends MessageType<ExportTopologySnapshotResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotResponse',
            [
                {
                    no: 1,
                    name: 'chunk',
                    kind: 'scalar',
                    T: 12 /*ScalarType.BYTES*/,
                },
            ]
        )
    }
    create(
        value?: PartialMessage<ExportTopologySnapshotResponse>
    ): ExportTopologySnapshotResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.chunk = new Uint8Array(0)
        if (value !== undefined)
            reflectionMergePartial<ExportTopologySnapshotResponse>(
                this,
                message,
                value
            )
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ExportTopologySnapshotResponse
    ): ExportTopologySnapshotResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes chunk */ 1:
                    message.chunk = reader.bytes()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: ExportTopologySnapshotResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bytes chunk = 1; */
        if (message.chunk.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.chunk)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotResponse
 */
export const ExportTopologySnapshotResponse =
    new ExportTopologySnapshotResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GenesisStateRequest$Type extends MessageType<GenesisStateRequest> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.GenesisStateRequest',
            [
                {
                    no: 1,
                    name: 'synchronizer_store',
                    kind: 'message',
                    T: () => StoreId,
                },
                {
                    no: 2,
                    name: 'timestamp',
                    kind: 'message',
                    T: () => Timestamp,
                },
            ]
        )
    }
    create(value?: PartialMessage<GenesisStateRequest>): GenesisStateRequest {
        const message = globalThis.Object.create(this.messagePrototype!)
        if (value !== undefined)
            reflectionMergePartial<GenesisStateRequest>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GenesisStateRequest
    ): GenesisStateRequest {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* optional com.digitalasset.canton.topology.admin.v30.StoreId synchronizer_store */ 1:
                    message.synchronizerStore = StoreId.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.synchronizerStore
                    )
                    break
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.timestamp
                    )
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GenesisStateRequest,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* optional com.digitalasset.canton.topology.admin.v30.StoreId synchronizer_store = 1; */
        if (message.synchronizerStore)
            StoreId.internalBinaryWrite(
                message.synchronizerStore,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join()
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(
                message.timestamp,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join()
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.GenesisStateRequest
 */
export const GenesisStateRequest = new GenesisStateRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GenesisStateResponse$Type extends MessageType<GenesisStateResponse> {
    constructor() {
        super(
            'com.digitalasset.canton.topology.admin.v30.GenesisStateResponse',
            [
                {
                    no: 1,
                    name: 'chunk',
                    kind: 'scalar',
                    T: 12 /*ScalarType.BYTES*/,
                },
            ]
        )
    }
    create(value?: PartialMessage<GenesisStateResponse>): GenesisStateResponse {
        const message = globalThis.Object.create(this.messagePrototype!)
        message.chunk = new Uint8Array(0)
        if (value !== undefined)
            reflectionMergePartial<GenesisStateResponse>(this, message, value)
        return message
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: GenesisStateResponse
    ): GenesisStateResponse {
        const message = target ?? this.create(),
            end = reader.pos + length
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag()
            switch (fieldNo) {
                case /* bytes chunk */ 1:
                    message.chunk = reader.bytes()
                    break
                default:
                    const u = options.readUnknownField
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        )
                    const d = reader.skip(wireType)
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(
                            this.typeName,
                            message,
                            fieldNo,
                            wireType,
                            d
                        )
            }
        }
        return message
    }
    internalBinaryWrite(
        message: GenesisStateResponse,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* bytes chunk = 1; */
        if (message.chunk.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.chunk)
        const u = options.writeUnknownFields
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(
                this.typeName,
                message,
                writer
            )
        return writer
    }
}
/**
 * @generated MessageType for protobuf message com.digitalasset.canton.topology.admin.v30.GenesisStateResponse
 */
export const GenesisStateResponse = new GenesisStateResponse$Type()
/**
 * @generated ServiceType for protobuf service com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService
 */
export const TopologyManagerReadService = new ServiceType(
    'com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService',
    [
        {
            name: 'ListNamespaceDelegation',
            options: {},
            I: ListNamespaceDelegationRequest,
            O: ListNamespaceDelegationResponse,
        },
        {
            name: 'ListDecentralizedNamespaceDefinition',
            options: {},
            I: ListDecentralizedNamespaceDefinitionRequest,
            O: ListDecentralizedNamespaceDefinitionResponse,
        },
        {
            name: 'ListOwnerToKeyMapping',
            options: {},
            I: ListOwnerToKeyMappingRequest,
            O: ListOwnerToKeyMappingResponse,
        },
        {
            name: 'ListPartyToKeyMapping',
            options: {},
            I: ListPartyToKeyMappingRequest,
            O: ListPartyToKeyMappingResponse,
        },
        {
            name: 'ListSynchronizerTrustCertificate',
            options: {},
            I: ListSynchronizerTrustCertificateRequest,
            O: ListSynchronizerTrustCertificateResponse,
        },
        {
            name: 'ListParticipantSynchronizerPermission',
            options: {},
            I: ListParticipantSynchronizerPermissionRequest,
            O: ListParticipantSynchronizerPermissionResponse,
        },
        {
            name: 'ListPartyHostingLimits',
            options: {},
            I: ListPartyHostingLimitsRequest,
            O: ListPartyHostingLimitsResponse,
        },
        {
            name: 'ListVettedPackages',
            options: {},
            I: ListVettedPackagesRequest,
            O: ListVettedPackagesResponse,
        },
        {
            name: 'ListPartyToParticipant',
            options: {},
            I: ListPartyToParticipantRequest,
            O: ListPartyToParticipantResponse,
        },
        {
            name: 'ListSynchronizerParametersState',
            options: {},
            I: ListSynchronizerParametersStateRequest,
            O: ListSynchronizerParametersStateResponse,
        },
        {
            name: 'ListMediatorSynchronizerState',
            options: {},
            I: ListMediatorSynchronizerStateRequest,
            O: ListMediatorSynchronizerStateResponse,
        },
        {
            name: 'ListSequencerSynchronizerState',
            options: {},
            I: ListSequencerSynchronizerStateRequest,
            O: ListSequencerSynchronizerStateResponse,
        },
        {
            name: 'ListPurgeTopologyTransaction',
            options: {},
            I: ListPurgeTopologyTransactionRequest,
            O: ListPurgeTopologyTransactionResponse,
        },
        {
            name: 'ListSynchronizerUpgradeAnnouncement',
            options: {},
            I: ListSynchronizerUpgradeAnnouncementRequest,
            O: ListSynchronizerUpgradeAnnouncementResponse,
        },
        {
            name: 'ListSequencerConnectionSuccessor',
            options: {},
            I: ListSequencerConnectionSuccessorRequest,
            O: ListSequencerConnectionSuccessorResponse,
        },
        {
            name: 'ListAvailableStores',
            options: {},
            I: ListAvailableStoresRequest,
            O: ListAvailableStoresResponse,
        },
        { name: 'ListAll', options: {}, I: ListAllRequest, O: ListAllResponse },
        {
            name: 'ExportTopologySnapshot',
            serverStreaming: true,
            options: {},
            I: ExportTopologySnapshotRequest,
            O: ExportTopologySnapshotResponse,
        },
        {
            name: 'GenesisState',
            serverStreaming: true,
            options: {},
            I: GenesisStateRequest,
            O: GenesisStateResponse,
        },
    ]
)
