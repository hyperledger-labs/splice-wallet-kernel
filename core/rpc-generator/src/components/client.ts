import * as path from 'path'
import { move } from 'fs-extra'
import { IHooks } from './types'
import { readFile } from 'fs-extra'
import * as fs from 'fs'
import { promisify } from 'util'
const writeFile = promisify(fs.writeFile)
import TOML from '@iarna/toml'
import { template } from 'lodash'
import { execSync } from 'child_process'

const tsTemplate = template(`
// Code generated by @open-rpc/generator DO NOT EDIT.
import _ from "lodash";

import { RequestPayload, RpcTransport } from '@splice/core-types'

<%= methodTypings.toString("typescript").replace(/export type AnyOf[A-Za-z0-9]+ =(?:[\\r\\n]|.)*?;/gm, "") %>

export class <%= className %> {
  public transport: RpcTransport;

  constructor(transport: RpcTransport) {
    this.transport = transport;
  }

  <% openrpcDocument.methods.forEach((method) => { %>
  /**
   * <%= method.summary %>
   */
  // tslint:disable-next-line:max-line-length
  public async request(method: "<%= method.name %>", ...params: Parameters<<%= _.upperFirst(method.name) %>>): ReturnType<<%= _.upperFirst(method.name) %>>
  <% }); %>
  public async request(method: string, params?: RequestPayload['params']): Promise<unknown> {
    const response = await this.transport.submit({ method, params });

    if ('error' in response) {
        throw new Error('RPC error: ' + response.error.code + ' - ' + response.error.message);
    } else {
        return response.result;
    }
  }
}
export default <%= className %>;
`)

const rsTemplate = template(`
#[macro_use]
extern crate jsonrpc_client_core;

<%= methodTypings.toString("rust", { includeSchemaTypings: true, includeMethodAliasTypings: false }) %>

jsonrpc_client!(pub struct <%= className %> {
<%= methodTypings.toString("rust", { includeSchemaTypings: false, includeMethodAliasTypings: true }) %>
});
`)

export const stripAnyOfTypes = (content: string): string => {
    return content.replace(/export type AnyOf[A-Za-z0-9]+ =[\s\S]*?;/gm, '')
}

const hooks: IHooks = {
    afterCopyStatic: [
        async (dest, frm, component): Promise<void> => {
            if (component.language === 'typescript') {
                return await move(
                    path.join(dest, '_package.json'),
                    path.join(dest, 'package.json'),
                    {
                        overwrite: true,
                    }
                )
            }
        },
    ],
    afterCompileTemplate: [
        async (dest, frm, component, openrpcDocument): Promise<void> => {
            if (component.language === 'typescript') {
                const packagePath = path.join(dest, 'package.json')
                const fileContents = await readFile(packagePath)
                const pkg = JSON.parse(fileContents.toString())
                const updatedPkg = JSON.stringify({
                    ...pkg,
                    name: component.name,
                    version: openrpcDocument.info.version,
                })
                execSync(`yarn prettier --write ${dest}/**/*`)

                return await writeFile(packagePath, updatedPkg)
            }
            if (component.language === 'rust') {
                const cargoTOMLPath = path.join(dest, 'Cargo.toml')
                const fileContents = await readFile(cargoTOMLPath)
                const cargoTOML = TOML.parse(fileContents.toString())
                const updatedCargo = TOML.stringify({
                    ...cargoTOML,
                    package: {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        ...(cargoTOML.package as any),
                        name: component.name,
                        version: openrpcDocument.info.version,
                    },
                })
                return await writeFile(cargoTOMLPath, updatedCargo)
            }
        },
    ],
    templateFiles: {
        typescript: [
            {
                path: 'src/index.ts',
                template: tsTemplate,
            },
        ],
        rust: [
            {
                path: 'src/index.rs',
                template: rsTemplate,
            },
        ],
    },
}

module.exports = {
    hooks,
    staticPath: () =>
        path.join(__dirname, '../../templates/client/typescript/'),
}
