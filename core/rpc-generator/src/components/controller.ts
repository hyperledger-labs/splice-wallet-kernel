import * as path from 'path'
import { ensureDir, remove } from 'fs-extra'
import * as openrpcgen from '@open-rpc/generator'
import * as fs from 'fs'
import { promisify } from 'util'
import lodash from 'lodash'
const { template } = lodash

import {
    ContentDescriptorObject,
    ExamplePairingObject,
    ExampleObject,
    MethodObject,
} from '@open-rpc/meta-schema'
const writeFile = promisify(fs.writeFile)
const readFile = promisify(fs.readFile)
const access = promisify(fs.access)

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const onlyHandleTS = ({ language }: any) => {
    if (language !== 'typescript') {
        throw new Error(
            'Cannot handle any other language other than TS for server generator'
        )
    }
}

const methodMappingTemplate =
    template(`// Code generated by rpc-generator DO NOT EDIT!!

<% openrpcDocument.methods.forEach(({ name }) => { %> import { <%= _.upperFirst(name) %> } from "./typings";
<% }); %>

type Methods = {
    <% openrpcDocument.methods.forEach(({ name }) => { %>  <%= name %>: <%= _.upperFirst(name) %>,
    <% }); %>
};

function buildController(methods: Methods) {
     return {
        <% openrpcDocument.methods.forEach(({ name }) => { %>  <%= name %>: methods.<%= name %>,
        <% }); %>};
}

export default buildController;
`)

const generatedTypingsTemplate = template(
    `// Code generated by rpc-generator DO NOT EDIT!!

<%= methodTypings.toString("typescript") %>`
)

const hooks: openrpcgen.components.IHooks = {
    afterCopyStatic: [
        async (dest, frm, component, openrpcDocument): Promise<void> => {
            onlyHandleTS(component)
            // const destPath = path.join(dest, 'package.json')
            // const tmplPath = path.join(dest, '_package.json')

            // const tmplPkgStr = await readFile(tmplPath, 'utf8')
            // let tmplPkg = JSON.parse(tmplPkgStr)

            // tmplPkg.name = component.name || openrpcDocument.info.title
            // tmplPkg.version = openrpcDocument.info.version

            // let currPkgStr
            // try {
            //     currPkgStr = await readFile(destPath, 'utf8')
            //     const currPkg = JSON.parse(currPkgStr)
            //     tmplPkg = {
            //         ...currPkg,
            //         ...tmplPkg,
            //         scripts: {
            //             ...currPkg.scripts,
            //             ...tmplPkg.scripts,
            //         },
            //         dependencies: {
            //             ...currPkg.dependencies,
            //             ...tmplPkg.dependencies,
            //         },
            //         devDependencies: {
            //             ...currPkg.devDependencies,
            //             ...tmplPkg.devDependencies,
            //         },
            //     }
            //     // eslint-disable-next-line @typescript-eslint/no-unused-vars
            // } catch (e) {
            //     // do nothing
            // }

            // await writeFile(destPath, JSON.stringify(tmplPkg, undefined, '  '))
            // await remove(tmplPath)
        },
    ],
    afterCompileTemplate: [
        async (
            dest,
            frm,
            component,
            openrpcDocument,
            typings,
            dereffedDocument
        ): Promise<void> => {
            onlyHandleTS(component)
            if (fs.existsSync(path.join(dest, 'src'))) {
                fs.rmSync(path.join(dest, 'src'), {
                    recursive: true,
                    force: true,
                })
            }
        },
    ],
    templateFiles: {
        typescript: [
            {
                path: 'index.ts',
                template: methodMappingTemplate,
            },
            {
                path: 'typings.ts',
                template: generatedTypingsTemplate,
            },
        ],
    },
}

// note: cant use ESM export because the generator CLI uses commonjs
module.exports = {
    hooks,
    staticPath: () => path.join(__dirname, '../template'),
    openRPCPath: undefined,
}
