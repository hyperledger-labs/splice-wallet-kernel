import * as path from 'path'
import * as openrpcgen from '@open-rpc/generator'
import * as fs from 'fs'
import lodash from 'lodash'
import { execSync } from 'child_process'
const { template } = lodash

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const onlyHandleTS = ({ language }: any) => {
    if (language !== 'typescript') {
        throw new Error(
            'Cannot handle any other language other than TS for server generator'
        )
    }
}

const methodMappingTemplate =
    template(`// Code generated by rpc-generator DO NOT EDIT!!

<% openrpcDocument.methods.forEach(({ name }) => { %> import { <%= _.upperFirst(name) %> } from "./typings.js";
<% }); %>

export type Methods = {
    <% openrpcDocument.methods.forEach(({ name }) => { %>  <%= name %>: <%= _.upperFirst(name) %>,
    <% }); %>
};

function buildController(methods: Methods) {
     return {
        <% openrpcDocument.methods.forEach(({ name }) => { %>  <%= name %>: methods.<%= name %>,
        <% }); %>};
}

export default buildController;
`)

const generatedTypingsTemplate = template(
    `// Code generated by rpc-generator DO NOT EDIT!!

<%= methodTypings.toString("typescript") %>`
)

const hooks: openrpcgen.components.IHooks = {
    afterCompileTemplate: [
        async (
            dest,
            frm,
            component,
            openrpcDocument,
            typings,
            dereffedDocument
        ): Promise<void> => {
            onlyHandleTS(component)
            if (fs.existsSync(path.join(dest, 'src'))) {
                fs.rmSync(path.join(dest, 'src'), {
                    recursive: true,
                    force: true,
                })
            }

            execSync(`yarn prettier --write ${dest}/**/*`)
        },
    ],
    templateFiles: {
        typescript: [
            {
                path: 'index.ts',
                template: methodMappingTemplate,
            },
            {
                path: 'typings.ts',
                template: generatedTypingsTemplate,
            },
        ],
    },
}

// note: cant use ESM export because the generator CLI uses commonjs
module.exports = {
    hooks,
    staticPath: () => path.join(__dirname, '../template'),
    openRPCPath: undefined,
}
