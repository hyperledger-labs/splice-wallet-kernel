// Code generated by rpc-generator DO NOT EDIT!!
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 *
 * Bytestring of the prepared transaction for verification purposes.
 *
 */
export type Tx = string
/**
 *
 * Hash of the prepared transaction that will be signed.
 *
 */
export type TxHash = string
/**
 *
 * Public key used to sign the transaction.
 *
 */
export type PublicKey = string
/**
 *
 * Internal txId used by the Wallet Kernel to store the transaction.
 *
 */
export type InternalTxId = string
/**
 *
 * Unique identifier of the signed transaction given by the Wallet Provider. This may not be the same as the internal txId given by the Wallet Kernel.
 *
 */
export type TxId = string
/**
 *
 * Unique identifiers of the transactions to subscribe to
 *
 */
export type TxIds = TxId[]
/**
 *
 * List of public keys to filter transactions by
 *
 */
export type PublicKeys = PublicKey[]
/**
 *
 * A human readable name for the key
 *
 */
export type Name = string
/**
 *
 * error code
 *
 */
export type ErrorCode = string
/**
 *
 * A human readable error description
 *
 */
export type ErrorDescription = string
export interface Error {
    error: ErrorCode
    error_description: ErrorDescription
    [k: string]: any
}
/**
 *
 * Status of the transaction signing process.
 *
 */
export type SigningStatus = 'pending' | 'signed' | 'rejected' | 'failed'
/**
 *
 * Signature of the transaction if it was signed.
 *
 */
export type Signature = string
/**
 *
 * Additional metadata about the transaction.
 *
 */
export interface Metadata {
    [key: string]: any
}
export interface Transaction {
    txId: TxId
    status: SigningStatus
    signature?: Signature
    publicKey?: PublicKey
    metadata?: Metadata
    [k: string]: any
}
/**
 *
 * List of transactions matching the provided filters
 *
 */
export type Transactions = Transaction[]
export interface ObjectOfTransactionsVFXklMGk {
    transactions?: Transactions
    [k: string]: any
}
/**
 *
 * Unique identifier for the key
 *
 */
export type Id = string
export interface Key {
    id: Id
    name: Name
    publicKey: PublicKey
    [k: string]: any
}
/**
 *
 * List of keys availabile at the Wallet Provider
 *
 */
export type Keys = Key[]
export interface SignTransactionParams {
    tx: Tx
    txHash: TxHash
    publicKey: PublicKey
    internalTxId?: InternalTxId
    [k: string]: any
}
export interface GetTransactionParams {
    txId: TxId
    [k: string]: any
}
export interface GetTransactionsParams {
    txIds?: TxIds
    publicKeys?: PublicKeys
    [k: string]: any
}
export interface CreateKeyParams {
    name: Name
    [k: string]: any
}
/**
 *
 * Configuration parameters to set
 *
 */
export interface SetConfigurationParams {
    [key: string]: any
}
export interface SubscribeTransactionsParams {
    txIds: TxIds
    [k: string]: any
}
export type SignTransactionResult = Error | Transaction
export type GetTransactionResult = Error | Transaction
export type GetTransactionsResult = Error | ObjectOfTransactionsVFXklMGk
export interface GetKeysResult {
    keys?: Keys
    [k: string]: any
}
export type CreateKeyResult = Error | Key
export interface GetConfigurationResult {
    [key: string]: any
}
export interface SetConfigurationResult {
    [key: string]: any
}
export interface SubscribeTransactionsResult {
    txId: TxId
    status: SigningStatus
    signature?: Signature
    publicKey?: PublicKey
    metadata?: Metadata
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfSignTransactionParamsGetTransactionParamsGetTransactionsParamsCreateKeyParamsSetConfigurationParamsSubscribeTransactionsParamsSignTransactionResultGetTransactionResultGetTransactionsResultGetKeysResultCreateKeyResultGetConfigurationResultSetConfigurationResultSubscribeTransactionsResult =

        | SignTransactionParams
        | GetTransactionParams
        | GetTransactionsParams
        | CreateKeyParams
        | SetConfigurationParams
        | SubscribeTransactionsParams
        | SignTransactionResult
        | GetTransactionResult
        | GetTransactionsResult
        | GetKeysResult
        | CreateKeyResult
        | GetConfigurationResult
        | SetConfigurationResult
        | SubscribeTransactionsResult
export type SignTransaction = (
    params: SignTransactionParams
) => Promise<SignTransactionResult>
export type GetTransaction = (
    params: GetTransactionParams
) => Promise<GetTransactionResult>
export type GetTransactions = (
    params: GetTransactionsParams
) => Promise<GetTransactionsResult>
export type GetKeys = () => Promise<GetKeysResult>
export type CreateKey = (params: CreateKeyParams) => Promise<CreateKeyResult>
export type GetConfiguration = () => Promise<GetConfigurationResult>
export type SetConfiguration = (
    params: SetConfigurationParams
) => Promise<SetConfigurationResult>
export type SubscribeTransactions = (
    params: SubscribeTransactionsParams
) => Promise<SubscribeTransactionsResult>
