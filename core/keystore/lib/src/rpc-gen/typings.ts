// Code generated by rpc-generator DO NOT EDIT!!
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 *
 * Bytestring of the prepared transaction for verification purposes.
 *
 */
export type StringQ5XJO2Da = string
/**
 *
 * Hash of the prepared transaction that the KeyStore will sign.
 *
 */
export type StringX1AtUghP = string
/**
 *
 * Public key to use to sign the transaction.
 *
 */
export type StringYbbTuhoe = string
/**
 *
 * Internal txId used by the Wallet Kernel to store the transaction.
 *
 */
export type StringRqVz1Pmx = string
/**
 *
 * Unique identifier of the transaction to retrieve.
 *
 */
export type StringOGxjiOSa = string
export type StringDoaGddGA = string
/**
 *
 * List of transaction IDs to retrieve
 *
 */
export type UnorderedSetOfStringDoaGddGAKQfdHD6C = StringDoaGddGA[]
/**
 *
 * List of public keys to filter transactions by
 *
 */
export type UnorderedSetOfStringDoaGddGApgyvBfbG = StringDoaGddGA[]
/**
 *
 * A human readable name for the key.
 *
 */
export type StringFkQopgLV = string
/**
 *
 * Unique identifiers of the transactions to subscribe to
 *
 */
export type UnorderedSetOfStringDoaGddGAWHFGy71V = StringDoaGddGA[]
/**
 *
 * error code
 *
 */
export type StringH0LE8Qn8 = string
/**
 *
 * A human readable error description
 *
 */
export type StringCEYibvSC = string
export interface Error {
    error: StringH0LE8Qn8
    error_description: StringCEYibvSC
    [k: string]: any
}
/**
 *
 * Unique identifier of the signed transaction given by the KeyStore Provider. This may not be the same as the internal txId given by the Wallet Kernel.
 *
 */
export type StringN3DHV8SD = string
/**
 *
 * Status of the transaction signing process.
 *
 */
export type StringKpZSFUbB = 'pending' | 'signed' | 'rejected'
/**
 *
 * Signature of the transaction if it was signed.
 *
 */
export type StringAqnQ2CGz = string
/**
 *
 * Additional metadata about the transaction.
 *
 */
export interface ObjectTcbHGNLS {
    [key: string]: any
}
export interface Transaction {
    txId: StringN3DHV8SD
    status: StringKpZSFUbB
    signature?: StringAqnQ2CGz
    metadata?: ObjectTcbHGNLS
    [k: string]: any
}
/**
 *
 * List of transactions matching the provided filters
 *
 */
export type UnorderedSetOfTransactionz0RiugNJ = Transaction[]
export interface ObjectOfUnorderedSetOfTransactionz0RiugNJWrckAchU {
    transactions?: UnorderedSetOfTransactionz0RiugNJ
    [k: string]: any
}
/**
 *
 * Unique identifier for the key
 *
 */
export type StringSeicKbSk = string
/**
 *
 * A human readable name for the key
 *
 */
export type StringLI0CTZ6I = string
/**
 *
 * Public key associated with the key
 *
 */
export type StringFrHbj8VQ = string
export interface Key {
    id: StringSeicKbSk
    name: StringLI0CTZ6I
    publicKey: StringFrHbj8VQ
    [k: string]: any
}
/**
 *
 * List of keys availabile in the KeyStore
 *
 */
export type UnorderedSetOfKey2PA3CoDx = Key[]
export interface SignTransactionParams {
    tx: StringQ5XJO2Da
    txHash: StringX1AtUghP
    publicKey: StringYbbTuhoe
    internalTxId?: StringRqVz1Pmx
    [k: string]: any
}
export interface GetTransactionParams {
    txId: StringOGxjiOSa
    [k: string]: any
}
export interface GetTransactionsParams {
    txIds?: UnorderedSetOfStringDoaGddGAKQfdHD6C
    publicKeys?: UnorderedSetOfStringDoaGddGApgyvBfbG
    [k: string]: any
}
export interface CreateKeyParams {
    name: StringFkQopgLV
    [k: string]: any
}
/**
 *
 * Configuration parameters to set
 *
 */
export interface SetConfigurationParams {
    [key: string]: any
}
export interface SubscribeTransactionsParams {
    txIds: UnorderedSetOfStringDoaGddGAWHFGy71V
    [k: string]: any
}
export type SignTransactionResult = Error | Transaction
export type GetTransactionResult = Error | Transaction
export type GetTransactionsResult =
    | Error
    | ObjectOfUnorderedSetOfTransactionz0RiugNJWrckAchU
export interface GetKeysResult {
    keys?: UnorderedSetOfKey2PA3CoDx
    [k: string]: any
}
export interface CreateKeyResult {
    id: StringSeicKbSk
    name: StringLI0CTZ6I
    publicKey: StringFrHbj8VQ
    [k: string]: any
}
export interface GetConfigurationResult {
    [key: string]: any
}
export interface SetConfigurationResult {
    [key: string]: any
}
export interface SubscribeTransactionsResult {
    txId: StringN3DHV8SD
    status: StringKpZSFUbB
    signature?: StringAqnQ2CGz
    metadata?: ObjectTcbHGNLS
    [k: string]: any
}
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfSignTransactionParamsGetTransactionParamsGetTransactionsParamsCreateKeyParamsSetConfigurationParamsSubscribeTransactionsParamsSignTransactionResultGetTransactionResultGetTransactionsResultGetKeysResultCreateKeyResultGetConfigurationResultSetConfigurationResultSubscribeTransactionsResult =

        | SignTransactionParams
        | GetTransactionParams
        | GetTransactionsParams
        | CreateKeyParams
        | SetConfigurationParams
        | SubscribeTransactionsParams
        | SignTransactionResult
        | GetTransactionResult
        | GetTransactionsResult
        | GetKeysResult
        | CreateKeyResult
        | GetConfigurationResult
        | SetConfigurationResult
        | SubscribeTransactionsResult
export type SignTransaction = (
    params: SignTransactionParams
) => Promise<SignTransactionResult>
export type GetTransaction = (
    params: GetTransactionParams
) => Promise<GetTransactionResult>
export type GetTransactions = (
    params: GetTransactionsParams
) => Promise<GetTransactionsResult>
export type GetKeys = () => Promise<GetKeysResult>
export type CreateKey = (params: CreateKeyParams) => Promise<CreateKeyResult>
export type GetConfiguration = () => Promise<GetConfigurationResult>
export type SetConfiguration = (
    params: SetConfigurationParams
) => Promise<SetConfigurationResult>
export type SubscribeTransactions = (
    params: SubscribeTransactionsParams
) => Promise<SubscribeTransactionsResult>
